/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **GET** &#x60;v1/async-actions/{asyncActionId}&#x60;.
    /// </summary>
    [DataContract(Name = "AsyncActionGetResponseBody")]
    public partial class AsyncActionGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// Status of the async action. Informs you whether the async action has already been completed.
        /// </summary>
        /// <value>Status of the async action. Informs you whether the async action has already been completed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 1,

            /// <summary>
            /// Enum ENQUEUED for value: ENQUEUED
            /// </summary>
            [EnumMember(Value = "ENQUEUED")]
            ENQUEUED = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 4
        }


        /// <summary>
        /// Status of the async action. Informs you whether the async action has already been completed.
        /// </summary>
        /// <value>Status of the async action. Informs you whether the async action has already been completed.</value>

        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private StatusEnum? _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown.
        /// </summary>
        /// <value>Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationStatusEnum
        {
            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 1,

            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 2,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 3
        }


        /// <summary>
        /// Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown.
        /// </summary>
        /// <value>Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown.</value>

        [DataMember(Name = "operation_status", EmitDefaultValue = true)]
        public OperationStatusEnum? OperationStatus
        {
            get{ return _OperationStatus;}
            set
            {
                _OperationStatus = value;
                _flagOperationStatus = true;
            }
        }
        private OperationStatusEnum? _OperationStatus;
        private bool _flagOperationStatus;

        /// <summary>
        /// Returns false as OperationStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOperationStatus()
        {
            return _flagOperationStatus;
        }
        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the &#x60;async_action&#x60;.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the &#x60;async_action&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum AsyncAction for value: async_action
            /// </summary>
            [EnumMember(Value = "async_action")]
            AsyncAction = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the &#x60;async_action&#x60;.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the &#x60;async_action&#x60;.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="AsyncActionGetResponseBody" /> class.
        /// </summary>
        /// <param name="id">Async action unique ID..</param>
        /// <param name="type">Type of async action..</param>
        /// <param name="status">Status of the async action. Informs you whether the async action has already been completed..</param>
        /// <param name="operationStatus">Status of async action processing. Informs about the async action status, whether it failed, succeeded, or the status is unknown..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the async action was scheduled in ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the async action was updated. The value is shown in the ISO 8601 format..</param>
        /// <param name="requestId">Unique request ID..</param>
        /// <param name="processingTime">The length of time it took to process the request in milliseconds..</param>
        /// <param name="progress">% progress to completion of the asynchronous action..</param>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about the &#x60;async_action&#x60;. (default to ObjectEnum.AsyncAction).</param>
        /// <param name="result">result.</param>
        public AsyncActionGetResponseBody(string id = default(string), string type = default(string), StatusEnum? status = default(StatusEnum?), OperationStatusEnum? operationStatus = default(OperationStatusEnum?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), string requestId = default(string), int? processingTime = default(int?), int? progress = default(int?), ObjectEnum? varObject = ObjectEnum.AsyncAction, Object result = default(Object))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Status = status;
            if (this.Status != null)
            {
                this._flagStatus = true;
            }
            this._OperationStatus = operationStatus;
            if (this.OperationStatus != null)
            {
                this._flagOperationStatus = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._RequestId = requestId;
            if (this.RequestId != null)
            {
                this._flagRequestId = true;
            }
            this._ProcessingTime = processingTime;
            if (this.ProcessingTime != null)
            {
                this._flagProcessingTime = true;
            }
            this._Progress = progress;
            if (this.Progress != null)
            {
                this._flagProgress = true;
            }
            this._Result = result;
            if (this.Result != null)
            {
                this._flagResult = true;
            }
        }

        /// <summary>
        /// Async action unique ID.
        /// </summary>
        /// <value>Async action unique ID.</value>
        /*
        <example>aa_0adad13d6f057f088e</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Type of async action.
        /// </summary>
        /// <value>Type of async action.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private string _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Timestamp representing the date and time when the async action was scheduled in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the async action was scheduled in ISO 8601 format.</value>
        /*
        <example>2022-06-23T11:21:45.578Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the async action was updated. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the async action was updated. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-06-23T11:21:46.795Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Unique request ID.
        /// </summary>
        /// <value>Unique request ID.</value>
        /*
        <example>v-0b45cee140c3c9b5ca</example>
        */
        [DataMember(Name = "request_id", EmitDefaultValue = true)]
        public string RequestId
        {
            get{ return _RequestId;}
            set
            {
                _RequestId = value;
                _flagRequestId = true;
            }
        }
        private string _RequestId;
        private bool _flagRequestId;

        /// <summary>
        /// Returns false as RequestId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRequestId()
        {
            return _flagRequestId;
        }
        /// <summary>
        /// The length of time it took to process the request in milliseconds.
        /// </summary>
        /// <value>The length of time it took to process the request in milliseconds.</value>
        /*
        <example>1217</example>
        */
        [DataMember(Name = "processing_time", EmitDefaultValue = true)]
        public int? ProcessingTime
        {
            get{ return _ProcessingTime;}
            set
            {
                _ProcessingTime = value;
                _flagProcessingTime = true;
            }
        }
        private int? _ProcessingTime;
        private bool _flagProcessingTime;

        /// <summary>
        /// Returns false as ProcessingTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProcessingTime()
        {
            return _flagProcessingTime;
        }
        /// <summary>
        /// % progress to completion of the asynchronous action.
        /// </summary>
        /// <value>% progress to completion of the asynchronous action.</value>
        [DataMember(Name = "progress", EmitDefaultValue = true)]
        public int? Progress
        {
            get{ return _Progress;}
            set
            {
                _Progress = value;
                _flagProgress = true;
            }
        }
        private int? _Progress;
        private bool _flagProgress;

        /// <summary>
        /// Returns false as Progress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProgress()
        {
            return _flagProgress;
        }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public Object Result
        {
            get{ return _Result;}
            set
            {
                _Result = value;
                _flagResult = true;
            }
        }
        private Object _Result;
        private bool _flagResult;

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return _flagResult;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AsyncActionGetResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  OperationStatus: ").Append(OperationStatus).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ProcessingTime: ").Append(ProcessingTime).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Progress (int?) maximum
            if (this.Progress > (int?)100)
            {
                yield return new ValidationResult("Invalid value for Progress, must be a value less than or equal to 100.", new [] { "Progress" });
            }

            // Progress (int?) minimum
            if (this.Progress < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Progress, must be a value greater than or equal to 0.", new [] { "Progress" });
            }

            yield break;
        }
    }

}
