/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Object representing loyalty card parameters. Child attributes are present only if &#x60;type&#x60; is &#x60;LOYALTY_CARD&#x60;. Defaults to &#x60;null&#x60;.
    /// </summary>
    [DataContract(Name = "VoucherWithCategoriesLoyaltyCard")]
    public partial class VoucherWithCategoriesLoyaltyCard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherWithCategoriesLoyaltyCard" /> class.
        /// </summary>
        /// <param name="points">Total number of points added to the loyalty card over its lifespan..</param>
        /// <param name="balance">Points available for reward redemption. This is calculated as follows: &#x60;balance&#x60; &#x3D; &#x60;points&#x60; - &#x60;expired_points&#x60; - &#x60;subtracted_points&#x60; - &#x60;redemption.redeemed_points&#x60;..</param>
        /// <param name="nextExpirationDate">The next closest date when the next set of points are due to expire..</param>
        /// <param name="nextExpirationPoints">The amount of points that are set to expire next..</param>
        /// <param name="pendingPoints">Shows the number of pending points that will be added to the loyalty card when they are activated automatically or manually..</param>
        /// <param name="expiredPoints">Shows the total number of expired points over the lifetime of the loyalty card..</param>
        /// <param name="subtractedPoints">Shows the total number of subtracted points over the lifetime of the loyalty card..</param>
        public VoucherWithCategoriesLoyaltyCard(int? points = default(int?), int? balance = default(int?), DateTime? nextExpirationDate = default(DateTime?), int? nextExpirationPoints = default(int?), int? pendingPoints = default(int?), int? expiredPoints = default(int?), int? subtractedPoints = default(int?))
        {
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._Balance = balance;
            if (this.Balance != null)
            {
                this._flagBalance = true;
            }
            this._NextExpirationDate = nextExpirationDate;
            if (this.NextExpirationDate != null)
            {
                this._flagNextExpirationDate = true;
            }
            this._NextExpirationPoints = nextExpirationPoints;
            if (this.NextExpirationPoints != null)
            {
                this._flagNextExpirationPoints = true;
            }
            this._PendingPoints = pendingPoints;
            if (this.PendingPoints != null)
            {
                this._flagPendingPoints = true;
            }
            this._ExpiredPoints = expiredPoints;
            if (this.ExpiredPoints != null)
            {
                this._flagExpiredPoints = true;
            }
            this._SubtractedPoints = subtractedPoints;
            if (this.SubtractedPoints != null)
            {
                this._flagSubtractedPoints = true;
            }
        }

        /// <summary>
        /// Total number of points added to the loyalty card over its lifespan.
        /// </summary>
        /// <value>Total number of points added to the loyalty card over its lifespan.</value>
        /*
        <example>7000</example>
        */
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Points available for reward redemption. This is calculated as follows: &#x60;balance&#x60; &#x3D; &#x60;points&#x60; - &#x60;expired_points&#x60; - &#x60;subtracted_points&#x60; - &#x60;redemption.redeemed_points&#x60;.
        /// </summary>
        /// <value>Points available for reward redemption. This is calculated as follows: &#x60;balance&#x60; &#x3D; &#x60;points&#x60; - &#x60;expired_points&#x60; - &#x60;subtracted_points&#x60; - &#x60;redemption.redeemed_points&#x60;.</value>
        /*
        <example>6970</example>
        */
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public int? Balance
        {
            get{ return _Balance;}
            set
            {
                _Balance = value;
                _flagBalance = true;
            }
        }
        private int? _Balance;
        private bool _flagBalance;

        /// <summary>
        /// Returns false as Balance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBalance()
        {
            return _flagBalance;
        }
        /// <summary>
        /// The next closest date when the next set of points are due to expire.
        /// </summary>
        /// <value>The next closest date when the next set of points are due to expire.</value>
        /*
        <example>Tue May 30 02:00:00 CEST 2023</example>
        */
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "next_expiration_date", EmitDefaultValue = true)]
        public DateTime? NextExpirationDate
        {
            get{ return _NextExpirationDate;}
            set
            {
                _NextExpirationDate = value;
                _flagNextExpirationDate = true;
            }
        }
        private DateTime? _NextExpirationDate;
        private bool _flagNextExpirationDate;

        /// <summary>
        /// Returns false as NextExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextExpirationDate()
        {
            return _flagNextExpirationDate;
        }
        /// <summary>
        /// The amount of points that are set to expire next.
        /// </summary>
        /// <value>The amount of points that are set to expire next.</value>
        [DataMember(Name = "next_expiration_points", EmitDefaultValue = true)]
        public int? NextExpirationPoints
        {
            get{ return _NextExpirationPoints;}
            set
            {
                _NextExpirationPoints = value;
                _flagNextExpirationPoints = true;
            }
        }
        private int? _NextExpirationPoints;
        private bool _flagNextExpirationPoints;

        /// <summary>
        /// Returns false as NextExpirationPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNextExpirationPoints()
        {
            return _flagNextExpirationPoints;
        }
        /// <summary>
        /// Shows the number of pending points that will be added to the loyalty card when they are activated automatically or manually.
        /// </summary>
        /// <value>Shows the number of pending points that will be added to the loyalty card when they are activated automatically or manually.</value>
        [DataMember(Name = "pending_points", EmitDefaultValue = true)]
        public int? PendingPoints
        {
            get{ return _PendingPoints;}
            set
            {
                _PendingPoints = value;
                _flagPendingPoints = true;
            }
        }
        private int? _PendingPoints;
        private bool _flagPendingPoints;

        /// <summary>
        /// Returns false as PendingPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPoints()
        {
            return _flagPendingPoints;
        }
        /// <summary>
        /// Shows the total number of expired points over the lifetime of the loyalty card.
        /// </summary>
        /// <value>Shows the total number of expired points over the lifetime of the loyalty card.</value>
        [DataMember(Name = "expired_points", EmitDefaultValue = true)]
        public int? ExpiredPoints
        {
            get{ return _ExpiredPoints;}
            set
            {
                _ExpiredPoints = value;
                _flagExpiredPoints = true;
            }
        }
        private int? _ExpiredPoints;
        private bool _flagExpiredPoints;

        /// <summary>
        /// Returns false as ExpiredPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpiredPoints()
        {
            return _flagExpiredPoints;
        }
        /// <summary>
        /// Shows the total number of subtracted points over the lifetime of the loyalty card.
        /// </summary>
        /// <value>Shows the total number of subtracted points over the lifetime of the loyalty card.</value>
        [DataMember(Name = "subtracted_points", EmitDefaultValue = true)]
        public int? SubtractedPoints
        {
            get{ return _SubtractedPoints;}
            set
            {
                _SubtractedPoints = value;
                _flagSubtractedPoints = true;
            }
        }
        private int? _SubtractedPoints;
        private bool _flagSubtractedPoints;

        /// <summary>
        /// Returns false as SubtractedPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubtractedPoints()
        {
            return _flagSubtractedPoints;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherWithCategoriesLoyaltyCard {\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  NextExpirationDate: ").Append(NextExpirationDate).Append("\n");
            sb.Append("  NextExpirationPoints: ").Append(NextExpirationPoints).Append("\n");
            sb.Append("  PendingPoints: ").Append(PendingPoints).Append("\n");
            sb.Append("  ExpiredPoints: ").Append(ExpiredPoints).Append("\n");
            sb.Append("  SubtractedPoints: ").Append(SubtractedPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
