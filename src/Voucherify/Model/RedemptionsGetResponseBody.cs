/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// RedemptionsGetResponseBody
    /// </summary>
    [DataContract(Name = "RedemptionsGetResponseBody")]
    public partial class RedemptionsGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Redemption for value: redemption
            /// </summary>
            [EnumMember(Value = "redemption")]
            Redemption = 1,

            /// <summary>
            /// Enum RedemptionRollback for value: redemption_rollback
            /// </summary>
            [EnumMember(Value = "redemption_rollback")]
            RedemptionRollback = 2
        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Redemption result.
        /// </summary>
        /// <value>Redemption result.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1,

            /// <summary>
            /// Enum FAILURE for value: FAILURE
            /// </summary>
            [EnumMember(Value = "FAILURE")]
            FAILURE = 2
        }


        /// <summary>
        /// Redemption result.
        /// </summary>
        /// <value>Redemption result.</value>

        [DataMember(Name = "result", EmitDefaultValue = true)]
        public ResultEnum? Result
        {
            get{ return _Result;}
            set
            {
                _Result = value;
                _flagResult = true;
            }
        }
        private ResultEnum? _Result;
        private bool _flagResult;

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return _flagResult;
        }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SUCCEEDED for value: SUCCEEDED
            /// </summary>
            [EnumMember(Value = "SUCCEEDED")]
            SUCCEEDED = 1,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2,

            /// <summary>
            /// Enum ROLLEDBACK for value: ROLLED_BACK
            /// </summary>
            [EnumMember(Value = "ROLLED_BACK")]
            ROLLEDBACK = 3
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private StatusEnum? _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// Defines the related object.
        /// </summary>
        /// <value>Defines the related object.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelatedObjectTypeEnum
        {
            /// <summary>
            /// Enum Voucher for value: voucher
            /// </summary>
            [EnumMember(Value = "voucher")]
            Voucher = 1,

            /// <summary>
            /// Enum PromotionTier for value: promotion_tier
            /// </summary>
            [EnumMember(Value = "promotion_tier")]
            PromotionTier = 2,

            /// <summary>
            /// Enum Redemption for value: redemption
            /// </summary>
            [EnumMember(Value = "redemption")]
            Redemption = 3
        }


        /// <summary>
        /// Defines the related object.
        /// </summary>
        /// <value>Defines the related object.</value>

        [DataMember(Name = "related_object_type", EmitDefaultValue = true)]
        public RelatedObjectTypeEnum? RelatedObjectType
        {
            get{ return _RelatedObjectType;}
            set
            {
                _RelatedObjectType = value;
                _flagRelatedObjectType = true;
            }
        }
        private RelatedObjectTypeEnum? _RelatedObjectType;
        private bool _flagRelatedObjectType;

        /// <summary>
        /// Returns false as RelatedObjectType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectType()
        {
            return _flagRelatedObjectType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsGetResponseBody" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="varObject">varObject.</param>
        /// <param name="date">Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="customerId">Unique customer ID of the redeeming customer..</param>
        /// <param name="trackingId">Hashed customer source ID..</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the redemption..</param>
        /// <param name="amount">For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. and For gift cards, this represents the number of the credits restored to the card in the rolledback redemption. The number is a negative integer in the smallest currency unit, e.g. -100 cents for $1.00 added back to the card. For loyalty cards, this represents the number of loyalty points restored to the card in the rolledback redemption. The number is a negative integer..</param>
        /// <param name="redemption">Unique redemption ID of the parent redemption..</param>
        /// <param name="result">Redemption result..</param>
        /// <param name="status">status.</param>
        /// <param name="relatedRedemptions">relatedRedemptions.</param>
        /// <param name="failureCode">If the result is &#x60;FAILURE&#x60;, this parameter will provide a generic reason as to why the redemption failed..</param>
        /// <param name="failureMessage">If the result is &#x60;FAILURE&#x60;, this parameter will provide a more expanded reason as to why the redemption failed..</param>
        /// <param name="order">order.</param>
        /// <param name="channel">channel.</param>
        /// <param name="customer">customer.</param>
        /// <param name="relatedObjectType">Defines the related object..</param>
        /// <param name="relatedObjectId">relatedObjectId.</param>
        /// <param name="promotionTier">promotionTier.</param>
        /// <param name="reward">reward.</param>
        /// <param name="gift">gift.</param>
        /// <param name="loyaltyCard">loyaltyCard.</param>
        /// <param name="voucher">voucher.</param>
        /// <param name="reason">System generated cause for the redemption being invalid in the context of the provided parameters..</param>
        public RedemptionsGetResponseBody(string id = default(string), ObjectEnum? varObject = default(ObjectEnum?), DateTimeOffset? date = default(DateTimeOffset?), string customerId = default(string), string trackingId = default(string), Object metadata = default(Object), int? amount = default(int?), string redemption = default(string), ResultEnum? result = default(ResultEnum?), StatusEnum? status = default(StatusEnum?), RedemptionsGetResponseBodyRelatedRedemptions relatedRedemptions = default(RedemptionsGetResponseBodyRelatedRedemptions), string failureCode = default(string), string failureMessage = default(string), RedemptionsGetResponseBodyOrder order = default(RedemptionsGetResponseBodyOrder), RedemptionsGetResponseBodyChannel channel = default(RedemptionsGetResponseBodyChannel), RedemptionsGetResponseBodyCustomer customer = default(RedemptionsGetResponseBodyCustomer), RelatedObjectTypeEnum? relatedObjectType = default(RelatedObjectTypeEnum?), string relatedObjectId = default(string), RedemptionsGetResponseBodyPromotionTier promotionTier = default(RedemptionsGetResponseBodyPromotionTier), RedemptionRewardResult reward = default(RedemptionRewardResult), RedemptionsGetResponseBodyGift gift = default(RedemptionsGetResponseBodyGift), RedemptionsGetResponseBodyLoyaltyCard loyaltyCard = default(RedemptionsGetResponseBodyLoyaltyCard), RedemptionsGetResponseBodyVoucher voucher = default(RedemptionsGetResponseBodyVoucher), string reason = default(string))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._Date = date;
            if (this.Date != null)
            {
                this._flagDate = true;
            }
            this._CustomerId = customerId;
            if (this.CustomerId != null)
            {
                this._flagCustomerId = true;
            }
            this._TrackingId = trackingId;
            if (this.TrackingId != null)
            {
                this._flagTrackingId = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
            this._Redemption = redemption;
            if (this.Redemption != null)
            {
                this._flagRedemption = true;
            }
            this._Result = result;
            if (this.Result != null)
            {
                this._flagResult = true;
            }
            this._Status = status;
            if (this.Status != null)
            {
                this._flagStatus = true;
            }
            this._RelatedRedemptions = relatedRedemptions;
            if (this.RelatedRedemptions != null)
            {
                this._flagRelatedRedemptions = true;
            }
            this._FailureCode = failureCode;
            if (this.FailureCode != null)
            {
                this._flagFailureCode = true;
            }
            this._FailureMessage = failureMessage;
            if (this.FailureMessage != null)
            {
                this._flagFailureMessage = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._Channel = channel;
            if (this.Channel != null)
            {
                this._flagChannel = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._RelatedObjectType = relatedObjectType;
            if (this.RelatedObjectType != null)
            {
                this._flagRelatedObjectType = true;
            }
            this._RelatedObjectId = relatedObjectId;
            if (this.RelatedObjectId != null)
            {
                this._flagRelatedObjectId = true;
            }
            this._PromotionTier = promotionTier;
            if (this.PromotionTier != null)
            {
                this._flagPromotionTier = true;
            }
            this._Reward = reward;
            if (this.Reward != null)
            {
                this._flagReward = true;
            }
            this._Gift = gift;
            if (this.Gift != null)
            {
                this._flagGift = true;
            }
            this._LoyaltyCard = loyaltyCard;
            if (this.LoyaltyCard != null)
            {
                this._flagLoyaltyCard = true;
            }
            this._Voucher = voucher;
            if (this.Voucher != null)
            {
                this._flagVoucher = true;
            }
            this._Reason = reason;
            if (this.Reason != null)
            {
                this._flagReason = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-22T10:13:06.487Z</example>
        */
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTimeOffset? Date
        {
            get{ return _Date;}
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }
        private DateTimeOffset? _Date;
        private bool _flagDate;

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }
        /// <summary>
        /// Unique customer ID of the redeeming customer.
        /// </summary>
        /// <value>Unique customer ID of the redeeming customer.</value>
        /*
        <example>cust_i8t5Tt6eiKG5K79KQlJ0Vs64</example>
        */
        [DataMember(Name = "customer_id", EmitDefaultValue = true)]
        public string CustomerId
        {
            get{ return _CustomerId;}
            set
            {
                _CustomerId = value;
                _flagCustomerId = true;
            }
        }
        private string _CustomerId;
        private bool _flagCustomerId;

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return _flagCustomerId;
        }
        /// <summary>
        /// Hashed customer source ID.
        /// </summary>
        /// <value>Hashed customer source ID.</value>
        [DataMember(Name = "tracking_id", EmitDefaultValue = true)]
        public string TrackingId
        {
            get{ return _TrackingId;}
            set
            {
                _TrackingId = value;
                _flagTrackingId = true;
            }
        }
        private string _TrackingId;
        private bool _flagTrackingId;

        /// <summary>
        /// Returns false as TrackingId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTrackingId()
        {
            return _flagTrackingId;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the redemption.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the redemption.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. and For gift cards, this represents the number of the credits restored to the card in the rolledback redemption. The number is a negative integer in the smallest currency unit, e.g. -100 cents for $1.00 added back to the card. For loyalty cards, this represents the number of loyalty points restored to the card in the rolledback redemption. The number is a negative integer.
        /// </summary>
        /// <value>For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. and For gift cards, this represents the number of the credits restored to the card in the rolledback redemption. The number is a negative integer in the smallest currency unit, e.g. -100 cents for $1.00 added back to the card. For loyalty cards, this represents the number of loyalty points restored to the card in the rolledback redemption. The number is a negative integer.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public int? Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private int? _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// Unique redemption ID of the parent redemption.
        /// </summary>
        /// <value>Unique redemption ID of the parent redemption.</value>
        /*
        <example>r_0c656311b5878a2031</example>
        */
        [DataMember(Name = "redemption", EmitDefaultValue = true)]
        public string Redemption
        {
            get{ return _Redemption;}
            set
            {
                _Redemption = value;
                _flagRedemption = true;
            }
        }
        private string _Redemption;
        private bool _flagRedemption;

        /// <summary>
        /// Returns false as Redemption should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemption()
        {
            return _flagRedemption;
        }
        /// <summary>
        /// Gets or Sets RelatedRedemptions
        /// </summary>
        [DataMember(Name = "related_redemptions", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyRelatedRedemptions RelatedRedemptions
        {
            get{ return _RelatedRedemptions;}
            set
            {
                _RelatedRedemptions = value;
                _flagRelatedRedemptions = true;
            }
        }
        private RedemptionsGetResponseBodyRelatedRedemptions _RelatedRedemptions;
        private bool _flagRelatedRedemptions;

        /// <summary>
        /// Returns false as RelatedRedemptions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedRedemptions()
        {
            return _flagRelatedRedemptions;
        }
        /// <summary>
        /// If the result is &#x60;FAILURE&#x60;, this parameter will provide a generic reason as to why the redemption failed.
        /// </summary>
        /// <value>If the result is &#x60;FAILURE&#x60;, this parameter will provide a generic reason as to why the redemption failed.</value>
        /*
        <example>customer_rules_violated</example>
        */
        [DataMember(Name = "failure_code", EmitDefaultValue = true)]
        public string FailureCode
        {
            get{ return _FailureCode;}
            set
            {
                _FailureCode = value;
                _flagFailureCode = true;
            }
        }
        private string _FailureCode;
        private bool _flagFailureCode;

        /// <summary>
        /// Returns false as FailureCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFailureCode()
        {
            return _flagFailureCode;
        }
        /// <summary>
        /// If the result is &#x60;FAILURE&#x60;, this parameter will provide a more expanded reason as to why the redemption failed.
        /// </summary>
        /// <value>If the result is &#x60;FAILURE&#x60;, this parameter will provide a more expanded reason as to why the redemption failed.</value>
        [DataMember(Name = "failure_message", EmitDefaultValue = true)]
        public string FailureMessage
        {
            get{ return _FailureMessage;}
            set
            {
                _FailureMessage = value;
                _flagFailureMessage = true;
            }
        }
        private string _FailureMessage;
        private bool _flagFailureMessage;

        /// <summary>
        /// Returns false as FailureMessage should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFailureMessage()
        {
            return _flagFailureMessage;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyOrder Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private RedemptionsGetResponseBodyOrder _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyChannel Channel
        {
            get{ return _Channel;}
            set
            {
                _Channel = value;
                _flagChannel = true;
            }
        }
        private RedemptionsGetResponseBodyChannel _Channel;
        private bool _flagChannel;

        /// <summary>
        /// Returns false as Channel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChannel()
        {
            return _flagChannel;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyCustomer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private RedemptionsGetResponseBodyCustomer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets RelatedObjectId
        /// </summary>
        [DataMember(Name = "related_object_id", EmitDefaultValue = true)]
        public string RelatedObjectId
        {
            get{ return _RelatedObjectId;}
            set
            {
                _RelatedObjectId = value;
                _flagRelatedObjectId = true;
            }
        }
        private string _RelatedObjectId;
        private bool _flagRelatedObjectId;

        /// <summary>
        /// Returns false as RelatedObjectId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectId()
        {
            return _flagRelatedObjectId;
        }
        /// <summary>
        /// Gets or Sets PromotionTier
        /// </summary>
        [DataMember(Name = "promotion_tier", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyPromotionTier PromotionTier
        {
            get{ return _PromotionTier;}
            set
            {
                _PromotionTier = value;
                _flagPromotionTier = true;
            }
        }
        private RedemptionsGetResponseBodyPromotionTier _PromotionTier;
        private bool _flagPromotionTier;

        /// <summary>
        /// Returns false as PromotionTier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePromotionTier()
        {
            return _flagPromotionTier;
        }
        /// <summary>
        /// Gets or Sets Reward
        /// </summary>
        [DataMember(Name = "reward", EmitDefaultValue = true)]
        public RedemptionRewardResult Reward
        {
            get{ return _Reward;}
            set
            {
                _Reward = value;
                _flagReward = true;
            }
        }
        private RedemptionRewardResult _Reward;
        private bool _flagReward;

        /// <summary>
        /// Returns false as Reward should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReward()
        {
            return _flagReward;
        }
        /// <summary>
        /// Gets or Sets Gift
        /// </summary>
        [DataMember(Name = "gift", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyGift Gift
        {
            get{ return _Gift;}
            set
            {
                _Gift = value;
                _flagGift = true;
            }
        }
        private RedemptionsGetResponseBodyGift _Gift;
        private bool _flagGift;

        /// <summary>
        /// Returns false as Gift should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGift()
        {
            return _flagGift;
        }
        /// <summary>
        /// Gets or Sets LoyaltyCard
        /// </summary>
        [DataMember(Name = "loyalty_card", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyLoyaltyCard LoyaltyCard
        {
            get{ return _LoyaltyCard;}
            set
            {
                _LoyaltyCard = value;
                _flagLoyaltyCard = true;
            }
        }
        private RedemptionsGetResponseBodyLoyaltyCard _LoyaltyCard;
        private bool _flagLoyaltyCard;

        /// <summary>
        /// Returns false as LoyaltyCard should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyCard()
        {
            return _flagLoyaltyCard;
        }
        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", EmitDefaultValue = true)]
        public RedemptionsGetResponseBodyVoucher Voucher
        {
            get{ return _Voucher;}
            set
            {
                _Voucher = value;
                _flagVoucher = true;
            }
        }
        private RedemptionsGetResponseBodyVoucher _Voucher;
        private bool _flagVoucher;

        /// <summary>
        /// Returns false as Voucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucher()
        {
            return _flagVoucher;
        }
        /// <summary>
        /// System generated cause for the redemption being invalid in the context of the provided parameters.
        /// </summary>
        /// <value>System generated cause for the redemption being invalid in the context of the provided parameters.</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason
        {
            get{ return _Reason;}
            set
            {
                _Reason = value;
                _flagReason = true;
            }
        }
        private string _Reason;
        private bool _flagReason;

        /// <summary>
        /// Returns false as Reason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReason()
        {
            return _flagReason;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RedemptionsGetResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Redemption: ").Append(Redemption).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  RelatedRedemptions: ").Append(RelatedRedemptions).Append("\n");
            sb.Append("  FailureCode: ").Append(FailureCode).Append("\n");
            sb.Append("  FailureMessage: ").Append(FailureMessage).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  RelatedObjectType: ").Append(RelatedObjectType).Append("\n");
            sb.Append("  RelatedObjectId: ").Append(RelatedObjectId).Append("\n");
            sb.Append("  PromotionTier: ").Append(PromotionTier).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  Gift: ").Append(Gift).Append("\n");
            sb.Append("  LoyaltyCard: ").Append(LoyaltyCard).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
