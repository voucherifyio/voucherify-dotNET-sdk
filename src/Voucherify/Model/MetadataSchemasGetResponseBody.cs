/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **GET** &#x60;/v1/metadata-schemas/{resource}&#x60;.
    /// </summary>
    [DataContract(Name = "MetadataSchemasGetResponseBody")]
    public partial class MetadataSchemasGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetadataSchemasGetResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the metadata schema..</param>
        /// <param name="relatedObject">The resource type. You can define custom metadata schemas, which have a custom &#x60;\&quot;related_object\&quot;&#x60; resource type. The standard metadata schemas are: &#x60;\&quot;campaign\&quot;&#x60;, &#x60;\&quot;customer\&quot;&#x60;, &#x60;\&quot;earning_rule\&quot;&#x60;, &#x60;\&quot;loyalty_tier\&quot;&#x60;, &#x60;\&quot;order\&quot;&#x60;, &#x60;\&quot;order_item\&quot;&#x60;, &#x60;\&quot;product\&quot;&#x60;, &#x60;\&quot;promotion_tier\&quot;&#x60;, &#x60;\&quot;publication\&quot;&#x60;, &#x60;\&quot;redemption\&quot;&#x60;, &#x60;\&quot;reward\&quot;&#x60;, &#x60;\&quot;voucher\&quot;&#x60;..</param>
        /// <param name="properties">Contains metadata definitions..</param>
        /// <param name="allowDefinedOnly">Restricts the creation of metadata fields when set to &#x60;true&#x60;. It indicates whether or not you can create new metadata definitions, e.g. in the campaign or publication manager. If set to &#x60;true&#x60;, then only the defined fields are available for assigning values..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the metadata schema was created. The value for this parameter is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the metadata schema was updated. The value for this parameter is shown in the ISO 8601 format..</param>
        /// <param name="varObject">The type of the object represented by the JSON. This object stores information about the metadata schema. (default to &quot;metadata_schema&quot;).</param>
        public MetadataSchemasGetResponseBody(string id = default(string), string relatedObject = default(string), Dictionary<string, MetadataSchemaDefinitionDeprecated> properties = default(Dictionary<string, MetadataSchemaDefinitionDeprecated>), bool? allowDefinedOnly = default(bool?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), string varObject = @"metadata_schema")
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._RelatedObject = relatedObject;
            if (this.RelatedObject != null)
            {
                this._flagRelatedObject = true;
            }
            this._Properties = properties;
            if (this.Properties != null)
            {
                this._flagProperties = true;
            }
            this._AllowDefinedOnly = allowDefinedOnly;
            if (this.AllowDefinedOnly != null)
            {
                this._flagAllowDefinedOnly = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Unique identifier of the metadata schema.
        /// </summary>
        /// <value>Unique identifier of the metadata schema.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The resource type. You can define custom metadata schemas, which have a custom &#x60;\&quot;related_object\&quot;&#x60; resource type. The standard metadata schemas are: &#x60;\&quot;campaign\&quot;&#x60;, &#x60;\&quot;customer\&quot;&#x60;, &#x60;\&quot;earning_rule\&quot;&#x60;, &#x60;\&quot;loyalty_tier\&quot;&#x60;, &#x60;\&quot;order\&quot;&#x60;, &#x60;\&quot;order_item\&quot;&#x60;, &#x60;\&quot;product\&quot;&#x60;, &#x60;\&quot;promotion_tier\&quot;&#x60;, &#x60;\&quot;publication\&quot;&#x60;, &#x60;\&quot;redemption\&quot;&#x60;, &#x60;\&quot;reward\&quot;&#x60;, &#x60;\&quot;voucher\&quot;&#x60;.
        /// </summary>
        /// <value>The resource type. You can define custom metadata schemas, which have a custom &#x60;\&quot;related_object\&quot;&#x60; resource type. The standard metadata schemas are: &#x60;\&quot;campaign\&quot;&#x60;, &#x60;\&quot;customer\&quot;&#x60;, &#x60;\&quot;earning_rule\&quot;&#x60;, &#x60;\&quot;loyalty_tier\&quot;&#x60;, &#x60;\&quot;order\&quot;&#x60;, &#x60;\&quot;order_item\&quot;&#x60;, &#x60;\&quot;product\&quot;&#x60;, &#x60;\&quot;promotion_tier\&quot;&#x60;, &#x60;\&quot;publication\&quot;&#x60;, &#x60;\&quot;redemption\&quot;&#x60;, &#x60;\&quot;reward\&quot;&#x60;, &#x60;\&quot;voucher\&quot;&#x60;.</value>
        [DataMember(Name = "related_object", EmitDefaultValue = true)]
        public string RelatedObject
        {
            get{ return _RelatedObject;}
            set
            {
                _RelatedObject = value;
                _flagRelatedObject = true;
            }
        }
        private string _RelatedObject;
        private bool _flagRelatedObject;

        /// <summary>
        /// Returns false as RelatedObject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObject()
        {
            return _flagRelatedObject;
        }
        /// <summary>
        /// Contains metadata definitions.
        /// </summary>
        /// <value>Contains metadata definitions.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, MetadataSchemaDefinitionDeprecated> Properties
        {
            get{ return _Properties;}
            set
            {
                _Properties = value;
                _flagProperties = true;
            }
        }
        private Dictionary<string, MetadataSchemaDefinitionDeprecated> _Properties;
        private bool _flagProperties;

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return _flagProperties;
        }
        /// <summary>
        /// Restricts the creation of metadata fields when set to &#x60;true&#x60;. It indicates whether or not you can create new metadata definitions, e.g. in the campaign or publication manager. If set to &#x60;true&#x60;, then only the defined fields are available for assigning values.
        /// </summary>
        /// <value>Restricts the creation of metadata fields when set to &#x60;true&#x60;. It indicates whether or not you can create new metadata definitions, e.g. in the campaign or publication manager. If set to &#x60;true&#x60;, then only the defined fields are available for assigning values.</value>
        [DataMember(Name = "allow_defined_only", EmitDefaultValue = true)]
        public bool? AllowDefinedOnly
        {
            get{ return _AllowDefinedOnly;}
            set
            {
                _AllowDefinedOnly = value;
                _flagAllowDefinedOnly = true;
            }
        }
        private bool? _AllowDefinedOnly;
        private bool _flagAllowDefinedOnly;

        /// <summary>
        /// Returns false as AllowDefinedOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowDefinedOnly()
        {
            return _flagAllowDefinedOnly;
        }
        /// <summary>
        /// Timestamp representing the date and time when the metadata schema was created. The value for this parameter is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the metadata schema was created. The value for this parameter is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-03T13:33:44.556Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the metadata schema was updated. The value for this parameter is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the metadata schema was updated. The value for this parameter is shown in the ISO 8601 format.</value>
        /*
        <example>2022-08-11T08:05:30.695Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// The type of the object represented by the JSON. This object stores information about the metadata schema.
        /// </summary>
        /// <value>The type of the object represented by the JSON. This object stores information about the metadata schema.</value>
        [DataMember(Name = "object", EmitDefaultValue = true)]
        public string Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private string _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetadataSchemasGetResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RelatedObject: ").Append(RelatedObject).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  AllowDefinedOnly: ").Append(AllowDefinedOnly).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
