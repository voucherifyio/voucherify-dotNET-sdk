/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **POST** &#x60;v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable&#x60;
    /// </summary>
    [DataContract(Name = "LoyaltiesEarningRulesEnableResponseBody")]
    public partial class LoyaltiesEarningRulesEnableResponseBody : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by JSON. Default is earning_rule.
        /// </summary>
        /// <value>The type of the object represented by JSON. Default is earning_rule.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum EarningRule for value: earning_rule
            /// </summary>
            [EnumMember(Value = "earning_rule")]
            EarningRule = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. Default is earning_rule.
        /// </summary>
        /// <value>The type of the object represented by JSON. Default is earning_rule.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Defines ValidityDayOfWeek
        /// </summary>
        public enum ValidityDayOfWeekEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesEarningRulesEnableResponseBody" /> class.
        /// </summary>
        /// <param name="id">Assigned by the Voucherify API, identifies the earning rule object..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the earning rule was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="loyalty">loyalty.</param>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="customEvent">customEvent.</param>
        /// <param name="segment">segment.</param>
        /// <param name="loyaltyTier">loyaltyTier.</param>
        /// <param name="pendingPoints">pendingPoints.</param>
        /// <param name="source">source.</param>
        /// <param name="varObject">The type of the object represented by JSON. Default is earning_rule. (default to ObjectEnum.EarningRule).</param>
        /// <param name="automationId">For internal use by Voucherify..</param>
        /// <param name="startDate">Start date defines when the earning rule starts to be active. Activation timestamp is presented in the ISO 8601 format. The earning rule is inactive before this date. If you do not define the start date for an earning rule, it will inherit the campaign start date by default..</param>
        /// <param name="expirationDate">Expiration date defines when the earning rule expires. Expiration timestamp is presented in the ISO 8601 format. The earning rule is inactive after this date. If you do not define the expiration date for an earning rule, it will inherit the campaign expiration date by default..</param>
        /// <param name="validityTimeframe">validityTimeframe.</param>
        /// <param name="validityDayOfWeek">Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday.</param>
        /// <param name="validityHours">validityHours.</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format..</param>
        /// <param name="active">A flag to toggle the earning rule on or off. You can disable an earning rule even though it&#39;s within the active period defined by the start_date and expiration_date of the campaign or the earning rule&#39;s own start_date and expiration_date. (default to true).</param>
        public LoyaltiesEarningRulesEnableResponseBody(string id = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), LoyaltiesEarningRulesEnableResponseBodyLoyalty loyalty = default(LoyaltiesEarningRulesEnableResponseBodyLoyalty), string varEvent = default(string), LoyaltiesEarningRulesEnableResponseBodyCustomEvent customEvent = default(LoyaltiesEarningRulesEnableResponseBodyCustomEvent), LoyaltiesEarningRulesEnableResponseBodySegment segment = default(LoyaltiesEarningRulesEnableResponseBodySegment), LoyaltiesEarningRulesEnableResponseBodyLoyaltyTier loyaltyTier = default(LoyaltiesEarningRulesEnableResponseBodyLoyaltyTier), LoyaltiesEarningRulesEnableResponseBodyPendingPoints pendingPoints = default(LoyaltiesEarningRulesEnableResponseBodyPendingPoints), LoyaltiesEarningRulesEnableResponseBodySource source = default(LoyaltiesEarningRulesEnableResponseBodySource), ObjectEnum? varObject = ObjectEnum.EarningRule, string automationId = default(string), string startDate = default(string), string expirationDate = default(string), ValidityTimeframe validityTimeframe = default(ValidityTimeframe), List<ValidityDayOfWeekEnum> validityDayOfWeek = default(List<ValidityDayOfWeekEnum>), ValidityHours validityHours = default(ValidityHours), Object metadata = default(Object), DateTimeOffset? updatedAt = default(DateTimeOffset?), bool? active = true)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._Loyalty = loyalty;
            if (this.Loyalty != null)
            {
                this._flagLoyalty = true;
            }
            this._Event = varEvent;
            if (this.Event != null)
            {
                this._flagEvent = true;
            }
            this._CustomEvent = customEvent;
            if (this.CustomEvent != null)
            {
                this._flagCustomEvent = true;
            }
            this._Segment = segment;
            if (this.Segment != null)
            {
                this._flagSegment = true;
            }
            this._LoyaltyTier = loyaltyTier;
            if (this.LoyaltyTier != null)
            {
                this._flagLoyaltyTier = true;
            }
            this._PendingPoints = pendingPoints;
            if (this.PendingPoints != null)
            {
                this._flagPendingPoints = true;
            }
            this._Source = source;
            if (this.Source != null)
            {
                this._flagSource = true;
            }
            this._AutomationId = automationId;
            if (this.AutomationId != null)
            {
                this._flagAutomationId = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._ValidityTimeframe = validityTimeframe;
            if (this.ValidityTimeframe != null)
            {
                this._flagValidityTimeframe = true;
            }
            this._ValidityDayOfWeek = validityDayOfWeek;
            if (this.ValidityDayOfWeek != null)
            {
                this._flagValidityDayOfWeek = true;
            }
            this._ValidityHours = validityHours;
            if (this.ValidityHours != null)
            {
                this._flagValidityHours = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Assigned by the Voucherify API, identifies the earning rule object.
        /// </summary>
        /// <value>Assigned by the Voucherify API, identifies the earning rule object.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the earning rule was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the earning rule was created. The value is shown in the ISO 8601 format.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Gets or Sets Loyalty
        /// </summary>
        [DataMember(Name = "loyalty", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesEnableResponseBodyLoyalty Loyalty
        {
            get{ return _Loyalty;}
            set
            {
                _Loyalty = value;
                _flagLoyalty = true;
            }
        }
        private LoyaltiesEarningRulesEnableResponseBodyLoyalty _Loyalty;
        private bool _flagLoyalty;

        /// <summary>
        /// Returns false as Loyalty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyalty()
        {
            return _flagLoyalty;
        }
        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        /*
        <example>&#x60;order.paid&#x60;, &#x60;customer.segment.entered&#x60;, &#x60;customer.loyalty.tier.upgraded&#x60;, &#x60;customer.loyalty.tier.downgraded&#x60;, &#x60;customer.loyalty.tier.prolonged&#x60;, &#x60;customer.loyalty.tier.joined&#x60;, &#x60;customer.loyalty.tier.left&#x60;</example>
        */
        [DataMember(Name = "event", EmitDefaultValue = true)]
        public string Event
        {
            get{ return _Event;}
            set
            {
                _Event = value;
                _flagEvent = true;
            }
        }
        private string _Event;
        private bool _flagEvent;

        /// <summary>
        /// Returns false as Event should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvent()
        {
            return _flagEvent;
        }
        /// <summary>
        /// Gets or Sets CustomEvent
        /// </summary>
        [DataMember(Name = "custom_event", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesEnableResponseBodyCustomEvent CustomEvent
        {
            get{ return _CustomEvent;}
            set
            {
                _CustomEvent = value;
                _flagCustomEvent = true;
            }
        }
        private LoyaltiesEarningRulesEnableResponseBodyCustomEvent _CustomEvent;
        private bool _flagCustomEvent;

        /// <summary>
        /// Returns false as CustomEvent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomEvent()
        {
            return _flagCustomEvent;
        }
        /// <summary>
        /// Gets or Sets Segment
        /// </summary>
        [DataMember(Name = "segment", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesEnableResponseBodySegment Segment
        {
            get{ return _Segment;}
            set
            {
                _Segment = value;
                _flagSegment = true;
            }
        }
        private LoyaltiesEarningRulesEnableResponseBodySegment _Segment;
        private bool _flagSegment;

        /// <summary>
        /// Returns false as Segment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSegment()
        {
            return _flagSegment;
        }
        /// <summary>
        /// Gets or Sets LoyaltyTier
        /// </summary>
        [DataMember(Name = "loyalty_tier", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesEnableResponseBodyLoyaltyTier LoyaltyTier
        {
            get{ return _LoyaltyTier;}
            set
            {
                _LoyaltyTier = value;
                _flagLoyaltyTier = true;
            }
        }
        private LoyaltiesEarningRulesEnableResponseBodyLoyaltyTier _LoyaltyTier;
        private bool _flagLoyaltyTier;

        /// <summary>
        /// Returns false as LoyaltyTier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTier()
        {
            return _flagLoyaltyTier;
        }
        /// <summary>
        /// Gets or Sets PendingPoints
        /// </summary>
        [DataMember(Name = "pending_points", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesEnableResponseBodyPendingPoints PendingPoints
        {
            get{ return _PendingPoints;}
            set
            {
                _PendingPoints = value;
                _flagPendingPoints = true;
            }
        }
        private LoyaltiesEarningRulesEnableResponseBodyPendingPoints _PendingPoints;
        private bool _flagPendingPoints;

        /// <summary>
        /// Returns false as PendingPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPoints()
        {
            return _flagPendingPoints;
        }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesEnableResponseBodySource Source
        {
            get{ return _Source;}
            set
            {
                _Source = value;
                _flagSource = true;
            }
        }
        private LoyaltiesEarningRulesEnableResponseBodySource _Source;
        private bool _flagSource;

        /// <summary>
        /// Returns false as Source should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSource()
        {
            return _flagSource;
        }
        /// <summary>
        /// For internal use by Voucherify.
        /// </summary>
        /// <value>For internal use by Voucherify.</value>
        [DataMember(Name = "automation_id", EmitDefaultValue = true)]
        public string AutomationId
        {
            get{ return _AutomationId;}
            set
            {
                _AutomationId = value;
                _flagAutomationId = true;
            }
        }
        private string _AutomationId;
        private bool _flagAutomationId;

        /// <summary>
        /// Returns false as AutomationId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAutomationId()
        {
            return _flagAutomationId;
        }
        /// <summary>
        /// Start date defines when the earning rule starts to be active. Activation timestamp is presented in the ISO 8601 format. The earning rule is inactive before this date. If you do not define the start date for an earning rule, it will inherit the campaign start date by default.
        /// </summary>
        /// <value>Start date defines when the earning rule starts to be active. Activation timestamp is presented in the ISO 8601 format. The earning rule is inactive before this date. If you do not define the start date for an earning rule, it will inherit the campaign start date by default.</value>
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public string StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private string _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Expiration date defines when the earning rule expires. Expiration timestamp is presented in the ISO 8601 format. The earning rule is inactive after this date. If you do not define the expiration date for an earning rule, it will inherit the campaign expiration date by default.
        /// </summary>
        /// <value>Expiration date defines when the earning rule expires. Expiration timestamp is presented in the ISO 8601 format. The earning rule is inactive after this date. If you do not define the expiration date for an earning rule, it will inherit the campaign expiration date by default.</value>
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public string ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private string _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// Gets or Sets ValidityTimeframe
        /// </summary>
        [DataMember(Name = "validity_timeframe", EmitDefaultValue = true)]
        public ValidityTimeframe ValidityTimeframe
        {
            get{ return _ValidityTimeframe;}
            set
            {
                _ValidityTimeframe = value;
                _flagValidityTimeframe = true;
            }
        }
        private ValidityTimeframe _ValidityTimeframe;
        private bool _flagValidityTimeframe;

        /// <summary>
        /// Returns false as ValidityTimeframe should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityTimeframe()
        {
            return _flagValidityTimeframe;
        }
        /// <summary>
        /// Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday
        /// </summary>
        /// <value>Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday</value>
        [DataMember(Name = "validity_day_of_week", EmitDefaultValue = true)]
        public List<LoyaltiesEarningRulesEnableResponseBody.ValidityDayOfWeekEnum> ValidityDayOfWeek
        {
            get{ return _ValidityDayOfWeek;}
            set
            {
                _ValidityDayOfWeek = value;
                _flagValidityDayOfWeek = true;
            }
        }
        private List<LoyaltiesEarningRulesEnableResponseBody.ValidityDayOfWeekEnum> _ValidityDayOfWeek;
        private bool _flagValidityDayOfWeek;

        /// <summary>
        /// Returns false as ValidityDayOfWeek should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityDayOfWeek()
        {
            return _flagValidityDayOfWeek;
        }
        /// <summary>
        /// Gets or Sets ValidityHours
        /// </summary>
        [DataMember(Name = "validity_hours", EmitDefaultValue = true)]
        public ValidityHours ValidityHours
        {
            get{ return _ValidityHours;}
            set
            {
                _ValidityHours = value;
                _flagValidityHours = true;
            }
        }
        private ValidityHours _ValidityHours;
        private bool _flagValidityHours;

        /// <summary>
        /// Returns false as ValidityHours should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityHours()
        {
            return _flagValidityHours;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// A flag to toggle the earning rule on or off. You can disable an earning rule even though it&#39;s within the active period defined by the start_date and expiration_date of the campaign or the earning rule&#39;s own start_date and expiration_date.
        /// </summary>
        /// <value>A flag to toggle the earning rule on or off. You can disable an earning rule even though it&#39;s within the active period defined by the start_date and expiration_date of the campaign or the earning rule&#39;s own start_date and expiration_date.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool? _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltiesEarningRulesEnableResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Loyalty: ").Append(Loyalty).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  CustomEvent: ").Append(CustomEvent).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  LoyaltyTier: ").Append(LoyaltyTier).Append("\n");
            sb.Append("  PendingPoints: ").Append(PendingPoints).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  AutomationId: ").Append(AutomationId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ValidityTimeframe: ").Append(ValidityTimeframe).Append("\n");
            sb.Append("  ValidityDayOfWeek: ").Append(ValidityDayOfWeek).Append("\n");
            sb.Append("  ValidityHours: ").Append(ValidityHours).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
