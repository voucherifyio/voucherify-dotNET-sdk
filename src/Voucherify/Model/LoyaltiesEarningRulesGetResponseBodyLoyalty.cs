/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// LoyaltiesEarningRulesGetResponseBodyLoyalty
    /// </summary>
    [DataContract(Name = "LoyaltiesEarningRulesGetResponseBodyLoyalty")]
    public partial class LoyaltiesEarningRulesGetResponseBodyLoyalty : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FIXED for value: FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED = 1,

            /// <summary>
            /// Enum PROPORTIONAL for value: PROPORTIONAL
            /// </summary>
            [EnumMember(Value = "PROPORTIONAL")]
            PROPORTIONAL = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Defines CalculationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CalculationTypeEnum
        {
            /// <summary>
            /// Enum ORDERAMOUNT for value: ORDER_AMOUNT
            /// </summary>
            [EnumMember(Value = "ORDER_AMOUNT")]
            ORDERAMOUNT = 1,

            /// <summary>
            /// Enum ORDERTOTALAMOUNT for value: ORDER_TOTAL_AMOUNT
            /// </summary>
            [EnumMember(Value = "ORDER_TOTAL_AMOUNT")]
            ORDERTOTALAMOUNT = 2,

            /// <summary>
            /// Enum ORDERMETADATA for value: ORDER_METADATA
            /// </summary>
            [EnumMember(Value = "ORDER_METADATA")]
            ORDERMETADATA = 3,

            /// <summary>
            /// Enum ORDERITEMSQUANTITY for value: ORDER_ITEMS_QUANTITY
            /// </summary>
            [EnumMember(Value = "ORDER_ITEMS_QUANTITY")]
            ORDERITEMSQUANTITY = 4,

            /// <summary>
            /// Enum ORDERITEMSAMOUNT for value: ORDER_ITEMS_AMOUNT
            /// </summary>
            [EnumMember(Value = "ORDER_ITEMS_AMOUNT")]
            ORDERITEMSAMOUNT = 5,

            /// <summary>
            /// Enum ORDERITEMSSUBTOTALAMOUNT for value: ORDER_ITEMS_SUBTOTAL_AMOUNT
            /// </summary>
            [EnumMember(Value = "ORDER_ITEMS_SUBTOTAL_AMOUNT")]
            ORDERITEMSSUBTOTALAMOUNT = 6,

            /// <summary>
            /// Enum CUSTOMERMETADATA for value: CUSTOMER_METADATA
            /// </summary>
            [EnumMember(Value = "CUSTOMER_METADATA")]
            CUSTOMERMETADATA = 7,

            /// <summary>
            /// Enum CUSTOMEVENTMETADATA for value: CUSTOM_EVENT_METADATA
            /// </summary>
            [EnumMember(Value = "CUSTOM_EVENT_METADATA")]
            CUSTOMEVENTMETADATA = 8
        }


        /// <summary>
        /// Gets or Sets CalculationType
        /// </summary>

        [DataMember(Name = "calculation_type", EmitDefaultValue = true)]
        public CalculationTypeEnum? CalculationType
        {
            get{ return _CalculationType;}
            set
            {
                _CalculationType = value;
                _flagCalculationType = true;
            }
        }
        private CalculationTypeEnum? _CalculationType;
        private bool _flagCalculationType;

        /// <summary>
        /// Returns false as CalculationType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCalculationType()
        {
            return _flagCalculationType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesEarningRulesGetResponseBodyLoyalty" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="points">Defines how the points will be added to the loyalty card. FIXED adds a fixed number of points..</param>
        /// <param name="calculationType">calculationType.</param>
        /// <param name="order">order.</param>
        /// <param name="orderItems">orderItems.</param>
        /// <param name="customer">customer.</param>
        /// <param name="customEvent">customEvent.</param>
        public LoyaltiesEarningRulesGetResponseBodyLoyalty(TypeEnum? type = default(TypeEnum?), int? points = default(int?), CalculationTypeEnum? calculationType = default(CalculationTypeEnum?), LoyaltiesEarningRulesGetResponseBodyLoyaltyOrder order = default(LoyaltiesEarningRulesGetResponseBodyLoyaltyOrder), LoyaltiesEarningRulesGetResponseBodyLoyaltyOrderItems orderItems = default(LoyaltiesEarningRulesGetResponseBodyLoyaltyOrderItems), LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomer customer = default(LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomer), LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomEvent customEvent = default(LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomEvent))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._CalculationType = calculationType;
            if (this.CalculationType != null)
            {
                this._flagCalculationType = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._OrderItems = orderItems;
            if (this.OrderItems != null)
            {
                this._flagOrderItems = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._CustomEvent = customEvent;
            if (this.CustomEvent != null)
            {
                this._flagCustomEvent = true;
            }
        }

        /// <summary>
        /// Defines how the points will be added to the loyalty card. FIXED adds a fixed number of points.
        /// </summary>
        /// <value>Defines how the points will be added to the loyalty card. FIXED adds a fixed number of points.</value>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesGetResponseBodyLoyaltyOrder Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private LoyaltiesEarningRulesGetResponseBodyLoyaltyOrder _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets OrderItems
        /// </summary>
        [DataMember(Name = "order_items", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesGetResponseBodyLoyaltyOrderItems OrderItems
        {
            get{ return _OrderItems;}
            set
            {
                _OrderItems = value;
                _flagOrderItems = true;
            }
        }
        private LoyaltiesEarningRulesGetResponseBodyLoyaltyOrderItems _OrderItems;
        private bool _flagOrderItems;

        /// <summary>
        /// Returns false as OrderItems should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderItems()
        {
            return _flagOrderItems;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets CustomEvent
        /// </summary>
        [DataMember(Name = "custom_event", EmitDefaultValue = true)]
        public LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomEvent CustomEvent
        {
            get{ return _CustomEvent;}
            set
            {
                _CustomEvent = value;
                _flagCustomEvent = true;
            }
        }
        private LoyaltiesEarningRulesGetResponseBodyLoyaltyCustomEvent _CustomEvent;
        private bool _flagCustomEvent;

        /// <summary>
        /// Returns false as CustomEvent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomEvent()
        {
            return _flagCustomEvent;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltiesEarningRulesGetResponseBodyLoyalty {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  CalculationType: ").Append(CalculationType).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  OrderItems: ").Append(OrderItems).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  CustomEvent: ").Append(CustomEvent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
