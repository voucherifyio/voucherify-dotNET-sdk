/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Stores a summary of redemptions that have been applied to the voucher.
    /// </summary>
    [DataContract(Name = "CampaignsVouchersCreateCombinedResponseBodyRedemption")]
    public partial class CampaignsVouchersCreateCombinedResponseBodyRedemption : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsVouchersCreateCombinedResponseBodyRedemption" /> class.
        /// </summary>
        /// <param name="quantity">How many times a voucher can be redeemed. A &#x60;null&#x60; value means unlimited..</param>
        /// <param name="redeemedQuantity">How many times a voucher has already been redeemed..</param>
        /// <param name="redeemedPoints">Total loyalty points redeemed..</param>
        /// <param name="varObject">The type of the object represented is by default &#x60;list&#x60;. To get this list, you need to make a call to the endpoint returned in the url attribute. (default to &quot;list&quot;).</param>
        /// <param name="url">The endpoint where this list of redemptions can be accessed using a **GET** method. &#x60;/v1/vouchers/{voucher_code}/redemptions&#x60;.</param>
        public CampaignsVouchersCreateCombinedResponseBodyRedemption(int? quantity = default(int?), int? redeemedQuantity = default(int?), int? redeemedPoints = default(int?), string varObject = @"list", string url = default(string))
        {
            this._Quantity = quantity;
            if (this.Quantity != null)
            {
                this._flagQuantity = true;
            }
            this._RedeemedQuantity = redeemedQuantity;
            if (this.RedeemedQuantity != null)
            {
                this._flagRedeemedQuantity = true;
            }
            this._RedeemedPoints = redeemedPoints;
            if (this.RedeemedPoints != null)
            {
                this._flagRedeemedPoints = true;
            }
            this._Url = url;
            if (this.Url != null)
            {
                this._flagUrl = true;
            }
        }

        /// <summary>
        /// How many times a voucher can be redeemed. A &#x60;null&#x60; value means unlimited.
        /// </summary>
        /// <value>How many times a voucher can be redeemed. A &#x60;null&#x60; value means unlimited.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public int? Quantity
        {
            get{ return _Quantity;}
            set
            {
                _Quantity = value;
                _flagQuantity = true;
            }
        }
        private int? _Quantity;
        private bool _flagQuantity;

        /// <summary>
        /// Returns false as Quantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantity()
        {
            return _flagQuantity;
        }
        /// <summary>
        /// How many times a voucher has already been redeemed.
        /// </summary>
        /// <value>How many times a voucher has already been redeemed.</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "redeemed_quantity", EmitDefaultValue = true)]
        public int? RedeemedQuantity
        {
            get{ return _RedeemedQuantity;}
            set
            {
                _RedeemedQuantity = value;
                _flagRedeemedQuantity = true;
            }
        }
        private int? _RedeemedQuantity;
        private bool _flagRedeemedQuantity;

        /// <summary>
        /// Returns false as RedeemedQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemedQuantity()
        {
            return _flagRedeemedQuantity;
        }
        /// <summary>
        /// Total loyalty points redeemed.
        /// </summary>
        /// <value>Total loyalty points redeemed.</value>
        /*
        <example>100000</example>
        */
        [DataMember(Name = "redeemed_points", EmitDefaultValue = true)]
        public int? RedeemedPoints
        {
            get{ return _RedeemedPoints;}
            set
            {
                _RedeemedPoints = value;
                _flagRedeemedPoints = true;
            }
        }
        private int? _RedeemedPoints;
        private bool _flagRedeemedPoints;

        /// <summary>
        /// Returns false as RedeemedPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemedPoints()
        {
            return _flagRedeemedPoints;
        }
        /// <summary>
        /// The type of the object represented is by default &#x60;list&#x60;. To get this list, you need to make a call to the endpoint returned in the url attribute.
        /// </summary>
        /// <value>The type of the object represented is by default &#x60;list&#x60;. To get this list, you need to make a call to the endpoint returned in the url attribute.</value>
        [DataMember(Name = "object", EmitDefaultValue = true)]
        public string Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private string _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// The endpoint where this list of redemptions can be accessed using a **GET** method. &#x60;/v1/vouchers/{voucher_code}/redemptions&#x60;
        /// </summary>
        /// <value>The endpoint where this list of redemptions can be accessed using a **GET** method. &#x60;/v1/vouchers/{voucher_code}/redemptions&#x60;</value>
        /*
        <example>/v1/vouchers/WVPblOYX/redemptions?page&#x3D;1&amp;limit&#x3D;10</example>
        */
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url
        {
            get{ return _Url;}
            set
            {
                _Url = value;
                _flagUrl = true;
            }
        }
        private string _Url;
        private bool _flagUrl;

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return _flagUrl;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignsVouchersCreateCombinedResponseBodyRedemption {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RedeemedQuantity: ").Append(RedeemedQuantity).Append("\n");
            sb.Append("  RedeemedPoints: ").Append(RedeemedPoints).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
