/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **POST** &#x60;v1/validations&#x60;.
    /// </summary>
    [DataContract(Name = "ClientValidationsValidateRequestBody")]
    public partial class ClientValidationsValidateRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientValidationsValidateRequestBody" /> class.
        /// </summary>
        /// <param name="options">options.</param>
        /// <param name="redeemables">redeemables.</param>
        /// <param name="order">order.</param>
        /// <param name="customer">customer.</param>
        /// <param name="session">session.</param>
        /// <param name="trackingId">Is correspondent to Customer&#39;s source_id.</param>
        /// <param name="metadata">A set of key/value pairs that you can attach to a redemption object. It can be useful for storing additional information about the redemption in a structured format..</param>
        public ClientValidationsValidateRequestBody(ClientValidationsValidateRequestBodyOptions options = default(ClientValidationsValidateRequestBodyOptions), List<ClientValidationsValidateRequestBodyRedeemablesItem> redeemables = default(List<ClientValidationsValidateRequestBodyRedeemablesItem>), Order order = default(Order), Customer customer = default(Customer), Session session = default(Session), string trackingId = default(string), Object metadata = default(Object))
        {
            this._Options = options;
            if (this.Options != null)
            {
                this._flagOptions = true;
            }
            this._Redeemables = redeemables;
            if (this.Redeemables != null)
            {
                this._flagRedeemables = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._Session = session;
            if (this.Session != null)
            {
                this._flagSession = true;
            }
            this._TrackingId = trackingId;
            if (this.TrackingId != null)
            {
                this._flagTrackingId = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
        }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = true)]
        public ClientValidationsValidateRequestBodyOptions Options
        {
            get{ return _Options;}
            set
            {
                _Options = value;
                _flagOptions = true;
            }
        }
        private ClientValidationsValidateRequestBodyOptions _Options;
        private bool _flagOptions;

        /// <summary>
        /// Returns false as Options should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptions()
        {
            return _flagOptions;
        }
        /// <summary>
        /// Gets or Sets Redeemables
        /// </summary>
        [DataMember(Name = "redeemables", EmitDefaultValue = true)]
        public List<ClientValidationsValidateRequestBodyRedeemablesItem> Redeemables
        {
            get{ return _Redeemables;}
            set
            {
                _Redeemables = value;
                _flagRedeemables = true;
            }
        }
        private List<ClientValidationsValidateRequestBodyRedeemablesItem> _Redeemables;
        private bool _flagRedeemables;

        /// <summary>
        /// Returns false as Redeemables should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemables()
        {
            return _flagRedeemables;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public Order Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private Order _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public Customer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private Customer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets Session
        /// </summary>
        [DataMember(Name = "session", EmitDefaultValue = true)]
        public Session Session
        {
            get{ return _Session;}
            set
            {
                _Session = value;
                _flagSession = true;
            }
        }
        private Session _Session;
        private bool _flagSession;

        /// <summary>
        /// Returns false as Session should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSession()
        {
            return _flagSession;
        }
        /// <summary>
        /// Is correspondent to Customer&#39;s source_id
        /// </summary>
        /// <value>Is correspondent to Customer&#39;s source_id</value>
        [DataMember(Name = "tracking_id", EmitDefaultValue = true)]
        public string TrackingId
        {
            get{ return _TrackingId;}
            set
            {
                _TrackingId = value;
                _flagTrackingId = true;
            }
        }
        private string _TrackingId;
        private bool _flagTrackingId;

        /// <summary>
        /// Returns false as TrackingId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTrackingId()
        {
            return _flagTrackingId;
        }
        /// <summary>
        /// A set of key/value pairs that you can attach to a redemption object. It can be useful for storing additional information about the redemption in a structured format.
        /// </summary>
        /// <value>A set of key/value pairs that you can attach to a redemption object. It can be useful for storing additional information about the redemption in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientValidationsValidateRequestBody {\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Redeemables: ").Append(Redeemables).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Session: ").Append(Session).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
