/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ProductCollectionsCreateRequestBody
    /// </summary>
    [DataContract(Name = "ProductCollectionsCreateRequestBody")]
    public partial class ProductCollectionsCreateRequestBody : IValidatableObject
    {
        /// <summary>
        /// Show that the product collection is static (manually selected products).
        /// </summary>
        /// <value>Show that the product collection is static (manually selected products).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum STATIC for value: STATIC
            /// </summary>
            [EnumMember(Value = "STATIC")]
            STATIC = 1
        }


        /// <summary>
        /// Show that the product collection is static (manually selected products).
        /// </summary>
        /// <value>Show that the product collection is static (manually selected products).</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductCollectionsCreateRequestBody" /> class.
        /// </summary>
        /// <param name="type">Show that the product collection is static (manually selected products)..</param>
        /// <param name="name">Unique user-defined product collection name..</param>
        /// <param name="products">Defines a set of products for a &#x60;STATIC&#x60; product collection type..</param>
        /// <param name="filter">Defines a set of criteria and boundary conditions for an &#x60;AUTO_UPDATE&#x60; product collection type..</param>
        public ProductCollectionsCreateRequestBody(TypeEnum? type = default(TypeEnum?), string name = default(string), List<ProductCollectionsCreateRequestBodyProductsItem> products = default(List<ProductCollectionsCreateRequestBodyProductsItem>), Object filter = default(Object))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Products = products;
            if (this.Products != null)
            {
                this._flagProducts = true;
            }
            this._Filter = filter;
            if (this.Filter != null)
            {
                this._flagFilter = true;
            }
        }

        /// <summary>
        /// Unique user-defined product collection name.
        /// </summary>
        /// <value>Unique user-defined product collection name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Defines a set of products for a &#x60;STATIC&#x60; product collection type.
        /// </summary>
        /// <value>Defines a set of products for a &#x60;STATIC&#x60; product collection type.</value>
        [DataMember(Name = "products", EmitDefaultValue = true)]
        public List<ProductCollectionsCreateRequestBodyProductsItem> Products
        {
            get{ return _Products;}
            set
            {
                _Products = value;
                _flagProducts = true;
            }
        }
        private List<ProductCollectionsCreateRequestBodyProductsItem> _Products;
        private bool _flagProducts;

        /// <summary>
        /// Returns false as Products should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProducts()
        {
            return _flagProducts;
        }
        /// <summary>
        /// Defines a set of criteria and boundary conditions for an &#x60;AUTO_UPDATE&#x60; product collection type.
        /// </summary>
        /// <value>Defines a set of criteria and boundary conditions for an &#x60;AUTO_UPDATE&#x60; product collection type.</value>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public Object Filter
        {
            get{ return _Filter;}
            set
            {
                _Filter = value;
                _flagFilter = true;
            }
        }
        private Object _Filter;
        private bool _flagFilter;

        /// <summary>
        /// Returns false as Filter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFilter()
        {
            return _flagFilter;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductCollectionsCreateRequestBody {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
