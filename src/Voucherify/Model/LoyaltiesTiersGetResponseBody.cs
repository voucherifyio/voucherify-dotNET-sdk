/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **GET** &#x60;v1/loyalties/{campaignId}/tiers/{loyaltyTierId}&#x60;.
    /// </summary>
    [DataContract(Name = "LoyaltiesTiersGetResponseBody")]
    public partial class LoyaltiesTiersGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the loyalty.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the loyalty.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum LoyaltyTier for value: loyalty_tier
            /// </summary>
            [EnumMember(Value = "loyalty_tier")]
            LoyaltyTier = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the loyalty.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the loyalty.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesTiersGetResponseBody" /> class.
        /// </summary>
        /// <param name="name">Loyalty Tier name..</param>
        /// <param name="earningRules">Contains a list of earning rule IDs and their points mapping for the given earning rule..</param>
        /// <param name="rewards">Contains a list of reward IDs and their points mapping for the given reward..</param>
        /// <param name="points">points.</param>
        /// <param name="id">Unique loyalty tier ID..</param>
        /// <param name="campaignId">Unique parent campaign ID..</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the loyalty tier was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the loyalty tier was updated. The value is shown in the ISO 8601 format..</param>
        /// <param name="config">config.</param>
        /// <param name="expiration">expiration.</param>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about the loyalty..</param>
        public LoyaltiesTiersGetResponseBody(string name = default(string), Dictionary<string, MappingPoints> earningRules = default(Dictionary<string, MappingPoints>), Dictionary<string, MappingPoints> rewards = default(Dictionary<string, MappingPoints>), LoyaltiesTiersGetResponseBodyPoints points = default(LoyaltiesTiersGetResponseBodyPoints), string id = default(string), string campaignId = default(string), Object metadata = default(Object), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), LoyaltiesTiersGetResponseBodyConfig config = default(LoyaltiesTiersGetResponseBodyConfig), LoyaltyTierExpiration expiration = default(LoyaltyTierExpiration), ObjectEnum? varObject = default(ObjectEnum?))
        {
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._EarningRules = earningRules;
            if (this.EarningRules != null)
            {
                this._flagEarningRules = true;
            }
            this._Rewards = rewards;
            if (this.Rewards != null)
            {
                this._flagRewards = true;
            }
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._CampaignId = campaignId;
            if (this.CampaignId != null)
            {
                this._flagCampaignId = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._Config = config;
            if (this.Config != null)
            {
                this._flagConfig = true;
            }
            this._Expiration = expiration;
            if (this.Expiration != null)
            {
                this._flagExpiration = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
        }

        /// <summary>
        /// Loyalty Tier name.
        /// </summary>
        /// <value>Loyalty Tier name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Contains a list of earning rule IDs and their points mapping for the given earning rule.
        /// </summary>
        /// <value>Contains a list of earning rule IDs and their points mapping for the given earning rule.</value>
        [DataMember(Name = "earning_rules", EmitDefaultValue = true)]
        public Dictionary<string, MappingPoints> EarningRules
        {
            get{ return _EarningRules;}
            set
            {
                _EarningRules = value;
                _flagEarningRules = true;
            }
        }
        private Dictionary<string, MappingPoints> _EarningRules;
        private bool _flagEarningRules;

        /// <summary>
        /// Returns false as EarningRules should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEarningRules()
        {
            return _flagEarningRules;
        }
        /// <summary>
        /// Contains a list of reward IDs and their points mapping for the given reward.
        /// </summary>
        /// <value>Contains a list of reward IDs and their points mapping for the given reward.</value>
        [DataMember(Name = "rewards", EmitDefaultValue = true)]
        public Dictionary<string, MappingPoints> Rewards
        {
            get{ return _Rewards;}
            set
            {
                _Rewards = value;
                _flagRewards = true;
            }
        }
        private Dictionary<string, MappingPoints> _Rewards;
        private bool _flagRewards;

        /// <summary>
        /// Returns false as Rewards should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRewards()
        {
            return _flagRewards;
        }
        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public LoyaltiesTiersGetResponseBodyPoints Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private LoyaltiesTiersGetResponseBodyPoints _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Unique loyalty tier ID.
        /// </summary>
        /// <value>Unique loyalty tier ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Unique parent campaign ID.
        /// </summary>
        /// <value>Unique parent campaign ID.</value>
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId
        {
            get{ return _CampaignId;}
            set
            {
                _CampaignId = value;
                _flagCampaignId = true;
            }
        }
        private string _CampaignId;
        private bool _flagCampaignId;

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return _flagCampaignId;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the loyalty tier. A set of key/value pairs that you can attach to a loyalty tier object. It can be useful for storing additional information about the loyalty tier in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Timestamp representing the date and time when the loyalty tier was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the loyalty tier was created. The value is shown in the ISO 8601 format.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the loyalty tier was updated. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the loyalty tier was updated. The value is shown in the ISO 8601 format.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Gets or Sets Config
        /// </summary>
        [DataMember(Name = "config", EmitDefaultValue = true)]
        public LoyaltiesTiersGetResponseBodyConfig Config
        {
            get{ return _Config;}
            set
            {
                _Config = value;
                _flagConfig = true;
            }
        }
        private LoyaltiesTiersGetResponseBodyConfig _Config;
        private bool _flagConfig;

        /// <summary>
        /// Returns false as Config should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConfig()
        {
            return _flagConfig;
        }
        /// <summary>
        /// Gets or Sets Expiration
        /// </summary>
        [DataMember(Name = "expiration", EmitDefaultValue = true)]
        public LoyaltyTierExpiration Expiration
        {
            get{ return _Expiration;}
            set
            {
                _Expiration = value;
                _flagExpiration = true;
            }
        }
        private LoyaltyTierExpiration _Expiration;
        private bool _flagExpiration;

        /// <summary>
        /// Returns false as Expiration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpiration()
        {
            return _flagExpiration;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltiesTiersGetResponseBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EarningRules: ").Append(EarningRules).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Expiration: ").Append(Expiration).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
