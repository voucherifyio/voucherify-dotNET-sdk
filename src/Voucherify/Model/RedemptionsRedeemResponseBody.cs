/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **POST** &#x60;v1/redemptions&#x60;.
    /// </summary>
    [DataContract(Name = "RedemptionsRedeemResponseBody")]
    public partial class RedemptionsRedeemResponseBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsRedeemResponseBody" /> class.
        /// </summary>
        /// <param name="redemptions">redemptions.</param>
        /// <param name="parentRedemption">parentRedemption.</param>
        /// <param name="order">order.</param>
        /// <param name="inapplicableRedeemables">Lists validation results of each inapplicable redeemable..</param>
        /// <param name="skippedRedeemables">Lists validation results of each redeemable. If a redeemable can be applied, the API returns &#x60;\&quot;status\&quot;: \&quot;APPLICABLE\&quot;&#x60;..</param>
        public RedemptionsRedeemResponseBody(List<Redemption> redemptions = default(List<Redemption>), Redemption parentRedemption = default(Redemption), RedemptionsRedeemResponseBodyOrder order = default(RedemptionsRedeemResponseBodyOrder), List<ValidationsRedeemableInapplicable> inapplicableRedeemables = default(List<ValidationsRedeemableInapplicable>), List<ValidationsRedeemableSkipped> skippedRedeemables = default(List<ValidationsRedeemableSkipped>))
        {
            this._Redemptions = redemptions;
            if (this.Redemptions != null)
            {
                this._flagRedemptions = true;
            }
            this._ParentRedemption = parentRedemption;
            if (this.ParentRedemption != null)
            {
                this._flagParentRedemption = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._InapplicableRedeemables = inapplicableRedeemables;
            if (this.InapplicableRedeemables != null)
            {
                this._flagInapplicableRedeemables = true;
            }
            this._SkippedRedeemables = skippedRedeemables;
            if (this.SkippedRedeemables != null)
            {
                this._flagSkippedRedeemables = true;
            }
        }

        /// <summary>
        /// Gets or Sets Redemptions
        /// </summary>
        [DataMember(Name = "redemptions", EmitDefaultValue = true)]
        public List<Redemption> Redemptions
        {
            get{ return _Redemptions;}
            set
            {
                _Redemptions = value;
                _flagRedemptions = true;
            }
        }
        private List<Redemption> _Redemptions;
        private bool _flagRedemptions;

        /// <summary>
        /// Returns false as Redemptions should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemptions()
        {
            return _flagRedemptions;
        }
        /// <summary>
        /// Gets or Sets ParentRedemption
        /// </summary>
        [DataMember(Name = "parent_redemption", EmitDefaultValue = true)]
        public Redemption ParentRedemption
        {
            get{ return _ParentRedemption;}
            set
            {
                _ParentRedemption = value;
                _flagParentRedemption = true;
            }
        }
        private Redemption _ParentRedemption;
        private bool _flagParentRedemption;

        /// <summary>
        /// Returns false as ParentRedemption should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParentRedemption()
        {
            return _flagParentRedemption;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public RedemptionsRedeemResponseBodyOrder Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private RedemptionsRedeemResponseBodyOrder _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Lists validation results of each inapplicable redeemable.
        /// </summary>
        /// <value>Lists validation results of each inapplicable redeemable.</value>
        [DataMember(Name = "inapplicable_redeemables", EmitDefaultValue = true)]
        public List<ValidationsRedeemableInapplicable> InapplicableRedeemables
        {
            get{ return _InapplicableRedeemables;}
            set
            {
                _InapplicableRedeemables = value;
                _flagInapplicableRedeemables = true;
            }
        }
        private List<ValidationsRedeemableInapplicable> _InapplicableRedeemables;
        private bool _flagInapplicableRedeemables;

        /// <summary>
        /// Returns false as InapplicableRedeemables should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInapplicableRedeemables()
        {
            return _flagInapplicableRedeemables;
        }
        /// <summary>
        /// Lists validation results of each redeemable. If a redeemable can be applied, the API returns &#x60;\&quot;status\&quot;: \&quot;APPLICABLE\&quot;&#x60;.
        /// </summary>
        /// <value>Lists validation results of each redeemable. If a redeemable can be applied, the API returns &#x60;\&quot;status\&quot;: \&quot;APPLICABLE\&quot;&#x60;.</value>
        [DataMember(Name = "skipped_redeemables", EmitDefaultValue = true)]
        public List<ValidationsRedeemableSkipped> SkippedRedeemables
        {
            get{ return _SkippedRedeemables;}
            set
            {
                _SkippedRedeemables = value;
                _flagSkippedRedeemables = true;
            }
        }
        private List<ValidationsRedeemableSkipped> _SkippedRedeemables;
        private bool _flagSkippedRedeemables;

        /// <summary>
        /// Returns false as SkippedRedeemables should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSkippedRedeemables()
        {
            return _flagSkippedRedeemables;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RedemptionsRedeemResponseBody {\n");
            sb.Append("  Redemptions: ").Append(Redemptions).Append("\n");
            sb.Append("  ParentRedemption: ").Append(ParentRedemption).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  InapplicableRedeemables: ").Append(InapplicableRedeemables).Append("\n");
            sb.Append("  SkippedRedeemables: ").Append(SkippedRedeemables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
