/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request body schema for **POST** &#x60;v1/campaigns/{campaignId}/vouchers&#x60;.
    /// </summary>
    [DataContract(Name = "CampaignsVouchersCreateInBulkRequestBody")]
    public partial class CampaignsVouchersCreateInBulkRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsVouchersCreateInBulkRequestBody" /> class.
        /// </summary>
        /// <param name="code">Unique voucher code..</param>
        /// <param name="codeConfig">codeConfig.</param>
        /// <param name="category">The category assigned to the campaign. Either pass this parameter OR the &#x60;category_id&#x60;..</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format..</param>
        /// <param name="redemption">redemption.</param>
        /// <param name="additionalInfo">An optional field to keep any extra textual information about the code such as a code description and details..</param>
        /// <param name="startDate">Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. .</param>
        /// <param name="expirationDate">Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date..</param>
        public CampaignsVouchersCreateInBulkRequestBody(string code = default(string), CodeConfig codeConfig = default(CodeConfig), string category = default(string), Object metadata = default(Object), CampaignsVouchersCreateInBulkRequestBodyRedemption redemption = default(CampaignsVouchersCreateInBulkRequestBodyRedemption), string additionalInfo = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? expirationDate = default(DateTimeOffset?))
        {
            this._Code = code;
            if (this.Code != null)
            {
                this._flagCode = true;
            }
            this._CodeConfig = codeConfig;
            if (this.CodeConfig != null)
            {
                this._flagCodeConfig = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._Redemption = redemption;
            if (this.Redemption != null)
            {
                this._flagRedemption = true;
            }
            this._AdditionalInfo = additionalInfo;
            if (this.AdditionalInfo != null)
            {
                this._flagAdditionalInfo = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
        }

        /// <summary>
        /// Unique voucher code.
        /// </summary>
        /// <value>Unique voucher code.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get{ return _Code;}
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }
        private string _Code;
        private bool _flagCode;

        /// <summary>
        /// Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }
        /// <summary>
        /// Gets or Sets CodeConfig
        /// </summary>
        [DataMember(Name = "code_config", EmitDefaultValue = true)]
        public CodeConfig CodeConfig
        {
            get{ return _CodeConfig;}
            set
            {
                _CodeConfig = value;
                _flagCodeConfig = true;
            }
        }
        private CodeConfig _CodeConfig;
        private bool _flagCodeConfig;

        /// <summary>
        /// Returns false as CodeConfig should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCodeConfig()
        {
            return _flagCodeConfig;
        }
        /// <summary>
        /// The category assigned to the campaign. Either pass this parameter OR the &#x60;category_id&#x60;.
        /// </summary>
        /// <value>The category assigned to the campaign. Either pass this parameter OR the &#x60;category_id&#x60;.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get{ return _Category;}
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Gets or Sets Redemption
        /// </summary>
        [DataMember(Name = "redemption", EmitDefaultValue = true)]
        public CampaignsVouchersCreateInBulkRequestBodyRedemption Redemption
        {
            get{ return _Redemption;}
            set
            {
                _Redemption = value;
                _flagRedemption = true;
            }
        }
        private CampaignsVouchersCreateInBulkRequestBodyRedemption _Redemption;
        private bool _flagRedemption;

        /// <summary>
        /// Returns false as Redemption should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemption()
        {
            return _flagRedemption;
        }
        /// <summary>
        /// An optional field to keep any extra textual information about the code such as a code description and details.
        /// </summary>
        /// <value>An optional field to keep any extra textual information about the code such as a code description and details.</value>
        [DataMember(Name = "additional_info", EmitDefaultValue = true)]
        public string AdditionalInfo
        {
            get{ return _AdditionalInfo;}
            set
            {
                _AdditionalInfo = value;
                _flagAdditionalInfo = true;
            }
        }
        private string _AdditionalInfo;
        private bool _flagAdditionalInfo;

        /// <summary>
        /// Returns false as AdditionalInfo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAdditionalInfo()
        {
            return _flagAdditionalInfo;
        }
        /// <summary>
        /// Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. 
        /// </summary>
        /// <value>Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. </value>
        /*
        <example>2022-09-20T00:00Z</example>
        */
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTimeOffset? StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private DateTimeOffset? _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date.
        /// </summary>
        /// <value>Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date.</value>
        /*
        <example>2022-09-30T00:00Z</example>
        */
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignsVouchersCreateInBulkRequestBody {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CodeConfig: ").Append(CodeConfig).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Redemption: ").Append(Redemption).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
