/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Simplified campaign data.
    /// </summary>
    [DataContract(Name = "SimpleCampaign")]
    public partial class SimpleCampaign : IValidatableObject
    {
        /// <summary>
        /// Defines whether the campaign can be updated with new vouchers after campaign creation or if the campaign consists of standalone vouchers.  - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria -  &#x60;STATIC&#x60;: vouchers need to be manually published - &#x60;STANDALONE&#x60;: campaign for single vouchers
        /// </summary>
        /// <value>Defines whether the campaign can be updated with new vouchers after campaign creation or if the campaign consists of standalone vouchers.  - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria -  &#x60;STATIC&#x60;: vouchers need to be manually published - &#x60;STANDALONE&#x60;: campaign for single vouchers</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AUTOUPDATE for value: AUTO_UPDATE
            /// </summary>
            [EnumMember(Value = "AUTO_UPDATE")]
            AUTOUPDATE = 1,

            /// <summary>
            /// Enum STATIC for value: STATIC
            /// </summary>
            [EnumMember(Value = "STATIC")]
            STATIC = 2,

            /// <summary>
            /// Enum STANDALONE for value: STANDALONE
            /// </summary>
            [EnumMember(Value = "STANDALONE")]
            STANDALONE = 3
        }


        /// <summary>
        /// Defines whether the campaign can be updated with new vouchers after campaign creation or if the campaign consists of standalone vouchers.  - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria -  &#x60;STATIC&#x60;: vouchers need to be manually published - &#x60;STANDALONE&#x60;: campaign for single vouchers
        /// </summary>
        /// <value>Defines whether the campaign can be updated with new vouchers after campaign creation or if the campaign consists of standalone vouchers.  - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria -  &#x60;STATIC&#x60;: vouchers need to be manually published - &#x60;STANDALONE&#x60;: campaign for single vouchers</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the campaign.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the campaign.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Campaign for value: campaign
            /// </summary>
            [EnumMember(Value = "campaign")]
            Campaign = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the campaign.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the campaign.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleCampaign" /> class.
        /// </summary>
        /// <param name="id">Campaign ID..</param>
        /// <param name="name">Campaign name..</param>
        /// <param name="campaignType">Type of campaign..</param>
        /// <param name="type">Defines whether the campaign can be updated with new vouchers after campaign creation or if the campaign consists of standalone vouchers.  - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria -  &#x60;STATIC&#x60;: vouchers need to be manually published - &#x60;STANDALONE&#x60;: campaign for single vouchers.</param>
        /// <param name="isReferralCode">Flag indicating whether this voucher is a referral code; &#x60;true&#x60; for campaign type &#x60;REFERRAL_PROGRAM&#x60;..</param>
        /// <param name="voucher">voucher.</param>
        /// <param name="referralProgram">referralProgram.</param>
        /// <param name="autoJoin">Indicates whether customers will be able to auto-join the campaign if any earning rule is fulfilled..</param>
        /// <param name="joinOnce">If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once. It is always &#x60;false&#x60; for standalone voucher campaigns and it cannot be changed in them..</param>
        /// <param name="active">Indicates whether the campaign is active..</param>
        /// <param name="categoryId">The unique category ID that this campaign belongs to..</param>
        /// <param name="category">Unique category name..</param>
        /// <param name="categories">Contains details about the category..</param>
        /// <param name="metadata">A set of custom key/value pairs that you can attach to a campaign. The metadata object stores all custom attributes assigned to the campaign..</param>
        /// <param name="startDate">Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is inactive *before* this date. .</param>
        /// <param name="expirationDate">Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is inactive *after* this date..</param>
        /// <param name="description">An optional field to keep extra textual information about the campaign such as a campaign description and details..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the campaign was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the campaign was updated in the ISO 8601 format..</param>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about the campaign..</param>
        public SimpleCampaign(string id = default(string), string name = default(string), string campaignType = default(string), TypeEnum? type = default(TypeEnum?), bool? isReferralCode = default(bool?), SimpleCampaignVoucher voucher = default(SimpleCampaignVoucher), ReferralProgram referralProgram = default(ReferralProgram), bool? autoJoin = default(bool?), bool? joinOnce = default(bool?), bool? active = default(bool?), string categoryId = default(string), string category = default(string), List<Category> categories = default(List<Category>), Object metadata = default(Object), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? expirationDate = default(DateTimeOffset?), string description = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), ObjectEnum? varObject = default(ObjectEnum?))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._CampaignType = campaignType;
            if (this.CampaignType != null)
            {
                this._flagCampaignType = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._IsReferralCode = isReferralCode;
            if (this.IsReferralCode != null)
            {
                this._flagIsReferralCode = true;
            }
            this._Voucher = voucher;
            if (this.Voucher != null)
            {
                this._flagVoucher = true;
            }
            this._ReferralProgram = referralProgram;
            if (this.ReferralProgram != null)
            {
                this._flagReferralProgram = true;
            }
            this._AutoJoin = autoJoin;
            if (this.AutoJoin != null)
            {
                this._flagAutoJoin = true;
            }
            this._JoinOnce = joinOnce;
            if (this.JoinOnce != null)
            {
                this._flagJoinOnce = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._CategoryId = categoryId;
            if (this.CategoryId != null)
            {
                this._flagCategoryId = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._Categories = categories;
            if (this.Categories != null)
            {
                this._flagCategories = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
        }

        /// <summary>
        /// Campaign ID.
        /// </summary>
        /// <value>Campaign ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Campaign name.
        /// </summary>
        /// <value>Campaign name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Type of campaign.
        /// </summary>
        /// <value>Type of campaign.</value>
        [DataMember(Name = "campaign_type", EmitDefaultValue = true)]
        public string CampaignType
        {
            get{ return _CampaignType;}
            set
            {
                _CampaignType = value;
                _flagCampaignType = true;
            }
        }
        private string _CampaignType;
        private bool _flagCampaignType;

        /// <summary>
        /// Returns false as CampaignType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignType()
        {
            return _flagCampaignType;
        }
        /// <summary>
        /// Flag indicating whether this voucher is a referral code; &#x60;true&#x60; for campaign type &#x60;REFERRAL_PROGRAM&#x60;.
        /// </summary>
        /// <value>Flag indicating whether this voucher is a referral code; &#x60;true&#x60; for campaign type &#x60;REFERRAL_PROGRAM&#x60;.</value>
        [DataMember(Name = "is_referral_code", EmitDefaultValue = true)]
        public bool? IsReferralCode
        {
            get{ return _IsReferralCode;}
            set
            {
                _IsReferralCode = value;
                _flagIsReferralCode = true;
            }
        }
        private bool? _IsReferralCode;
        private bool _flagIsReferralCode;

        /// <summary>
        /// Returns false as IsReferralCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsReferralCode()
        {
            return _flagIsReferralCode;
        }
        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", EmitDefaultValue = true)]
        public SimpleCampaignVoucher Voucher
        {
            get{ return _Voucher;}
            set
            {
                _Voucher = value;
                _flagVoucher = true;
            }
        }
        private SimpleCampaignVoucher _Voucher;
        private bool _flagVoucher;

        /// <summary>
        /// Returns false as Voucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucher()
        {
            return _flagVoucher;
        }
        /// <summary>
        /// Gets or Sets ReferralProgram
        /// </summary>
        [DataMember(Name = "referral_program", EmitDefaultValue = true)]
        public ReferralProgram ReferralProgram
        {
            get{ return _ReferralProgram;}
            set
            {
                _ReferralProgram = value;
                _flagReferralProgram = true;
            }
        }
        private ReferralProgram _ReferralProgram;
        private bool _flagReferralProgram;

        /// <summary>
        /// Returns false as ReferralProgram should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferralProgram()
        {
            return _flagReferralProgram;
        }
        /// <summary>
        /// Indicates whether customers will be able to auto-join the campaign if any earning rule is fulfilled.
        /// </summary>
        /// <value>Indicates whether customers will be able to auto-join the campaign if any earning rule is fulfilled.</value>
        [DataMember(Name = "auto_join", EmitDefaultValue = true)]
        public bool? AutoJoin
        {
            get{ return _AutoJoin;}
            set
            {
                _AutoJoin = value;
                _flagAutoJoin = true;
            }
        }
        private bool? _AutoJoin;
        private bool _flagAutoJoin;

        /// <summary>
        /// Returns false as AutoJoin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAutoJoin()
        {
            return _flagAutoJoin;
        }
        /// <summary>
        /// If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once. It is always &#x60;false&#x60; for standalone voucher campaigns and it cannot be changed in them.
        /// </summary>
        /// <value>If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once. It is always &#x60;false&#x60; for standalone voucher campaigns and it cannot be changed in them.</value>
        [DataMember(Name = "join_once", EmitDefaultValue = true)]
        public bool? JoinOnce
        {
            get{ return _JoinOnce;}
            set
            {
                _JoinOnce = value;
                _flagJoinOnce = true;
            }
        }
        private bool? _JoinOnce;
        private bool _flagJoinOnce;

        /// <summary>
        /// Returns false as JoinOnce should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJoinOnce()
        {
            return _flagJoinOnce;
        }
        /// <summary>
        /// Indicates whether the campaign is active.
        /// </summary>
        /// <value>Indicates whether the campaign is active.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool? _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// The unique category ID that this campaign belongs to.
        /// </summary>
        /// <value>The unique category ID that this campaign belongs to.</value>
        [DataMember(Name = "category_id", EmitDefaultValue = true)]
        public string CategoryId
        {
            get{ return _CategoryId;}
            set
            {
                _CategoryId = value;
                _flagCategoryId = true;
            }
        }
        private string _CategoryId;
        private bool _flagCategoryId;

        /// <summary>
        /// Returns false as CategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryId()
        {
            return _flagCategoryId;
        }
        /// <summary>
        /// Unique category name.
        /// </summary>
        /// <value>Unique category name.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get{ return _Category;}
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// Contains details about the category.
        /// </summary>
        /// <value>Contains details about the category.</value>
        [DataMember(Name = "categories", EmitDefaultValue = true)]
        public List<Category> Categories
        {
            get{ return _Categories;}
            set
            {
                _Categories = value;
                _flagCategories = true;
            }
        }
        private List<Category> _Categories;
        private bool _flagCategories;

        /// <summary>
        /// Returns false as Categories should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategories()
        {
            return _flagCategories;
        }
        /// <summary>
        /// A set of custom key/value pairs that you can attach to a campaign. The metadata object stores all custom attributes assigned to the campaign.
        /// </summary>
        /// <value>A set of custom key/value pairs that you can attach to a campaign. The metadata object stores all custom attributes assigned to the campaign.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is inactive *before* this date. 
        /// </summary>
        /// <value>Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is inactive *before* this date. </value>
        /*
        <example>2022-09-20T00:00Z</example>
        */
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTimeOffset? StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private DateTimeOffset? _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is inactive *after* this date.
        /// </summary>
        /// <value>Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is inactive *after* this date.</value>
        /*
        <example>2022-09-30T00:00Z</example>
        */
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// An optional field to keep extra textual information about the campaign such as a campaign description and details.
        /// </summary>
        /// <value>An optional field to keep extra textual information about the campaign such as a campaign description and details.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Timestamp representing the date and time when the campaign was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the campaign was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2024-01-01T11:11:11.111Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the campaign was updated in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the campaign was updated in the ISO 8601 format.</value>
        /*
        <example>2024-01-01T11:11:11.111Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SimpleCampaign {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CampaignType: ").Append(CampaignType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsReferralCode: ").Append(IsReferralCode).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  ReferralProgram: ").Append(ReferralProgram).Append("\n");
            sb.Append("  AutoJoin: ").Append(AutoJoin).Append("\n");
            sb.Append("  JoinOnce: ").Append(JoinOnce).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
