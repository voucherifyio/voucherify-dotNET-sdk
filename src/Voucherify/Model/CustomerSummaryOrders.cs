/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// CustomerSummaryOrders
    /// </summary>
    [DataContract(Name = "CustomerSummaryOrders")]
    public partial class CustomerSummaryOrders : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerSummaryOrders" /> class.
        /// </summary>
        /// <param name="totalAmount">The total amount spent by the customer. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="totalCount">Total number of orders made by the customer..</param>
        /// <param name="averageAmount">Average amount spent on orders. &#x60;total_amount&#x60; &amp;divide; &#x60;total_count&#x60;. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="lastOrderAmount">Amount spent on last order. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="lastOrderDate">Timestamp representing the date and time of the customer&#39;s last order in ISO 8601 format..</param>
        public CustomerSummaryOrders(int? totalAmount = default(int?), int? totalCount = default(int?), int? averageAmount = default(int?), int? lastOrderAmount = default(int?), DateTimeOffset? lastOrderDate = default(DateTimeOffset?))
        {
            this._TotalAmount = totalAmount;
            if (this.TotalAmount != null)
            {
                this._flagTotalAmount = true;
            }
            this._TotalCount = totalCount;
            if (this.TotalCount != null)
            {
                this._flagTotalCount = true;
            }
            this._AverageAmount = averageAmount;
            if (this.AverageAmount != null)
            {
                this._flagAverageAmount = true;
            }
            this._LastOrderAmount = lastOrderAmount;
            if (this.LastOrderAmount != null)
            {
                this._flagLastOrderAmount = true;
            }
            this._LastOrderDate = lastOrderDate;
            if (this.LastOrderDate != null)
            {
                this._flagLastOrderDate = true;
            }
        }

        /// <summary>
        /// The total amount spent by the customer. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>The total amount spent by the customer. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "total_amount", EmitDefaultValue = true)]
        public int? TotalAmount
        {
            get{ return _TotalAmount;}
            set
            {
                _TotalAmount = value;
                _flagTotalAmount = true;
            }
        }
        private int? _TotalAmount;
        private bool _flagTotalAmount;

        /// <summary>
        /// Returns false as TotalAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalAmount()
        {
            return _flagTotalAmount;
        }
        /// <summary>
        /// Total number of orders made by the customer.
        /// </summary>
        /// <value>Total number of orders made by the customer.</value>
        [DataMember(Name = "total_count", EmitDefaultValue = true)]
        public int? TotalCount
        {
            get{ return _TotalCount;}
            set
            {
                _TotalCount = value;
                _flagTotalCount = true;
            }
        }
        private int? _TotalCount;
        private bool _flagTotalCount;

        /// <summary>
        /// Returns false as TotalCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalCount()
        {
            return _flagTotalCount;
        }
        /// <summary>
        /// Average amount spent on orders. &#x60;total_amount&#x60; &amp;divide; &#x60;total_count&#x60;. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Average amount spent on orders. &#x60;total_amount&#x60; &amp;divide; &#x60;total_count&#x60;. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "average_amount", EmitDefaultValue = true)]
        public int? AverageAmount
        {
            get{ return _AverageAmount;}
            set
            {
                _AverageAmount = value;
                _flagAverageAmount = true;
            }
        }
        private int? _AverageAmount;
        private bool _flagAverageAmount;

        /// <summary>
        /// Returns false as AverageAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAverageAmount()
        {
            return _flagAverageAmount;
        }
        /// <summary>
        /// Amount spent on last order. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Amount spent on last order. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "last_order_amount", EmitDefaultValue = true)]
        public int? LastOrderAmount
        {
            get{ return _LastOrderAmount;}
            set
            {
                _LastOrderAmount = value;
                _flagLastOrderAmount = true;
            }
        }
        private int? _LastOrderAmount;
        private bool _flagLastOrderAmount;

        /// <summary>
        /// Returns false as LastOrderAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastOrderAmount()
        {
            return _flagLastOrderAmount;
        }
        /// <summary>
        /// Timestamp representing the date and time of the customer&#39;s last order in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time of the customer&#39;s last order in ISO 8601 format.</value>
        /*
        <example>2022-08-30T11:51:08.029Z</example>
        */
        [DataMember(Name = "last_order_date", EmitDefaultValue = true)]
        public DateTimeOffset? LastOrderDate
        {
            get{ return _LastOrderDate;}
            set
            {
                _LastOrderDate = value;
                _flagLastOrderDate = true;
            }
        }
        private DateTimeOffset? _LastOrderDate;
        private bool _flagLastOrderDate;

        /// <summary>
        /// Returns false as LastOrderDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastOrderDate()
        {
            return _flagLastOrderDate;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerSummaryOrders {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  AverageAmount: ").Append(AverageAmount).Append("\n");
            sb.Append("  LastOrderAmount: ").Append(LastOrderAmount).Append("\n");
            sb.Append("  LastOrderDate: ").Append(LastOrderDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
