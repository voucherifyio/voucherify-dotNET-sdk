/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request body schema for **POST** &#x60;v1/orders&#x60;.
    /// </summary>
    [DataContract(Name = "OrdersCreateRequestBody")]
    public partial class OrdersCreateRequestBody : IValidatableObject
    {
        /// <summary>
        /// The order status.
        /// </summary>
        /// <value>The order status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum CREATED for value: CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATED = 1,

            /// <summary>
            /// Enum PAID for value: PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAID = 2,

            /// <summary>
            /// Enum CANCELED for value: CANCELED
            /// </summary>
            [EnumMember(Value = "CANCELED")]
            CANCELED = 3,

            /// <summary>
            /// Enum FULFILLED for value: FULFILLED
            /// </summary>
            [EnumMember(Value = "FULFILLED")]
            FULFILLED = 4
        }


        /// <summary>
        /// The order status.
        /// </summary>
        /// <value>The order status.</value>

        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private StatusEnum? _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="OrdersCreateRequestBody" /> class.
        /// </summary>
        /// <param name="id">Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request..</param>
        /// <param name="sourceId">Unique source ID of an existing order that will be linked to the redemption of this request..</param>
        /// <param name="status">The order status..</param>
        /// <param name="amount">A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts..</param>
        /// <param name="initialAmount">A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts..</param>
        /// <param name="discountAmount">Sum of all order-level discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00)..</param>
        /// <param name="items">Array of items applied to the order. It can include up to 500 items..</param>
        /// <param name="metadata">A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format. It can be used to define business validation rules or discount formulas..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the order was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="referrerId">Unique referrer ID..</param>
        /// <param name="customer">customer.</param>
        /// <param name="referrer">referrer.</param>
        public OrdersCreateRequestBody(string id = default(string), string sourceId = default(string), StatusEnum? status = default(StatusEnum?), int? amount = default(int?), int? initialAmount = default(int?), int? discountAmount = default(int?), List<OrderItem> items = default(List<OrderItem>), Object metadata = default(Object), DateTimeOffset? createdAt = default(DateTimeOffset?), string referrerId = default(string), Customer customer = default(Customer), Referrer referrer = default(Referrer))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._SourceId = sourceId;
            if (this.SourceId != null)
            {
                this._flagSourceId = true;
            }
            this._Status = status;
            if (this.Status != null)
            {
                this._flagStatus = true;
            }
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
            this._InitialAmount = initialAmount;
            if (this.InitialAmount != null)
            {
                this._flagInitialAmount = true;
            }
            this._DiscountAmount = discountAmount;
            if (this.DiscountAmount != null)
            {
                this._flagDiscountAmount = true;
            }
            this._Items = items;
            if (this.Items != null)
            {
                this._flagItems = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._ReferrerId = referrerId;
            if (this.ReferrerId != null)
            {
                this._flagReferrerId = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._Referrer = referrer;
            if (this.Referrer != null)
            {
                this._flagReferrer = true;
            }
        }

        /// <summary>
        /// Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request.
        /// </summary>
        /// <value>Unique ID assigned by Voucherify of an existing order that will be linked to the redemption of this request.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Unique source ID of an existing order that will be linked to the redemption of this request.
        /// </summary>
        /// <value>Unique source ID of an existing order that will be linked to the redemption of this request.</value>
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId
        {
            get{ return _SourceId;}
            set
            {
                _SourceId = value;
                _flagSourceId = true;
            }
        }
        private string _SourceId;
        private bool _flagSourceId;

        /// <summary>
        /// Returns false as SourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceId()
        {
            return _flagSourceId;
        }
        /// <summary>
        /// A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts.
        /// </summary>
        /// <value>A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public int? Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private int? _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts.
        /// </summary>
        /// <value>A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts.</value>
        [DataMember(Name = "initial_amount", EmitDefaultValue = true)]
        public int? InitialAmount
        {
            get{ return _InitialAmount;}
            set
            {
                _InitialAmount = value;
                _flagInitialAmount = true;
            }
        }
        private int? _InitialAmount;
        private bool _flagInitialAmount;

        /// <summary>
        /// Returns false as InitialAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInitialAmount()
        {
            return _flagInitialAmount;
        }
        /// <summary>
        /// Sum of all order-level discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).
        /// </summary>
        /// <value>Sum of all order-level discounts applied to the order. It is expressed as an integer in the smallest currency unit (e.g. 100 cents for $1.00).</value>
        [DataMember(Name = "discount_amount", EmitDefaultValue = true)]
        public int? DiscountAmount
        {
            get{ return _DiscountAmount;}
            set
            {
                _DiscountAmount = value;
                _flagDiscountAmount = true;
            }
        }
        private int? _DiscountAmount;
        private bool _flagDiscountAmount;

        /// <summary>
        /// Returns false as DiscountAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscountAmount()
        {
            return _flagDiscountAmount;
        }
        /// <summary>
        /// Array of items applied to the order. It can include up to 500 items.
        /// </summary>
        /// <value>Array of items applied to the order. It can include up to 500 items.</value>
        [DataMember(Name = "items", EmitDefaultValue = true)]
        public List<OrderItem> Items
        {
            get{ return _Items;}
            set
            {
                _Items = value;
                _flagItems = true;
            }
        }
        private List<OrderItem> _Items;
        private bool _flagItems;

        /// <summary>
        /// Returns false as Items should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItems()
        {
            return _flagItems;
        }
        /// <summary>
        /// A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format. It can be used to define business validation rules or discount formulas.
        /// </summary>
        /// <value>A set of custom key/value pairs that you can attach to an order. It can be useful for storing additional information about the order in a structured format. It can be used to define business validation rules or discount formulas.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Timestamp representing the date and time when the order was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the order was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-22T10:13:06.487Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Unique referrer ID.
        /// </summary>
        /// <value>Unique referrer ID.</value>
        /*
        <example>cust_nM4jqPiaXUvQdVSA6vTRUnix</example>
        */
        [DataMember(Name = "referrer_id", EmitDefaultValue = true)]
        public string ReferrerId
        {
            get{ return _ReferrerId;}
            set
            {
                _ReferrerId = value;
                _flagReferrerId = true;
            }
        }
        private string _ReferrerId;
        private bool _flagReferrerId;

        /// <summary>
        /// Returns false as ReferrerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferrerId()
        {
            return _flagReferrerId;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public Customer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private Customer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets Referrer
        /// </summary>
        [DataMember(Name = "referrer", EmitDefaultValue = true)]
        public Referrer Referrer
        {
            get{ return _Referrer;}
            set
            {
                _Referrer = value;
                _flagReferrer = true;
            }
        }
        private Referrer _Referrer;
        private bool _flagReferrer;

        /// <summary>
        /// Returns false as Referrer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferrer()
        {
            return _flagReferrer;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrdersCreateRequestBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  InitialAmount: ").Append(InitialAmount).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ReferrerId: ").Append(ReferrerId).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
