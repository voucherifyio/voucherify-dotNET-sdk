/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the conditions for the expiration date of a tier.
    /// </summary>
    [DataContract(Name = "LoyaltyTiersExpirationAllExpirationDate")]
    public partial class LoyaltyTiersExpirationAllExpirationDate : IValidatableObject
    {
        /// <summary>
        /// What triggers the tier to expire for a customer.     &#x60;END_OF_PERIOD&#x60;: Expire tier at the end of the period.     &#x60;END_OF_NEXT_PERIOD&#x60;:  Expire tier at the end of the next period.   &#x60;BALANCE_DROP&#x60;: Tier expires when the points balance drops below the required range of the tier.   &#x60;CUSTOM&#x60;: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier.
        /// </summary>
        /// <value>What triggers the tier to expire for a customer.     &#x60;END_OF_PERIOD&#x60;: Expire tier at the end of the period.     &#x60;END_OF_NEXT_PERIOD&#x60;:  Expire tier at the end of the next period.   &#x60;BALANCE_DROP&#x60;: Tier expires when the points balance drops below the required range of the tier.   &#x60;CUSTOM&#x60;: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ENDOFPERIOD for value: END_OF_PERIOD
            /// </summary>
            [EnumMember(Value = "END_OF_PERIOD")]
            ENDOFPERIOD = 1,

            /// <summary>
            /// Enum ENDOFNEXTPERIOD for value: END_OF_NEXT_PERIOD
            /// </summary>
            [EnumMember(Value = "END_OF_NEXT_PERIOD")]
            ENDOFNEXTPERIOD = 2,

            /// <summary>
            /// Enum BALANCEDROP for value: BALANCE_DROP
            /// </summary>
            [EnumMember(Value = "BALANCE_DROP")]
            BALANCEDROP = 3,

            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 4
        }


        /// <summary>
        /// What triggers the tier to expire for a customer.     &#x60;END_OF_PERIOD&#x60;: Expire tier at the end of the period.     &#x60;END_OF_NEXT_PERIOD&#x60;:  Expire tier at the end of the next period.   &#x60;BALANCE_DROP&#x60;: Tier expires when the points balance drops below the required range of the tier.   &#x60;CUSTOM&#x60;: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier.
        /// </summary>
        /// <value>What triggers the tier to expire for a customer.     &#x60;END_OF_PERIOD&#x60;: Expire tier at the end of the period.     &#x60;END_OF_NEXT_PERIOD&#x60;:  Expire tier at the end of the next period.   &#x60;BALANCE_DROP&#x60;: Tier expires when the points balance drops below the required range of the tier.   &#x60;CUSTOM&#x60;: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTiersExpirationAllExpirationDate" /> class.
        /// </summary>
        /// <param name="type">What triggers the tier to expire for a customer.     &#x60;END_OF_PERIOD&#x60;: Expire tier at the end of the period.     &#x60;END_OF_NEXT_PERIOD&#x60;:  Expire tier at the end of the next period.   &#x60;BALANCE_DROP&#x60;: Tier expires when the points balance drops below the required range of the tier.   &#x60;CUSTOM&#x60;: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier..</param>
        /// <param name="extend">Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of &#x60;P3M&#x60; will be valid for an additional duration of 3 months and a tier with a duration of &#x60;P1D&#x60; will be valid for an additional duration of 1 day..</param>
        /// <param name="rounding">rounding.</param>
        public LoyaltyTiersExpirationAllExpirationDate(TypeEnum? type = default(TypeEnum?), string extend = default(string), LoyaltyTiersExpirationAllExpirationDateRounding rounding = default(LoyaltyTiersExpirationAllExpirationDateRounding))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Extend = extend;
            if (this.Extend != null)
            {
                this._flagExtend = true;
            }
            this._Rounding = rounding;
            if (this.Rounding != null)
            {
                this._flagRounding = true;
            }
        }

        /// <summary>
        /// Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of &#x60;P3M&#x60; will be valid for an additional duration of 3 months and a tier with a duration of &#x60;P1D&#x60; will be valid for an additional duration of 1 day.
        /// </summary>
        /// <value>Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of &#x60;P3M&#x60; will be valid for an additional duration of 3 months and a tier with a duration of &#x60;P1D&#x60; will be valid for an additional duration of 1 day.</value>
        [DataMember(Name = "extend", EmitDefaultValue = true)]
        public string Extend
        {
            get{ return _Extend;}
            set
            {
                _Extend = value;
                _flagExtend = true;
            }
        }
        private string _Extend;
        private bool _flagExtend;

        /// <summary>
        /// Returns false as Extend should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExtend()
        {
            return _flagExtend;
        }
        /// <summary>
        /// Gets or Sets Rounding
        /// </summary>
        [DataMember(Name = "rounding", EmitDefaultValue = true)]
        public LoyaltyTiersExpirationAllExpirationDateRounding Rounding
        {
            get{ return _Rounding;}
            set
            {
                _Rounding = value;
                _flagRounding = true;
            }
        }
        private LoyaltyTiersExpirationAllExpirationDateRounding _Rounding;
        private bool _flagRounding;

        /// <summary>
        /// Returns false as Rounding should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRounding()
        {
            return _flagRounding;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyTiersExpirationAllExpirationDate {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Extend: ").Append(Extend).Append("\n");
            sb.Append("  Rounding: ").Append(Rounding).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
