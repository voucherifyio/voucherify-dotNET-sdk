/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Filters campaigns by their &#x60;active&#x60; state. Pass the filter as an empty object, for example &#x60;filters[active][conditions][$enabled]&#x3D;&#x60;.
    /// </summary>
    [DataContract(Name = "ParameterFiltersListCampaignsActive")]
    public partial class ParameterFiltersListCampaignsActive : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterFiltersListCampaignsActive" /> class.
        /// </summary>
        /// <param name="enabled">Campaigns are enabled..</param>
        /// <param name="disabled">Campaigns are disabled..</param>
        /// <param name="expired">Campaign &#x60;expiration_date&#x60; is in the past..</param>
        /// <param name="active">Campaigns are active, &#x60;start_date&#x60; is &#x60;null&#x60; or in the past, and &#x60;expiration_date&#x60; is &#x60;null&#x60; or in the future..</param>
        public ParameterFiltersListCampaignsActive(Object enabled = default(Object), Object disabled = default(Object), Object expired = default(Object), Object active = default(Object))
        {
            this._Enabled = enabled;
            if (this.Enabled != null)
            {
                this._flagEnabled = true;
            }
            this._Disabled = disabled;
            if (this.Disabled != null)
            {
                this._flagDisabled = true;
            }
            this._Expired = expired;
            if (this.Expired != null)
            {
                this._flagExpired = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
        }

        /// <summary>
        /// Campaigns are enabled.
        /// </summary>
        /// <value>Campaigns are enabled.</value>
        [DataMember(Name = "$enabled", EmitDefaultValue = true)]
        public Object Enabled
        {
            get{ return _Enabled;}
            set
            {
                _Enabled = value;
                _flagEnabled = true;
            }
        }
        private Object _Enabled;
        private bool _flagEnabled;

        /// <summary>
        /// Returns false as Enabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnabled()
        {
            return _flagEnabled;
        }
        /// <summary>
        /// Campaigns are disabled.
        /// </summary>
        /// <value>Campaigns are disabled.</value>
        [DataMember(Name = "$disabled", EmitDefaultValue = true)]
        public Object Disabled
        {
            get{ return _Disabled;}
            set
            {
                _Disabled = value;
                _flagDisabled = true;
            }
        }
        private Object _Disabled;
        private bool _flagDisabled;

        /// <summary>
        /// Returns false as Disabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDisabled()
        {
            return _flagDisabled;
        }
        /// <summary>
        /// Campaign &#x60;expiration_date&#x60; is in the past.
        /// </summary>
        /// <value>Campaign &#x60;expiration_date&#x60; is in the past.</value>
        [DataMember(Name = "$expired", EmitDefaultValue = true)]
        public Object Expired
        {
            get{ return _Expired;}
            set
            {
                _Expired = value;
                _flagExpired = true;
            }
        }
        private Object _Expired;
        private bool _flagExpired;

        /// <summary>
        /// Returns false as Expired should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpired()
        {
            return _flagExpired;
        }
        /// <summary>
        /// Campaigns are active, &#x60;start_date&#x60; is &#x60;null&#x60; or in the past, and &#x60;expiration_date&#x60; is &#x60;null&#x60; or in the future.
        /// </summary>
        /// <value>Campaigns are active, &#x60;start_date&#x60; is &#x60;null&#x60; or in the past, and &#x60;expiration_date&#x60; is &#x60;null&#x60; or in the future.</value>
        [DataMember(Name = "$active", EmitDefaultValue = true)]
        public Object Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private Object _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterFiltersListCampaignsActive {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
