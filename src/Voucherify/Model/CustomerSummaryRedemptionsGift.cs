/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Summary of gift card credits.
    /// </summary>
    [DataContract(Name = "CustomerSummaryRedemptionsGift")]
    public partial class CustomerSummaryRedemptionsGift : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerSummaryRedemptionsGift" /> class.
        /// </summary>
        /// <param name="redeemedAmount">Total amount of gift card credits redeemed by customer. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="amountToGo">Remaining gift card balance across all gift cards. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        public CustomerSummaryRedemptionsGift(int? redeemedAmount = default(int?), int? amountToGo = default(int?))
        {
            this._RedeemedAmount = redeemedAmount;
            if (this.RedeemedAmount != null)
            {
                this._flagRedeemedAmount = true;
            }
            this._AmountToGo = amountToGo;
            if (this.AmountToGo != null)
            {
                this._flagAmountToGo = true;
            }
        }

        /// <summary>
        /// Total amount of gift card credits redeemed by customer. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Total amount of gift card credits redeemed by customer. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "redeemed_amount", EmitDefaultValue = true)]
        public int? RedeemedAmount
        {
            get{ return _RedeemedAmount;}
            set
            {
                _RedeemedAmount = value;
                _flagRedeemedAmount = true;
            }
        }
        private int? _RedeemedAmount;
        private bool _flagRedeemedAmount;

        /// <summary>
        /// Returns false as RedeemedAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemedAmount()
        {
            return _flagRedeemedAmount;
        }
        /// <summary>
        /// Remaining gift card balance across all gift cards. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Remaining gift card balance across all gift cards. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "amount_to_go", EmitDefaultValue = true)]
        public int? AmountToGo
        {
            get{ return _AmountToGo;}
            set
            {
                _AmountToGo = value;
                _flagAmountToGo = true;
            }
        }
        private int? _AmountToGo;
        private bool _flagAmountToGo;

        /// <summary>
        /// Returns false as AmountToGo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountToGo()
        {
            return _flagAmountToGo;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerSummaryRedemptionsGift {\n");
            sb.Append("  RedeemedAmount: ").Append(RedeemedAmount).Append("\n");
            sb.Append("  AmountToGo: ").Append(AmountToGo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
