/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Unassigns the campaign from an area or a store. Provide the area and/or store IDs in the respective arrays. If a campaign changes assignments between areas or stores, unassign it first. For example, if a campaign is assigned to Area-01, but it must be now assigned to Store-01 within this area, you have to unassign the campaign from Area-01 and assigned to Store-01 only.  If you want to assign the campaign to stores only, you do not have to send the area ID.
    /// </summary>
    [DataContract(Name = "AccessSettingsUnassign")]
    public partial class AccessSettingsUnassign : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessSettingsUnassign" /> class.
        /// </summary>
        /// <param name="areasIds">List all area IDs from which the campaign will be unassigned..</param>
        /// <param name="areaStoresIds">List all store IDs from which the campaign will be unassigned..</param>
        /// <param name="areaAllStoresIds">List all area IDs where the campaign will be unassigned from all stores in the area. This unassignment is not equal to the unassignment from all &#x60;area_stores_ids&#x60; listed separately..</param>
        public AccessSettingsUnassign(List<string> areasIds = default(List<string>), List<string> areaStoresIds = default(List<string>), List<string> areaAllStoresIds = default(List<string>))
        {
            this._AreasIds = areasIds;
            if (this.AreasIds != null)
            {
                this._flagAreasIds = true;
            }
            this._AreaStoresIds = areaStoresIds;
            if (this.AreaStoresIds != null)
            {
                this._flagAreaStoresIds = true;
            }
            this._AreaAllStoresIds = areaAllStoresIds;
            if (this.AreaAllStoresIds != null)
            {
                this._flagAreaAllStoresIds = true;
            }
        }

        /// <summary>
        /// List all area IDs from which the campaign will be unassigned.
        /// </summary>
        /// <value>List all area IDs from which the campaign will be unassigned.</value>
        [DataMember(Name = "areas_ids", EmitDefaultValue = true)]
        public List<string> AreasIds
        {
            get{ return _AreasIds;}
            set
            {
                _AreasIds = value;
                _flagAreasIds = true;
            }
        }
        private List<string> _AreasIds;
        private bool _flagAreasIds;

        /// <summary>
        /// Returns false as AreasIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreasIds()
        {
            return _flagAreasIds;
        }
        /// <summary>
        /// List all store IDs from which the campaign will be unassigned.
        /// </summary>
        /// <value>List all store IDs from which the campaign will be unassigned.</value>
        [DataMember(Name = "area_stores_ids", EmitDefaultValue = true)]
        public List<string> AreaStoresIds
        {
            get{ return _AreaStoresIds;}
            set
            {
                _AreaStoresIds = value;
                _flagAreaStoresIds = true;
            }
        }
        private List<string> _AreaStoresIds;
        private bool _flagAreaStoresIds;

        /// <summary>
        /// Returns false as AreaStoresIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreaStoresIds()
        {
            return _flagAreaStoresIds;
        }
        /// <summary>
        /// List all area IDs where the campaign will be unassigned from all stores in the area. This unassignment is not equal to the unassignment from all &#x60;area_stores_ids&#x60; listed separately.
        /// </summary>
        /// <value>List all area IDs where the campaign will be unassigned from all stores in the area. This unassignment is not equal to the unassignment from all &#x60;area_stores_ids&#x60; listed separately.</value>
        [DataMember(Name = "area_all_stores_ids", EmitDefaultValue = true)]
        public List<string> AreaAllStoresIds
        {
            get{ return _AreaAllStoresIds;}
            set
            {
                _AreaAllStoresIds = value;
                _flagAreaAllStoresIds = true;
            }
        }
        private List<string> _AreaAllStoresIds;
        private bool _flagAreaAllStoresIds;

        /// <summary>
        /// Returns false as AreaAllStoresIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreaAllStoresIds()
        {
            return _flagAreaAllStoresIds;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessSettingsUnassign {\n");
            sb.Append("  AreasIds: ").Append(AreasIds).Append("\n");
            sb.Append("  AreaStoresIds: ").Append(AreaStoresIds).Append("\n");
            sb.Append("  AreaAllStoresIds: ").Append(AreaAllStoresIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
