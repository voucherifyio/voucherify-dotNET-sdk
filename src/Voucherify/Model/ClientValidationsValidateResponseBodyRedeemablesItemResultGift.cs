/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Stores the amount of gift card credits to be applied.
    /// </summary>
    [DataContract(Name = "ClientValidationsValidateResponseBodyRedeemablesItemResultGift")]
    public partial class ClientValidationsValidateResponseBodyRedeemablesItemResultGift : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClientValidationsValidateResponseBodyRedeemablesItemResultGift" /> class.
        /// </summary>
        /// <param name="balance">Available funds at the moment of validation. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="credits">Total number of gift card credits to be applied. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        public ClientValidationsValidateResponseBodyRedeemablesItemResultGift(int? balance = default(int?), int? credits = default(int?))
        {
            this._Balance = balance;
            if (this.Balance != null)
            {
                this._flagBalance = true;
            }
            this._Credits = credits;
            if (this.Credits != null)
            {
                this._flagCredits = true;
            }
        }

        /// <summary>
        /// Available funds at the moment of validation. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Available funds at the moment of validation. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public int? Balance
        {
            get{ return _Balance;}
            set
            {
                _Balance = value;
                _flagBalance = true;
            }
        }
        private int? _Balance;
        private bool _flagBalance;

        /// <summary>
        /// Returns false as Balance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBalance()
        {
            return _flagBalance;
        }
        /// <summary>
        /// Total number of gift card credits to be applied. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Total number of gift card credits to be applied. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "credits", EmitDefaultValue = true)]
        public int? Credits
        {
            get{ return _Credits;}
            set
            {
                _Credits = value;
                _flagCredits = true;
            }
        }
        private int? _Credits;
        private bool _flagCredits;

        /// <summary>
        /// Returns false as Credits should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCredits()
        {
            return _flagCredits;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClientValidationsValidateResponseBodyRedeemablesItemResultGift {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Credits: ").Append(Credits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
