/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// CampaignLoyaltyCardExpirationRules
    /// </summary>
    [DataContract(Name = "CampaignLoyaltyCardExpirationRules")]
    public partial class CampaignLoyaltyCardExpirationRules : IValidatableObject
    {
        /// <summary>
        /// Type of period
        /// </summary>
        /// <value>Type of period</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PeriodTypeEnum
        {
            /// <summary>
            /// Enum MONTH for value: MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTH = 1
        }


        /// <summary>
        /// Type of period
        /// </summary>
        /// <value>Type of period</value>

        [DataMember(Name = "period_type", EmitDefaultValue = true)]
        public PeriodTypeEnum? PeriodType
        {
            get{ return _PeriodType;}
            set
            {
                _PeriodType = value;
                _flagPeriodType = true;
            }
        }
        private PeriodTypeEnum? _PeriodType;
        private bool _flagPeriodType;

        /// <summary>
        /// Returns false as PeriodType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePeriodType()
        {
            return _flagPeriodType;
        }
        /// <summary>
        /// Type of rounding
        /// </summary>
        /// <value>Type of rounding</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoundingTypeEnum
        {
            /// <summary>
            /// Enum ENDOFMONTH for value: END_OF_MONTH
            /// </summary>
            [EnumMember(Value = "END_OF_MONTH")]
            ENDOFMONTH = 1,

            /// <summary>
            /// Enum ENDOFQUARTER for value: END_OF_QUARTER
            /// </summary>
            [EnumMember(Value = "END_OF_QUARTER")]
            ENDOFQUARTER = 2,

            /// <summary>
            /// Enum ENDOFHALFYEAR for value: END_OF_HALF_YEAR
            /// </summary>
            [EnumMember(Value = "END_OF_HALF_YEAR")]
            ENDOFHALFYEAR = 3,

            /// <summary>
            /// Enum ENDOFYEAR for value: END_OF_YEAR
            /// </summary>
            [EnumMember(Value = "END_OF_YEAR")]
            ENDOFYEAR = 4,

            /// <summary>
            /// Enum PARTICULARMONTH for value: PARTICULAR_MONTH
            /// </summary>
            [EnumMember(Value = "PARTICULAR_MONTH")]
            PARTICULARMONTH = 5
        }


        /// <summary>
        /// Type of rounding
        /// </summary>
        /// <value>Type of rounding</value>

        [DataMember(Name = "rounding_type", EmitDefaultValue = true)]
        public RoundingTypeEnum? RoundingType
        {
            get{ return _RoundingType;}
            set
            {
                _RoundingType = value;
                _flagRoundingType = true;
            }
        }
        private RoundingTypeEnum? _RoundingType;
        private bool _flagRoundingType;

        /// <summary>
        /// Returns false as RoundingType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRoundingType()
        {
            return _flagRoundingType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignLoyaltyCardExpirationRules" /> class.
        /// </summary>
        /// <param name="periodType">Type of period (default to PeriodTypeEnum.MONTH).</param>
        /// <param name="periodValue">Value of the period.</param>
        /// <param name="roundingType">Type of rounding.</param>
        /// <param name="roundingValue">Value of rounding.</param>
        public CampaignLoyaltyCardExpirationRules(PeriodTypeEnum? periodType = PeriodTypeEnum.MONTH, int? periodValue = default(int?), RoundingTypeEnum? roundingType = default(RoundingTypeEnum?), int? roundingValue = default(int?))
        {
            this._PeriodValue = periodValue;
            if (this.PeriodValue != null)
            {
                this._flagPeriodValue = true;
            }
            this._RoundingType = roundingType;
            if (this.RoundingType != null)
            {
                this._flagRoundingType = true;
            }
            this._RoundingValue = roundingValue;
            if (this.RoundingValue != null)
            {
                this._flagRoundingValue = true;
            }
        }

        /// <summary>
        /// Value of the period
        /// </summary>
        /// <value>Value of the period</value>
        [DataMember(Name = "period_value", EmitDefaultValue = true)]
        public int? PeriodValue
        {
            get{ return _PeriodValue;}
            set
            {
                _PeriodValue = value;
                _flagPeriodValue = true;
            }
        }
        private int? _PeriodValue;
        private bool _flagPeriodValue;

        /// <summary>
        /// Returns false as PeriodValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePeriodValue()
        {
            return _flagPeriodValue;
        }
        /// <summary>
        /// Value of rounding
        /// </summary>
        /// <value>Value of rounding</value>
        [DataMember(Name = "rounding_value", EmitDefaultValue = true)]
        public int? RoundingValue
        {
            get{ return _RoundingValue;}
            set
            {
                _RoundingValue = value;
                _flagRoundingValue = true;
            }
        }
        private int? _RoundingValue;
        private bool _flagRoundingValue;

        /// <summary>
        /// Returns false as RoundingValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRoundingValue()
        {
            return _flagRoundingValue;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignLoyaltyCardExpirationRules {\n");
            sb.Append("  PeriodType: ").Append(PeriodType).Append("\n");
            sb.Append("  PeriodValue: ").Append(PeriodValue).Append("\n");
            sb.Append("  RoundingType: ").Append(RoundingType).Append("\n");
            sb.Append("  RoundingValue: ").Append(RoundingValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
