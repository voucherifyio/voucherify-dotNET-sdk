/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Single customer&#39;s redeemable
    /// </summary>
    [DataContract(Name = "CustomerRedeemable")]
    public partial class CustomerRedeemable : IValidatableObject
    {
        /// <summary>
        /// Role of the holder.
        /// </summary>
        /// <value>Role of the holder.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HolderRoleEnum
        {
            /// <summary>
            /// Enum OWNER for value: OWNER
            /// </summary>
            [EnumMember(Value = "OWNER")]
            OWNER = 1,

            /// <summary>
            /// Enum REFERRER for value: REFERRER
            /// </summary>
            [EnumMember(Value = "REFERRER")]
            REFERRER = 2,

            /// <summary>
            /// Enum REFEREE for value: REFEREE
            /// </summary>
            [EnumMember(Value = "REFEREE")]
            REFEREE = 3
        }


        /// <summary>
        /// Role of the holder.
        /// </summary>
        /// <value>Role of the holder.</value>
        /*
        <example>OWNER</example>
        */

        [DataMember(Name = "holder_role", EmitDefaultValue = true)]
        public HolderRoleEnum? HolderRole
        {
            get{ return _HolderRole;}
            set
            {
                _HolderRole = value;
                _flagHolderRole = true;
            }
        }
        private HolderRoleEnum? _HolderRole;
        private bool _flagHolderRole;

        /// <summary>
        /// Returns false as HolderRole should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHolderRole()
        {
            return _flagHolderRole;
        }
        /// <summary>
        /// Defines the type of the campaign.
        /// </summary>
        /// <value>Defines the type of the campaign.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CampaignTypeEnum
        {
            /// <summary>
            /// Enum LOYALTYPROGRAM for value: LOYALTY_PROGRAM
            /// </summary>
            [EnumMember(Value = "LOYALTY_PROGRAM")]
            LOYALTYPROGRAM = 1,

            /// <summary>
            /// Enum GIFTVOUCHERS for value: GIFT_VOUCHERS
            /// </summary>
            [EnumMember(Value = "GIFT_VOUCHERS")]
            GIFTVOUCHERS = 2,

            /// <summary>
            /// Enum DISCOUNTCOUPONS for value: DISCOUNT_COUPONS
            /// </summary>
            [EnumMember(Value = "DISCOUNT_COUPONS")]
            DISCOUNTCOUPONS = 3,

            /// <summary>
            /// Enum PROMOTION for value: PROMOTION
            /// </summary>
            [EnumMember(Value = "PROMOTION")]
            PROMOTION = 4,

            /// <summary>
            /// Enum REFERRALPROGRAM for value: REFERRAL_PROGRAM
            /// </summary>
            [EnumMember(Value = "REFERRAL_PROGRAM")]
            REFERRALPROGRAM = 5
        }


        /// <summary>
        /// Defines the type of the campaign.
        /// </summary>
        /// <value>Defines the type of the campaign.</value>
        /*
        <example>DISCOUNT_COUPONS</example>
        */

        [DataMember(Name = "campaign_type", EmitDefaultValue = true)]
        public CampaignTypeEnum? CampaignType
        {
            get{ return _CampaignType;}
            set
            {
                _CampaignType = value;
                _flagCampaignType = true;
            }
        }
        private CampaignTypeEnum? _CampaignType;
        private bool _flagCampaignType;

        /// <summary>
        /// Returns false as CampaignType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignType()
        {
            return _flagCampaignType;
        }
        /// <summary>
        /// Defines the type of the voucher.
        /// </summary>
        /// <value>Defines the type of the voucher.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VoucherTypeEnum
        {
            /// <summary>
            /// Enum GIFTVOUCHER for value: GIFT_VOUCHER
            /// </summary>
            [EnumMember(Value = "GIFT_VOUCHER")]
            GIFTVOUCHER = 1,

            /// <summary>
            /// Enum DISCOUNTVOUCHER for value: DISCOUNT_VOUCHER
            /// </summary>
            [EnumMember(Value = "DISCOUNT_VOUCHER")]
            DISCOUNTVOUCHER = 2,

            /// <summary>
            /// Enum LOYALTYCARD for value: LOYALTY_CARD
            /// </summary>
            [EnumMember(Value = "LOYALTY_CARD")]
            LOYALTYCARD = 3
        }


        /// <summary>
        /// Defines the type of the voucher.
        /// </summary>
        /// <value>Defines the type of the voucher.</value>
        /*
        <example>DISCOUNT_VOUCHER</example>
        */

        [DataMember(Name = "voucher_type", EmitDefaultValue = true)]
        public VoucherTypeEnum? VoucherType
        {
            get{ return _VoucherType;}
            set
            {
                _VoucherType = value;
                _flagVoucherType = true;
            }
        }
        private VoucherTypeEnum? _VoucherType;
        private bool _flagVoucherType;

        /// <summary>
        /// Returns false as VoucherType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucherType()
        {
            return _flagVoucherType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRedeemable" /> class.
        /// </summary>
        /// <param name="id">Unique redeemable holder identifier..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the redeemable was assigned. The value is shown in the ISO 8601 format..</param>
        /// <param name="redeemableId">Identifier of the redeemable item..</param>
        /// <param name="redeemableObject">Type of the redeemable..</param>
        /// <param name="customerId">Identifier of the customer..</param>
        /// <param name="holderRole">Role of the holder..</param>
        /// <param name="campaignId">Unique campaign identifier, assigned by Voucherify..</param>
        /// <param name="campaignType">Defines the type of the campaign..</param>
        /// <param name="voucherType">Defines the type of the voucher..</param>
        /// <param name="redeemable">redeemable.</param>
        public CustomerRedeemable(string id = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), string redeemableId = default(string), string redeemableObject = default(string), string customerId = default(string), HolderRoleEnum? holderRole = default(HolderRoleEnum?), string campaignId = default(string), CampaignTypeEnum? campaignType = default(CampaignTypeEnum?), VoucherTypeEnum? voucherType = default(VoucherTypeEnum?), CustomerRedeemableRedeemable redeemable = default(CustomerRedeemableRedeemable))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._RedeemableId = redeemableId;
            if (this.RedeemableId != null)
            {
                this._flagRedeemableId = true;
            }
            this._RedeemableObject = redeemableObject;
            if (this.RedeemableObject != null)
            {
                this._flagRedeemableObject = true;
            }
            this._CustomerId = customerId;
            if (this.CustomerId != null)
            {
                this._flagCustomerId = true;
            }
            this._HolderRole = holderRole;
            if (this.HolderRole != null)
            {
                this._flagHolderRole = true;
            }
            this._CampaignId = campaignId;
            if (this.CampaignId != null)
            {
                this._flagCampaignId = true;
            }
            this._CampaignType = campaignType;
            if (this.CampaignType != null)
            {
                this._flagCampaignType = true;
            }
            this._VoucherType = voucherType;
            if (this.VoucherType != null)
            {
                this._flagVoucherType = true;
            }
            this._Redeemable = redeemable;
            if (this.Redeemable != null)
            {
                this._flagRedeemable = true;
            }
        }

        /// <summary>
        /// Unique redeemable holder identifier.
        /// </summary>
        /// <value>Unique redeemable holder identifier.</value>
        /*
        <example>rh_0e7b8db4700106a852</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the redeemable was assigned. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the redeemable was assigned. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2024-03-22T17:48:25.910Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Identifier of the redeemable item.
        /// </summary>
        /// <value>Identifier of the redeemable item.</value>
        /*
        <example>v_GXVguPhq2khgFxH7GrRXWA91gDr1LiA1</example>
        */
        [DataMember(Name = "redeemable_id", EmitDefaultValue = true)]
        public string RedeemableId
        {
            get{ return _RedeemableId;}
            set
            {
                _RedeemableId = value;
                _flagRedeemableId = true;
            }
        }
        private string _RedeemableId;
        private bool _flagRedeemableId;

        /// <summary>
        /// Returns false as RedeemableId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemableId()
        {
            return _flagRedeemableId;
        }
        /// <summary>
        /// Type of the redeemable.
        /// </summary>
        /// <value>Type of the redeemable.</value>
        /*
        <example>voucher</example>
        */
        [DataMember(Name = "redeemable_object", EmitDefaultValue = true)]
        public string RedeemableObject
        {
            get{ return _RedeemableObject;}
            set
            {
                _RedeemableObject = value;
                _flagRedeemableObject = true;
            }
        }
        private string _RedeemableObject;
        private bool _flagRedeemableObject;

        /// <summary>
        /// Returns false as RedeemableObject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemableObject()
        {
            return _flagRedeemableObject;
        }
        /// <summary>
        /// Identifier of the customer.
        /// </summary>
        /// <value>Identifier of the customer.</value>
        /*
        <example>cust_p1ufreYbVbwZ1x70nFkH9rF9</example>
        */
        [DataMember(Name = "customer_id", EmitDefaultValue = true)]
        public string CustomerId
        {
            get{ return _CustomerId;}
            set
            {
                _CustomerId = value;
                _flagCustomerId = true;
            }
        }
        private string _CustomerId;
        private bool _flagCustomerId;

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return _flagCustomerId;
        }
        /// <summary>
        /// Unique campaign identifier, assigned by Voucherify.
        /// </summary>
        /// <value>Unique campaign identifier, assigned by Voucherify.</value>
        /*
        <example>camp_weer1c3p5ZgktqfW56RfoNaG</example>
        */
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId
        {
            get{ return _CampaignId;}
            set
            {
                _CampaignId = value;
                _flagCampaignId = true;
            }
        }
        private string _CampaignId;
        private bool _flagCampaignId;

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return _flagCampaignId;
        }
        /// <summary>
        /// Gets or Sets Redeemable
        /// </summary>
        [DataMember(Name = "redeemable", EmitDefaultValue = true)]
        public CustomerRedeemableRedeemable Redeemable
        {
            get{ return _Redeemable;}
            set
            {
                _Redeemable = value;
                _flagRedeemable = true;
            }
        }
        private CustomerRedeemableRedeemable _Redeemable;
        private bool _flagRedeemable;

        /// <summary>
        /// Returns false as Redeemable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemable()
        {
            return _flagRedeemable;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerRedeemable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  RedeemableId: ").Append(RedeemableId).Append("\n");
            sb.Append("  RedeemableObject: ").Append(RedeemableObject).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  HolderRole: ").Append(HolderRole).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CampaignType: ").Append(CampaignType).Append("\n");
            sb.Append("  VoucherType: ").Append(VoucherType).Append("\n");
            sb.Append("  Redeemable: ").Append(Redeemable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
