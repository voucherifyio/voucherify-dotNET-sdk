/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request schema for **POST** &#x60;v1/products/bulk/async&#x60;.
    /// </summary>
    [DataContract(Name = "ProductsUpdateInBulkRequestBody")]
    public partial class ProductsUpdateInBulkRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsUpdateInBulkRequestBody" /> class.
        /// </summary>
        /// <param name="sourceId">Unique product source ID from your inventory system..</param>
        /// <param name="name">Unique user-defined product name..</param>
        /// <param name="price">Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as &#x60;$100.00&#x60; being expressed as &#x60;10000&#x60;..</param>
        /// <param name="attributes">A list of product attributes whose values you can customize for given SKUs: &#x60;[\&quot;color\&quot;,\&quot;size\&quot;,\&quot;ranking\&quot;]&#x60;. Each child SKU can have a unique value for a given attribute..</param>
        /// <param name="imageUrl">The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image..</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format..</param>
        public ProductsUpdateInBulkRequestBody(string sourceId = default(string), string name = default(string), int? price = default(int?), List<string> attributes = default(List<string>), string imageUrl = default(string), Object metadata = default(Object))
        {
            this._SourceId = sourceId;
            if (this.SourceId != null)
            {
                this._flagSourceId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Price = price;
            if (this.Price != null)
            {
                this._flagPrice = true;
            }
            this._Attributes = attributes;
            if (this.Attributes != null)
            {
                this._flagAttributes = true;
            }
            this._ImageUrl = imageUrl;
            if (this.ImageUrl != null)
            {
                this._flagImageUrl = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
        }

        /// <summary>
        /// Unique product source ID from your inventory system.
        /// </summary>
        /// <value>Unique product source ID from your inventory system.</value>
        /*
        <example>test_prod_id_1</example>
        */
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId
        {
            get{ return _SourceId;}
            set
            {
                _SourceId = value;
                _flagSourceId = true;
            }
        }
        private string _SourceId;
        private bool _flagSourceId;

        /// <summary>
        /// Returns false as SourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceId()
        {
            return _flagSourceId;
        }
        /// <summary>
        /// Unique user-defined product name.
        /// </summary>
        /// <value>Unique user-defined product name.</value>
        /*
        <example>T-shirt</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as &#x60;$100.00&#x60; being expressed as &#x60;10000&#x60;.
        /// </summary>
        /// <value>Unit price. It is represented by a value multiplied by 100 to accurately reflect 2 decimal places, such as &#x60;$100.00&#x60; being expressed as &#x60;10000&#x60;.</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public int? Price
        {
            get{ return _Price;}
            set
            {
                _Price = value;
                _flagPrice = true;
            }
        }
        private int? _Price;
        private bool _flagPrice;

        /// <summary>
        /// Returns false as Price should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrice()
        {
            return _flagPrice;
        }
        /// <summary>
        /// A list of product attributes whose values you can customize for given SKUs: &#x60;[\&quot;color\&quot;,\&quot;size\&quot;,\&quot;ranking\&quot;]&#x60;. Each child SKU can have a unique value for a given attribute.
        /// </summary>
        /// <value>A list of product attributes whose values you can customize for given SKUs: &#x60;[\&quot;color\&quot;,\&quot;size\&quot;,\&quot;ranking\&quot;]&#x60;. Each child SKU can have a unique value for a given attribute.</value>
        [DataMember(Name = "attributes", EmitDefaultValue = true)]
        public List<string> Attributes
        {
            get{ return _Attributes;}
            set
            {
                _Attributes = value;
                _flagAttributes = true;
            }
        }
        private List<string> _Attributes;
        private bool _flagAttributes;

        /// <summary>
        /// Returns false as Attributes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttributes()
        {
            return _flagAttributes;
        }
        /// <summary>
        /// The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.
        /// </summary>
        /// <value>The HTTPS URL pointing to the .png or .jpg file that will be used to render the product image.</value>
        /*
        <example>https://images.com/original.jpg</example>
        */
        [DataMember(Name = "image_url", EmitDefaultValue = true)]
        public string ImageUrl
        {
            get{ return _ImageUrl;}
            set
            {
                _ImageUrl = value;
                _flagImageUrl = true;
            }
        }
        private string _ImageUrl;
        private bool _flagImageUrl;

        /// <summary>
        /// Returns false as ImageUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeImageUrl()
        {
            return _flagImageUrl;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductsUpdateInBulkRequestBody {\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
