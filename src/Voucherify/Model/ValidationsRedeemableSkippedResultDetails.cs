/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ValidationsRedeemableSkippedResultDetails
    /// </summary>
    [DataContract(Name = "ValidationsRedeemableSkippedResultDetails")]
    public partial class ValidationsRedeemableSkippedResultDetails : IValidatableObject
    {
        /// <summary>
        /// Defines Key
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum KeyEnum
        {
            /// <summary>
            /// Enum ApplicableRedeemablesLimitExceeded for value: applicable_redeemables_limit_exceeded
            /// </summary>
            [EnumMember(Value = "applicable_redeemables_limit_exceeded")]
            ApplicableRedeemablesLimitExceeded = 1,

            /// <summary>
            /// Enum ApplicableRedeemablesPerCategoryLimitExceeded for value: applicable_redeemables_per_category_limit_exceeded
            /// </summary>
            [EnumMember(Value = "applicable_redeemables_per_category_limit_exceeded")]
            ApplicableRedeemablesPerCategoryLimitExceeded = 2,

            /// <summary>
            /// Enum ApplicableExclusiveRedeemablesLimitExceeded for value: applicable_exclusive_redeemables_limit_exceeded
            /// </summary>
            [EnumMember(Value = "applicable_exclusive_redeemables_limit_exceeded")]
            ApplicableExclusiveRedeemablesLimitExceeded = 3,

            /// <summary>
            /// Enum ApplicableExclusiveRedeemablesPerCategoryLimitExceeded for value: applicable_exclusive_redeemables_per_category_limit_exceeded
            /// </summary>
            [EnumMember(Value = "applicable_exclusive_redeemables_per_category_limit_exceeded")]
            ApplicableExclusiveRedeemablesPerCategoryLimitExceeded = 4,

            /// <summary>
            /// Enum ExclusionRulesNotMet for value: exclusion_rules_not_met
            /// </summary>
            [EnumMember(Value = "exclusion_rules_not_met")]
            ExclusionRulesNotMet = 5,

            /// <summary>
            /// Enum PrecedingValidationFailed for value: preceding_validation_failed
            /// </summary>
            [EnumMember(Value = "preceding_validation_failed")]
            PrecedingValidationFailed = 6
        }


        /// <summary>
        /// Gets or Sets Key
        /// </summary>

        [DataMember(Name = "key", EmitDefaultValue = true)]
        public KeyEnum? Key
        {
            get{ return _Key;}
            set
            {
                _Key = value;
                _flagKey = true;
            }
        }
        private KeyEnum? _Key;
        private bool _flagKey;

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return _flagKey;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationsRedeemableSkippedResultDetails" /> class.
        /// </summary>
        /// <param name="key">key.</param>
        /// <param name="message">message.</param>
        public ValidationsRedeemableSkippedResultDetails(KeyEnum? key = default(KeyEnum?), string message = default(string))
        {
            this._Key = key;
            if (this.Key != null)
            {
                this._flagKey = true;
            }
            this._Message = message;
            if (this.Message != null)
            {
                this._flagMessage = true;
            }
        }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message
        {
            get{ return _Message;}
            set
            {
                _Message = value;
                _flagMessage = true;
            }
        }
        private string _Message;
        private bool _flagMessage;

        /// <summary>
        /// Returns false as Message should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMessage()
        {
            return _flagMessage;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationsRedeemableSkippedResultDetails {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
