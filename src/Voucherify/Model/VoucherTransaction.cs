/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// VoucherTransaction
    /// </summary>
    [DataContract(Name = "VoucherTransaction")]
    public partial class VoucherTransaction : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CREDITSREDEMPTION for value: CREDITS_REDEMPTION
            /// </summary>
            [EnumMember(Value = "CREDITS_REDEMPTION")]
            CREDITSREDEMPTION = 1,

            /// <summary>
            /// Enum CREDITSREFUND for value: CREDITS_REFUND
            /// </summary>
            [EnumMember(Value = "CREDITS_REFUND")]
            CREDITSREFUND = 2,

            /// <summary>
            /// Enum CREDITSADDITION for value: CREDITS_ADDITION
            /// </summary>
            [EnumMember(Value = "CREDITS_ADDITION")]
            CREDITSADDITION = 3,

            /// <summary>
            /// Enum CREDITSREMOVAL for value: CREDITS_REMOVAL
            /// </summary>
            [EnumMember(Value = "CREDITS_REMOVAL")]
            CREDITSREMOVAL = 4,

            /// <summary>
            /// Enum PENDINGPOINTSACTIVATION for value: PENDING_POINTS_ACTIVATION
            /// </summary>
            [EnumMember(Value = "PENDING_POINTS_ACTIVATION")]
            PENDINGPOINTSACTIVATION = 5,

            /// <summary>
            /// Enum POINTSACCRUAL for value: POINTS_ACCRUAL
            /// </summary>
            [EnumMember(Value = "POINTS_ACCRUAL")]
            POINTSACCRUAL = 6,

            /// <summary>
            /// Enum POINTSREDEMPTION for value: POINTS_REDEMPTION
            /// </summary>
            [EnumMember(Value = "POINTS_REDEMPTION")]
            POINTSREDEMPTION = 7,

            /// <summary>
            /// Enum POINTSREFUND for value: POINTS_REFUND
            /// </summary>
            [EnumMember(Value = "POINTS_REFUND")]
            POINTSREFUND = 8,

            /// <summary>
            /// Enum POINTSADDITION for value: POINTS_ADDITION
            /// </summary>
            [EnumMember(Value = "POINTS_ADDITION")]
            POINTSADDITION = 9,

            /// <summary>
            /// Enum POINTSREMOVAL for value: POINTS_REMOVAL
            /// </summary>
            [EnumMember(Value = "POINTS_REMOVAL")]
            POINTSREMOVAL = 10,

            /// <summary>
            /// Enum POINTSEXPIRATION for value: POINTS_EXPIRATION
            /// </summary>
            [EnumMember(Value = "POINTS_EXPIRATION")]
            POINTSEXPIRATION = 11,

            /// <summary>
            /// Enum POINTSTRANSFERIN for value: POINTS_TRANSFER_IN
            /// </summary>
            [EnumMember(Value = "POINTS_TRANSFER_IN")]
            POINTSTRANSFERIN = 12,

            /// <summary>
            /// Enum POINTSTRANSFEROUT for value: POINTS_TRANSFER_OUT
            /// </summary>
            [EnumMember(Value = "POINTS_TRANSFER_OUT")]
            POINTSTRANSFEROUT = 13
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="VoucherTransaction" /> class.
        /// </summary>
        /// <param name="id">Unique transaction ID..</param>
        /// <param name="sourceId">The merchant&#39;s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service. In case of a redemption, this value is null..</param>
        /// <param name="voucherId">Unique voucher ID..</param>
        /// <param name="campaignId">Unqiue campaign ID of the voucher&#39;s parent campaign if it is part of campaign that generates bulk codes..</param>
        /// <param name="source">The channel through which the transaction took place, whether through the API or the the Dashboard. In case of a redemption, this value is null..</param>
        /// <param name="reason">Reason why the transaction occurred. In case of a redemption, this value is null..</param>
        /// <param name="relatedTransactionId">The related transaction ID on the receiving card..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the transaction was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="details">details.</param>
        /// <param name="type">type.</param>
        public VoucherTransaction(string id = default(string), string sourceId = default(string), string voucherId = default(string), string campaignId = default(string), string source = default(string), string reason = default(string), string relatedTransactionId = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), VoucherTransactionDetails details = default(VoucherTransactionDetails), TypeEnum? type = default(TypeEnum?))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._SourceId = sourceId;
            if (this.SourceId != null)
            {
                this._flagSourceId = true;
            }
            this._VoucherId = voucherId;
            if (this.VoucherId != null)
            {
                this._flagVoucherId = true;
            }
            this._CampaignId = campaignId;
            if (this.CampaignId != null)
            {
                this._flagCampaignId = true;
            }
            this._Source = source;
            if (this.Source != null)
            {
                this._flagSource = true;
            }
            this._Reason = reason;
            if (this.Reason != null)
            {
                this._flagReason = true;
            }
            this._RelatedTransactionId = relatedTransactionId;
            if (this.RelatedTransactionId != null)
            {
                this._flagRelatedTransactionId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._Details = details;
            if (this.Details != null)
            {
                this._flagDetails = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
        }

        /// <summary>
        /// Unique transaction ID.
        /// </summary>
        /// <value>Unique transaction ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The merchant&#39;s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service. In case of a redemption, this value is null.
        /// </summary>
        /// <value>The merchant&#39;s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service. In case of a redemption, this value is null.</value>
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId
        {
            get{ return _SourceId;}
            set
            {
                _SourceId = value;
                _flagSourceId = true;
            }
        }
        private string _SourceId;
        private bool _flagSourceId;

        /// <summary>
        /// Returns false as SourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceId()
        {
            return _flagSourceId;
        }
        /// <summary>
        /// Unique voucher ID.
        /// </summary>
        /// <value>Unique voucher ID.</value>
        [DataMember(Name = "voucher_id", EmitDefaultValue = true)]
        public string VoucherId
        {
            get{ return _VoucherId;}
            set
            {
                _VoucherId = value;
                _flagVoucherId = true;
            }
        }
        private string _VoucherId;
        private bool _flagVoucherId;

        /// <summary>
        /// Returns false as VoucherId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucherId()
        {
            return _flagVoucherId;
        }
        /// <summary>
        /// Unqiue campaign ID of the voucher&#39;s parent campaign if it is part of campaign that generates bulk codes.
        /// </summary>
        /// <value>Unqiue campaign ID of the voucher&#39;s parent campaign if it is part of campaign that generates bulk codes.</value>
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId
        {
            get{ return _CampaignId;}
            set
            {
                _CampaignId = value;
                _flagCampaignId = true;
            }
        }
        private string _CampaignId;
        private bool _flagCampaignId;

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return _flagCampaignId;
        }
        /// <summary>
        /// The channel through which the transaction took place, whether through the API or the the Dashboard. In case of a redemption, this value is null.
        /// </summary>
        /// <value>The channel through which the transaction took place, whether through the API or the the Dashboard. In case of a redemption, this value is null.</value>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source
        {
            get{ return _Source;}
            set
            {
                _Source = value;
                _flagSource = true;
            }
        }
        private string _Source;
        private bool _flagSource;

        /// <summary>
        /// Returns false as Source should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSource()
        {
            return _flagSource;
        }
        /// <summary>
        /// Reason why the transaction occurred. In case of a redemption, this value is null.
        /// </summary>
        /// <value>Reason why the transaction occurred. In case of a redemption, this value is null.</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason
        {
            get{ return _Reason;}
            set
            {
                _Reason = value;
                _flagReason = true;
            }
        }
        private string _Reason;
        private bool _flagReason;

        /// <summary>
        /// Returns false as Reason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReason()
        {
            return _flagReason;
        }
        /// <summary>
        /// The related transaction ID on the receiving card.
        /// </summary>
        /// <value>The related transaction ID on the receiving card.</value>
        [DataMember(Name = "related_transaction_id", EmitDefaultValue = true)]
        public string RelatedTransactionId
        {
            get{ return _RelatedTransactionId;}
            set
            {
                _RelatedTransactionId = value;
                _flagRelatedTransactionId = true;
            }
        }
        private string _RelatedTransactionId;
        private bool _flagRelatedTransactionId;

        /// <summary>
        /// Returns false as RelatedTransactionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedTransactionId()
        {
            return _flagRelatedTransactionId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the transaction was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the transaction was created. The value is shown in the ISO 8601 format.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = true)]
        public VoucherTransactionDetails Details
        {
            get{ return _Details;}
            set
            {
                _Details = value;
                _flagDetails = true;
            }
        }
        private VoucherTransactionDetails _Details;
        private bool _flagDetails;

        /// <summary>
        /// Returns false as Details should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDetails()
        {
            return _flagDetails;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VoucherTransaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  RelatedTransactionId: ").Append(RelatedTransactionId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
