/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Contains details about the pending point entry.
    /// </summary>
    [DataContract(Name = "LoyaltyPendingPoints")]
    public partial class LoyaltyPendingPoints : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyPendingPoints" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LoyaltyPendingPoints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyPendingPoints" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the pending point entry, assigned by Voucherify..</param>
        /// <param name="voucherId">Unique identifier of the loyalty card, assigned by Voucherify..</param>
        /// <param name="campaignId">Unique campaign identifier, assigned by Voucherify..</param>
        /// <param name="customerId">Unique customer identifier, assigned by Voucherify..</param>
        /// <param name="orderId">Unique order identifier, assigned by Voucherify..</param>
        /// <param name="points">Number of points in the pending state..</param>
        /// <param name="activatesAt">Date when the pending points are activated and added to the customer&#39;s loyalty card..</param>
        /// <param name="details">details (required).</param>
        /// <param name="createdAt">Timestamp representing the date and time when the pending point entry was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the pending point entry was modified. The value is shown in the ISO 8601 format..</param>
        public LoyaltyPendingPoints(string id = default(string), string voucherId = default(string), string campaignId = default(string), string customerId = default(string), string orderId = default(string), int? points = default(int?), DateTime? activatesAt = default(DateTime?), LoyaltyPendingPointsDetails details = default(LoyaltyPendingPointsDetails), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?))
        {
            // to ensure "details" is required (not null)
            if (details == null)
            {
                throw new ArgumentNullException("details is a required property for LoyaltyPendingPoints and cannot be null");
            }
            this._Details = details;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._VoucherId = voucherId;
            if (this.VoucherId != null)
            {
                this._flagVoucherId = true;
            }
            this._CampaignId = campaignId;
            if (this.CampaignId != null)
            {
                this._flagCampaignId = true;
            }
            this._CustomerId = customerId;
            if (this.CustomerId != null)
            {
                this._flagCustomerId = true;
            }
            this._OrderId = orderId;
            if (this.OrderId != null)
            {
                this._flagOrderId = true;
            }
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._ActivatesAt = activatesAt;
            if (this.ActivatesAt != null)
            {
                this._flagActivatesAt = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Unique identifier of the pending point entry, assigned by Voucherify.
        /// </summary>
        /// <value>Unique identifier of the pending point entry, assigned by Voucherify.</value>
        /*
        <example>lopp_0ffd593d5ad207ba6b</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Unique identifier of the loyalty card, assigned by Voucherify.
        /// </summary>
        /// <value>Unique identifier of the loyalty card, assigned by Voucherify.</value>
        /*
        <example>v_abCdEfghI1JKLMNPqRS2Tu3vWXyza4bc</example>
        */
        [DataMember(Name = "voucher_id", EmitDefaultValue = true)]
        public string VoucherId
        {
            get{ return _VoucherId;}
            set
            {
                _VoucherId = value;
                _flagVoucherId = true;
            }
        }
        private string _VoucherId;
        private bool _flagVoucherId;

        /// <summary>
        /// Returns false as VoucherId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucherId()
        {
            return _flagVoucherId;
        }
        /// <summary>
        /// Unique campaign identifier, assigned by Voucherify.
        /// </summary>
        /// <value>Unique campaign identifier, assigned by Voucherify.</value>
        /*
        <example>camp_weer1c3p5ZgktqfW56RfoNaG</example>
        */
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId
        {
            get{ return _CampaignId;}
            set
            {
                _CampaignId = value;
                _flagCampaignId = true;
            }
        }
        private string _CampaignId;
        private bool _flagCampaignId;

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return _flagCampaignId;
        }
        /// <summary>
        /// Unique customer identifier, assigned by Voucherify.
        /// </summary>
        /// <value>Unique customer identifier, assigned by Voucherify.</value>
        /*
        <example>cust_IdgAFZxYwwHctOk9ppZMu319</example>
        */
        [DataMember(Name = "customer_id", EmitDefaultValue = true)]
        public string CustomerId
        {
            get{ return _CustomerId;}
            set
            {
                _CustomerId = value;
                _flagCustomerId = true;
            }
        }
        private string _CustomerId;
        private bool _flagCustomerId;

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return _flagCustomerId;
        }
        /// <summary>
        /// Unique order identifier, assigned by Voucherify.
        /// </summary>
        /// <value>Unique order identifier, assigned by Voucherify.</value>
        /*
        <example>ord_0ffc0fa65f15d2df17</example>
        */
        [DataMember(Name = "order_id", EmitDefaultValue = true)]
        public string OrderId
        {
            get{ return _OrderId;}
            set
            {
                _OrderId = value;
                _flagOrderId = true;
            }
        }
        private string _OrderId;
        private bool _flagOrderId;

        /// <summary>
        /// Returns false as OrderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderId()
        {
            return _flagOrderId;
        }
        /// <summary>
        /// Number of points in the pending state.
        /// </summary>
        /// <value>Number of points in the pending state.</value>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Date when the pending points are activated and added to the customer&#39;s loyalty card.
        /// </summary>
        /// <value>Date when the pending points are activated and added to the customer&#39;s loyalty card.</value>
        [JsonConverter(typeof(OpenAPIDateConverter))]
        [DataMember(Name = "activates_at", EmitDefaultValue = true)]
        public DateTime? ActivatesAt
        {
            get{ return _ActivatesAt;}
            set
            {
                _ActivatesAt = value;
                _flagActivatesAt = true;
            }
        }
        private DateTime? _ActivatesAt;
        private bool _flagActivatesAt;

        /// <summary>
        /// Returns false as ActivatesAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActivatesAt()
        {
            return _flagActivatesAt;
        }
        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", IsRequired = true, EmitDefaultValue = true)]
        public LoyaltyPendingPointsDetails Details
        {
            get{ return _Details;}
            set
            {
                _Details = value;
                _flagDetails = true;
            }
        }
        private LoyaltyPendingPointsDetails _Details;
        private bool _flagDetails;

        /// <summary>
        /// Returns false as Details should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDetails()
        {
            return _flagDetails;
        }
        /// <summary>
        /// Timestamp representing the date and time when the pending point entry was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the pending point entry was created. The value is shown in the ISO 8601 format.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the pending point entry was modified. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the pending point entry was modified. The value is shown in the ISO 8601 format.</value>
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyPendingPoints {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VoucherId: ").Append(VoucherId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  ActivatesAt: ").Append(ActivatesAt).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
