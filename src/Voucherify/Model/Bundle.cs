/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Determines how the bundle conditions are met by the customer&#39;s order items. The items in the order meet the bundle condition in the following way: SKU, then product, then collection.
    /// </summary>
    [DataContract(Name = "Bundle")]
    public partial class Bundle : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bundle" /> class.
        /// </summary>
        /// <param name="quantity">Determines how many bundles are qualified. If there are missing bundle products, the value is &#x60;0&#x60;. If the bundle is qualified, the value is &#x60;1&#x60;..</param>
        /// <param name="identified">Determines products from the customer&#39;s order items that meet bundle conditions. SKUs meet the conditions for their product that is used in the bundle. Returns only the products and their quantity that meet the bundle..</param>
        /// <param name="missing">Determines products, SKUs, or collections from the bundle that are missing in the customer&#39;s order items. Determines also the missing quantity. For collections, this means that order items do not include a sufficient number of items that belong to the collection..</param>
        public Bundle(int? quantity = default(int?), List<BundleIdentifiedItem> identified = default(List<BundleIdentifiedItem>), List<BundleMissingItem> missing = default(List<BundleMissingItem>))
        {
            this._Quantity = quantity;
            if (this.Quantity != null)
            {
                this._flagQuantity = true;
            }
            this._Identified = identified;
            if (this.Identified != null)
            {
                this._flagIdentified = true;
            }
            this._Missing = missing;
            if (this.Missing != null)
            {
                this._flagMissing = true;
            }
        }

        /// <summary>
        /// Determines how many bundles are qualified. If there are missing bundle products, the value is &#x60;0&#x60;. If the bundle is qualified, the value is &#x60;1&#x60;.
        /// </summary>
        /// <value>Determines how many bundles are qualified. If there are missing bundle products, the value is &#x60;0&#x60;. If the bundle is qualified, the value is &#x60;1&#x60;.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public int? Quantity
        {
            get{ return _Quantity;}
            set
            {
                _Quantity = value;
                _flagQuantity = true;
            }
        }
        private int? _Quantity;
        private bool _flagQuantity;

        /// <summary>
        /// Returns false as Quantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantity()
        {
            return _flagQuantity;
        }
        /// <summary>
        /// Determines products from the customer&#39;s order items that meet bundle conditions. SKUs meet the conditions for their product that is used in the bundle. Returns only the products and their quantity that meet the bundle.
        /// </summary>
        /// <value>Determines products from the customer&#39;s order items that meet bundle conditions. SKUs meet the conditions for their product that is used in the bundle. Returns only the products and their quantity that meet the bundle.</value>
        [DataMember(Name = "identified", EmitDefaultValue = true)]
        public List<BundleIdentifiedItem> Identified
        {
            get{ return _Identified;}
            set
            {
                _Identified = value;
                _flagIdentified = true;
            }
        }
        private List<BundleIdentifiedItem> _Identified;
        private bool _flagIdentified;

        /// <summary>
        /// Returns false as Identified should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIdentified()
        {
            return _flagIdentified;
        }
        /// <summary>
        /// Determines products, SKUs, or collections from the bundle that are missing in the customer&#39;s order items. Determines also the missing quantity. For collections, this means that order items do not include a sufficient number of items that belong to the collection.
        /// </summary>
        /// <value>Determines products, SKUs, or collections from the bundle that are missing in the customer&#39;s order items. Determines also the missing quantity. For collections, this means that order items do not include a sufficient number of items that belong to the collection.</value>
        [DataMember(Name = "missing", EmitDefaultValue = true)]
        public List<BundleMissingItem> Missing
        {
            get{ return _Missing;}
            set
            {
                _Missing = value;
                _flagMissing = true;
            }
        }
        private List<BundleMissingItem> _Missing;
        private bool _flagMissing;

        /// <summary>
        /// Returns false as Missing should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMissing()
        {
            return _flagMissing;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Bundle {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Identified: ").Append(Identified).Append("\n");
            sb.Append("  Missing: ").Append(Missing).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Quantity (int?) minimum
            if (this.Quantity < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 0.", new [] { "Quantity" });
            }

            yield break;
        }
    }

}
