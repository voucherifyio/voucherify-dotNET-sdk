/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// MemberActivityDataTransactionDetailsSourceVoucher
    /// </summary>
    [DataContract(Name = "MemberActivityDataTransactionDetailsSourceVoucher")]
    public partial class MemberActivityDataTransactionDetailsSourceVoucher : IValidatableObject
    {
        /// <summary>
        /// Type of the voucher.
        /// </summary>
        /// <value>Type of the voucher.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DISCOUNTVOUCHER for value: DISCOUNT_VOUCHER
            /// </summary>
            [EnumMember(Value = "DISCOUNT_VOUCHER")]
            DISCOUNTVOUCHER = 1,

            /// <summary>
            /// Enum LOYALTYCARD for value: LOYALTY_CARD
            /// </summary>
            [EnumMember(Value = "LOYALTY_CARD")]
            LOYALTYCARD = 2,

            /// <summary>
            /// Enum GIFTVOUCHER for value: GIFT_VOUCHER
            /// </summary>
            [EnumMember(Value = "GIFT_VOUCHER")]
            GIFTVOUCHER = 3
        }


        /// <summary>
        /// Type of the voucher.
        /// </summary>
        /// <value>Type of the voucher.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// The type of the object represented by JSON.
        /// </summary>
        /// <value>The type of the object represented by JSON.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Voucher for value: voucher
            /// </summary>
            [EnumMember(Value = "voucher")]
            Voucher = 1
        }


        /// <summary>
        /// The type of the object represented by JSON.
        /// </summary>
        /// <value>The type of the object represented by JSON.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberActivityDataTransactionDetailsSourceVoucher" /> class.
        /// </summary>
        /// <param name="id">A unique identifier that represents the voucher assigned by Voucherify..</param>
        /// <param name="code">Voucher code..</param>
        /// <param name="gift">gift.</param>
        /// <param name="discount">discount.</param>
        /// <param name="loyaltyCard">loyaltyCard.</param>
        /// <param name="type">Type of the voucher..</param>
        /// <param name="campaign">Campaign name..</param>
        /// <param name="campaignId">Campaign unique ID..</param>
        /// <param name="isReferralCode">Flag indicating whether this voucher is a referral code; &#x60;true&#x60; for campaign type &#x60;REFERRAL_PROGRAM&#x60;..</param>
        /// <param name="holderId">Unique customer identifier of the redeemable holder. It equals to the customer ID assigned by Voucherify..</param>
        /// <param name="referrerId">Unique identifier of the referrer assigned by Voucherify..</param>
        /// <param name="categoryId">Unique identifier of the category that this voucher belongs to..</param>
        /// <param name="categories">Contains details about the category..</param>
        /// <param name="active">Shows whether the voucher is on or off. &#x60;true&#x60; indicates an *active* voucher and &#x60;false&#x60; indicates an *inactive* voucher..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the order was created in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the order was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="redemption">redemption.</param>
        /// <param name="startDate">Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date..</param>
        /// <param name="expirationDate">Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date..</param>
        /// <param name="metadata">A set of custom key/value pairs that you can attach to a voucher. The metadata object stores all custom attributes assigned to the voucher..</param>
        /// <param name="varObject">The type of the object represented by JSON. (default to ObjectEnum.Voucher).</param>
        public MemberActivityDataTransactionDetailsSourceVoucher(string id = default(string), string code = default(string), MemberActivityDataTransactionDetailsSourceVoucherGift gift = default(MemberActivityDataTransactionDetailsSourceVoucherGift), Discount discount = default(Discount), MemberActivityDataTransactionDetailsSourceVoucherLoyaltyCard loyaltyCard = default(MemberActivityDataTransactionDetailsSourceVoucherLoyaltyCard), TypeEnum? type = default(TypeEnum?), string campaign = default(string), string campaignId = default(string), bool? isReferralCode = default(bool?), string holderId = default(string), string referrerId = default(string), string categoryId = default(string), List<Category> categories = default(List<Category>), bool? active = default(bool?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), MemberActivityDataTransactionDetailsSourceVoucherRedemption redemption = default(MemberActivityDataTransactionDetailsSourceVoucherRedemption), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? expirationDate = default(DateTimeOffset?), Object metadata = default(Object), ObjectEnum? varObject = ObjectEnum.Voucher)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Code = code;
            if (this.Code != null)
            {
                this._flagCode = true;
            }
            this._Gift = gift;
            if (this.Gift != null)
            {
                this._flagGift = true;
            }
            this._Discount = discount;
            if (this.Discount != null)
            {
                this._flagDiscount = true;
            }
            this._LoyaltyCard = loyaltyCard;
            if (this.LoyaltyCard != null)
            {
                this._flagLoyaltyCard = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Campaign = campaign;
            if (this.Campaign != null)
            {
                this._flagCampaign = true;
            }
            this._CampaignId = campaignId;
            if (this.CampaignId != null)
            {
                this._flagCampaignId = true;
            }
            this._IsReferralCode = isReferralCode;
            if (this.IsReferralCode != null)
            {
                this._flagIsReferralCode = true;
            }
            this._HolderId = holderId;
            if (this.HolderId != null)
            {
                this._flagHolderId = true;
            }
            this._ReferrerId = referrerId;
            if (this.ReferrerId != null)
            {
                this._flagReferrerId = true;
            }
            this._CategoryId = categoryId;
            if (this.CategoryId != null)
            {
                this._flagCategoryId = true;
            }
            this._Categories = categories;
            if (this.Categories != null)
            {
                this._flagCategories = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._Redemption = redemption;
            if (this.Redemption != null)
            {
                this._flagRedemption = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
        }

        /// <summary>
        /// A unique identifier that represents the voucher assigned by Voucherify.
        /// </summary>
        /// <value>A unique identifier that represents the voucher assigned by Voucherify.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Voucher code.
        /// </summary>
        /// <value>Voucher code.</value>
        [DataMember(Name = "code", EmitDefaultValue = true)]
        public string Code
        {
            get{ return _Code;}
            set
            {
                _Code = value;
                _flagCode = true;
            }
        }
        private string _Code;
        private bool _flagCode;

        /// <summary>
        /// Returns false as Code should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCode()
        {
            return _flagCode;
        }
        /// <summary>
        /// Gets or Sets Gift
        /// </summary>
        [DataMember(Name = "gift", EmitDefaultValue = true)]
        public MemberActivityDataTransactionDetailsSourceVoucherGift Gift
        {
            get{ return _Gift;}
            set
            {
                _Gift = value;
                _flagGift = true;
            }
        }
        private MemberActivityDataTransactionDetailsSourceVoucherGift _Gift;
        private bool _flagGift;

        /// <summary>
        /// Returns false as Gift should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGift()
        {
            return _flagGift;
        }
        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "discount", EmitDefaultValue = true)]
        public Discount Discount
        {
            get{ return _Discount;}
            set
            {
                _Discount = value;
                _flagDiscount = true;
            }
        }
        private Discount _Discount;
        private bool _flagDiscount;

        /// <summary>
        /// Returns false as Discount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscount()
        {
            return _flagDiscount;
        }
        /// <summary>
        /// Gets or Sets LoyaltyCard
        /// </summary>
        [DataMember(Name = "loyalty_card", EmitDefaultValue = true)]
        public MemberActivityDataTransactionDetailsSourceVoucherLoyaltyCard LoyaltyCard
        {
            get{ return _LoyaltyCard;}
            set
            {
                _LoyaltyCard = value;
                _flagLoyaltyCard = true;
            }
        }
        private MemberActivityDataTransactionDetailsSourceVoucherLoyaltyCard _LoyaltyCard;
        private bool _flagLoyaltyCard;

        /// <summary>
        /// Returns false as LoyaltyCard should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyCard()
        {
            return _flagLoyaltyCard;
        }
        /// <summary>
        /// Campaign name.
        /// </summary>
        /// <value>Campaign name.</value>
        [DataMember(Name = "campaign", EmitDefaultValue = true)]
        public string Campaign
        {
            get{ return _Campaign;}
            set
            {
                _Campaign = value;
                _flagCampaign = true;
            }
        }
        private string _Campaign;
        private bool _flagCampaign;

        /// <summary>
        /// Returns false as Campaign should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaign()
        {
            return _flagCampaign;
        }
        /// <summary>
        /// Campaign unique ID.
        /// </summary>
        /// <value>Campaign unique ID.</value>
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId
        {
            get{ return _CampaignId;}
            set
            {
                _CampaignId = value;
                _flagCampaignId = true;
            }
        }
        private string _CampaignId;
        private bool _flagCampaignId;

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return _flagCampaignId;
        }
        /// <summary>
        /// Flag indicating whether this voucher is a referral code; &#x60;true&#x60; for campaign type &#x60;REFERRAL_PROGRAM&#x60;.
        /// </summary>
        /// <value>Flag indicating whether this voucher is a referral code; &#x60;true&#x60; for campaign type &#x60;REFERRAL_PROGRAM&#x60;.</value>
        [DataMember(Name = "is_referral_code", EmitDefaultValue = true)]
        public bool? IsReferralCode
        {
            get{ return _IsReferralCode;}
            set
            {
                _IsReferralCode = value;
                _flagIsReferralCode = true;
            }
        }
        private bool? _IsReferralCode;
        private bool _flagIsReferralCode;

        /// <summary>
        /// Returns false as IsReferralCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsReferralCode()
        {
            return _flagIsReferralCode;
        }
        /// <summary>
        /// Unique customer identifier of the redeemable holder. It equals to the customer ID assigned by Voucherify.
        /// </summary>
        /// <value>Unique customer identifier of the redeemable holder. It equals to the customer ID assigned by Voucherify.</value>
        /*
        <example>cust_eWgXlBBiY6THFRJwX45Iakv4</example>
        */
        [DataMember(Name = "holder_id", EmitDefaultValue = true)]
        public string HolderId
        {
            get{ return _HolderId;}
            set
            {
                _HolderId = value;
                _flagHolderId = true;
            }
        }
        private string _HolderId;
        private bool _flagHolderId;

        /// <summary>
        /// Returns false as HolderId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHolderId()
        {
            return _flagHolderId;
        }
        /// <summary>
        /// Unique identifier of the referrer assigned by Voucherify.
        /// </summary>
        /// <value>Unique identifier of the referrer assigned by Voucherify.</value>
        /*
        <example>cust_nM4jqPiaXUvQdVSA6vTRUnix</example>
        */
        [DataMember(Name = "referrer_id", EmitDefaultValue = true)]
        public string ReferrerId
        {
            get{ return _ReferrerId;}
            set
            {
                _ReferrerId = value;
                _flagReferrerId = true;
            }
        }
        private string _ReferrerId;
        private bool _flagReferrerId;

        /// <summary>
        /// Returns false as ReferrerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferrerId()
        {
            return _flagReferrerId;
        }
        /// <summary>
        /// Unique identifier of the category that this voucher belongs to.
        /// </summary>
        /// <value>Unique identifier of the category that this voucher belongs to.</value>
        /*
        <example>cat_0b6152ce12414820dc</example>
        */
        [DataMember(Name = "category_id", EmitDefaultValue = true)]
        public string CategoryId
        {
            get{ return _CategoryId;}
            set
            {
                _CategoryId = value;
                _flagCategoryId = true;
            }
        }
        private string _CategoryId;
        private bool _flagCategoryId;

        /// <summary>
        /// Returns false as CategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryId()
        {
            return _flagCategoryId;
        }
        /// <summary>
        /// Contains details about the category.
        /// </summary>
        /// <value>Contains details about the category.</value>
        [DataMember(Name = "categories", EmitDefaultValue = true)]
        public List<Category> Categories
        {
            get{ return _Categories;}
            set
            {
                _Categories = value;
                _flagCategories = true;
            }
        }
        private List<Category> _Categories;
        private bool _flagCategories;

        /// <summary>
        /// Returns false as Categories should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategories()
        {
            return _flagCategories;
        }
        /// <summary>
        /// Shows whether the voucher is on or off. &#x60;true&#x60; indicates an *active* voucher and &#x60;false&#x60; indicates an *inactive* voucher.
        /// </summary>
        /// <value>Shows whether the voucher is on or off. &#x60;true&#x60; indicates an *active* voucher and &#x60;false&#x60; indicates an *inactive* voucher.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool? _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Timestamp representing the date and time when the order was created in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the order was created in the ISO 8601 format.</value>
        /*
        <example>2021-12-22T10:13:06.487Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the order was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the order was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2024-01-01T11:11:11.111Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Gets or Sets Redemption
        /// </summary>
        [DataMember(Name = "redemption", EmitDefaultValue = true)]
        public MemberActivityDataTransactionDetailsSourceVoucherRedemption Redemption
        {
            get{ return _Redemption;}
            set
            {
                _Redemption = value;
                _flagRedemption = true;
            }
        }
        private MemberActivityDataTransactionDetailsSourceVoucherRedemption _Redemption;
        private bool _flagRedemption;

        /// <summary>
        /// Returns false as Redemption should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemption()
        {
            return _flagRedemption;
        }
        /// <summary>
        /// Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date.
        /// </summary>
        /// <value>Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date.</value>
        /*
        <example>2021-12-01T00:00Z</example>
        */
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTimeOffset? StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private DateTimeOffset? _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date.
        /// </summary>
        /// <value>Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date.</value>
        /*
        <example>2021-12-31T00:00Z</example>
        */
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// A set of custom key/value pairs that you can attach to a voucher. The metadata object stores all custom attributes assigned to the voucher.
        /// </summary>
        /// <value>A set of custom key/value pairs that you can attach to a voucher. The metadata object stores all custom attributes assigned to the voucher.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemberActivityDataTransactionDetailsSourceVoucher {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Gift: ").Append(Gift).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  LoyaltyCard: ").Append(LoyaltyCard).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Campaign: ").Append(Campaign).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  IsReferralCode: ").Append(IsReferralCode).Append("\n");
            sb.Append("  HolderId: ").Append(HolderId).Append("\n");
            sb.Append("  ReferrerId: ").Append(ReferrerId).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Redemption: ").Append(Redemption).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
