/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ManagementProjectsGetResponseBody
    /// </summary>
    [DataContract(Name = "ManagementProjectsGetResponseBody")]
    public partial class ManagementProjectsGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// The webhook version used in the project.
        /// </summary>
        /// <value>The webhook version used in the project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebhookVersionEnum
        {
            /// <summary>
            /// Enum V20240101 for value: v2024-01-01
            /// </summary>
            [EnumMember(Value = "v2024-01-01")]
            V20240101 = 1
        }


        /// <summary>
        /// The webhook version used in the project.
        /// </summary>
        /// <value>The webhook version used in the project.</value>

        [DataMember(Name = "webhook_version", EmitDefaultValue = true)]
        public WebhookVersionEnum? WebhookVersion
        {
            get{ return _WebhookVersion;}
            set
            {
                _WebhookVersion = value;
                _flagWebhookVersion = true;
            }
        }
        private WebhookVersionEnum? _WebhookVersion;
        private bool _flagWebhookVersion;

        /// <summary>
        /// Returns false as WebhookVersion should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebhookVersion()
        {
            return _flagWebhookVersion;
        }
        /// <summary>
        /// The API version used in the project. Currently, the default and only value is &#x60;v2018-08-01&#x60;.
        /// </summary>
        /// <value>The API version used in the project. Currently, the default and only value is &#x60;v2018-08-01&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ApiVersionEnum
        {
            /// <summary>
            /// Enum V20180801 for value: v2018-08-01
            /// </summary>
            [EnumMember(Value = "v2018-08-01")]
            V20180801 = 1
        }


        /// <summary>
        /// The API version used in the project. Currently, the default and only value is &#x60;v2018-08-01&#x60;.
        /// </summary>
        /// <value>The API version used in the project. Currently, the default and only value is &#x60;v2018-08-01&#x60;.</value>

        [DataMember(Name = "api_version", EmitDefaultValue = true)]
        public ApiVersionEnum? ApiVersion
        {
            get{ return _ApiVersion;}
            set
            {
                _ApiVersion = value;
                _flagApiVersion = true;
            }
        }
        private ApiVersionEnum? _ApiVersion;
        private bool _flagApiVersion;

        /// <summary>
        /// Returns false as ApiVersion should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApiVersion()
        {
            return _flagApiVersion;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsGetResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the project..</param>
        /// <param name="name">The name of the project..</param>
        /// <param name="description">A user-defined description of the project, e.g. its purpose, scope, region..</param>
        /// <param name="timezone">The time zone in which the project is established. It can be in the GMT format or in accordance with IANA time zone database..</param>
        /// <param name="currency">The currency used in the project. It is equal to a 3-letter ISO 4217 code..</param>
        /// <param name="dialCode">The country dial code for the project. It is equal to an ITU country code..</param>
        /// <param name="webhookVersion">The webhook version used in the project. (default to WebhookVersionEnum.V20240101).</param>
        /// <param name="clientTrustedDomains">An array of URL addresses that allow client requests..</param>
        /// <param name="clientRedeemEnabled">Enables client-side redemption..</param>
        /// <param name="clientPublishEnabled">Enables client-side publication..</param>
        /// <param name="clientListVouchersEnabled">Enables client-side listing of vouchers..</param>
        /// <param name="clientCreateCustomerEnabled">Enables client-side creation of customers..</param>
        /// <param name="clientLoyaltyEventsEnabled">Enables client-side events for loyalty and referral programs..</param>
        /// <param name="clientSetVoucherExpirationDateEnabled">Enables client-side setting of voucher expiration date..</param>
        /// <param name="webhooksCalloutNotifications">webhooksCalloutNotifications.</param>
        /// <param name="apiUsageNotifications">apiUsageNotifications.</param>
        /// <param name="clusterId">The identifier of the cluster where the project will be created..</param>
        /// <param name="caseSensitiveCodes">Determines if the vouchers in the project will be: - case sensitive - if &#x60;true&#x60;, &#x60;C0dE-cfV&#x60; is **not** equal to &#x60;c0de-cfv&#x60;), - case insensitive - if &#x60;false&#x60;, &#x60;C0dE-cfV&#x60; is equal to &#x60;c0de-cfv&#x60;..</param>
        /// <param name="apiVersion">The API version used in the project. Currently, the default and only value is &#x60;v2018-08-01&#x60;. (default to ApiVersionEnum.V20180801).</param>
        /// <param name="isSandbox">Determines if the project is a sandbox project..</param>
        /// <param name="webhookToken">Webhook token used for authentication..</param>
        /// <param name="defaultCodeConfig">defaultCodeConfig.</param>
        /// <param name="limits">limits.</param>
        public ManagementProjectsGetResponseBody(string id = default(string), string name = default(string), string description = default(string), string timezone = default(string), string currency = default(string), string dialCode = default(string), WebhookVersionEnum? webhookVersion = WebhookVersionEnum.V20240101, List<string> clientTrustedDomains = default(List<string>), bool? clientRedeemEnabled = default(bool?), bool? clientPublishEnabled = default(bool?), bool? clientListVouchersEnabled = default(bool?), bool? clientCreateCustomerEnabled = default(bool?), bool? clientLoyaltyEventsEnabled = default(bool?), bool? clientSetVoucherExpirationDateEnabled = default(bool?), ManagementProjectsGetResponseBodyWebhooksCalloutNotifications webhooksCalloutNotifications = default(ManagementProjectsGetResponseBodyWebhooksCalloutNotifications), ManagementProjectsGetResponseBodyApiUsageNotifications apiUsageNotifications = default(ManagementProjectsGetResponseBodyApiUsageNotifications), string clusterId = default(string), bool? caseSensitiveCodes = default(bool?), ApiVersionEnum? apiVersion = ApiVersionEnum.V20180801, bool? isSandbox = default(bool?), string webhookToken = default(string), ManagementProjectsGetResponseBodyDefaultCodeConfig defaultCodeConfig = default(ManagementProjectsGetResponseBodyDefaultCodeConfig), ManagementProjectsGetResponseBodyLimits limits = default(ManagementProjectsGetResponseBodyLimits))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Timezone = timezone;
            if (this.Timezone != null)
            {
                this._flagTimezone = true;
            }
            this._Currency = currency;
            if (this.Currency != null)
            {
                this._flagCurrency = true;
            }
            this._DialCode = dialCode;
            if (this.DialCode != null)
            {
                this._flagDialCode = true;
            }
            this._ClientTrustedDomains = clientTrustedDomains;
            if (this.ClientTrustedDomains != null)
            {
                this._flagClientTrustedDomains = true;
            }
            this._ClientRedeemEnabled = clientRedeemEnabled;
            if (this.ClientRedeemEnabled != null)
            {
                this._flagClientRedeemEnabled = true;
            }
            this._ClientPublishEnabled = clientPublishEnabled;
            if (this.ClientPublishEnabled != null)
            {
                this._flagClientPublishEnabled = true;
            }
            this._ClientListVouchersEnabled = clientListVouchersEnabled;
            if (this.ClientListVouchersEnabled != null)
            {
                this._flagClientListVouchersEnabled = true;
            }
            this._ClientCreateCustomerEnabled = clientCreateCustomerEnabled;
            if (this.ClientCreateCustomerEnabled != null)
            {
                this._flagClientCreateCustomerEnabled = true;
            }
            this._ClientLoyaltyEventsEnabled = clientLoyaltyEventsEnabled;
            if (this.ClientLoyaltyEventsEnabled != null)
            {
                this._flagClientLoyaltyEventsEnabled = true;
            }
            this._ClientSetVoucherExpirationDateEnabled = clientSetVoucherExpirationDateEnabled;
            if (this.ClientSetVoucherExpirationDateEnabled != null)
            {
                this._flagClientSetVoucherExpirationDateEnabled = true;
            }
            this._WebhooksCalloutNotifications = webhooksCalloutNotifications;
            if (this.WebhooksCalloutNotifications != null)
            {
                this._flagWebhooksCalloutNotifications = true;
            }
            this._ApiUsageNotifications = apiUsageNotifications;
            if (this.ApiUsageNotifications != null)
            {
                this._flagApiUsageNotifications = true;
            }
            this._ClusterId = clusterId;
            if (this.ClusterId != null)
            {
                this._flagClusterId = true;
            }
            this._CaseSensitiveCodes = caseSensitiveCodes;
            if (this.CaseSensitiveCodes != null)
            {
                this._flagCaseSensitiveCodes = true;
            }
            this._IsSandbox = isSandbox;
            if (this.IsSandbox != null)
            {
                this._flagIsSandbox = true;
            }
            this._WebhookToken = webhookToken;
            if (this.WebhookToken != null)
            {
                this._flagWebhookToken = true;
            }
            this._DefaultCodeConfig = defaultCodeConfig;
            if (this.DefaultCodeConfig != null)
            {
                this._flagDefaultCodeConfig = true;
            }
            this._Limits = limits;
            if (this.Limits != null)
            {
                this._flagLimits = true;
            }
        }

        /// <summary>
        /// Unique identifier of the project.
        /// </summary>
        /// <value>Unique identifier of the project.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The name of the project.
        /// </summary>
        /// <value>The name of the project.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// A user-defined description of the project, e.g. its purpose, scope, region.
        /// </summary>
        /// <value>A user-defined description of the project, e.g. its purpose, scope, region.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// The time zone in which the project is established. It can be in the GMT format or in accordance with IANA time zone database.
        /// </summary>
        /// <value>The time zone in which the project is established. It can be in the GMT format or in accordance with IANA time zone database.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = true)]
        public string Timezone
        {
            get{ return _Timezone;}
            set
            {
                _Timezone = value;
                _flagTimezone = true;
            }
        }
        private string _Timezone;
        private bool _flagTimezone;

        /// <summary>
        /// Returns false as Timezone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimezone()
        {
            return _flagTimezone;
        }
        /// <summary>
        /// The currency used in the project. It is equal to a 3-letter ISO 4217 code.
        /// </summary>
        /// <value>The currency used in the project. It is equal to a 3-letter ISO 4217 code.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency
        {
            get{ return _Currency;}
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }
        private string _Currency;
        private bool _flagCurrency;

        /// <summary>
        /// Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }
        /// <summary>
        /// The country dial code for the project. It is equal to an ITU country code.
        /// </summary>
        /// <value>The country dial code for the project. It is equal to an ITU country code.</value>
        [DataMember(Name = "dial_code", EmitDefaultValue = true)]
        public string DialCode
        {
            get{ return _DialCode;}
            set
            {
                _DialCode = value;
                _flagDialCode = true;
            }
        }
        private string _DialCode;
        private bool _flagDialCode;

        /// <summary>
        /// Returns false as DialCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDialCode()
        {
            return _flagDialCode;
        }
        /// <summary>
        /// An array of URL addresses that allow client requests.
        /// </summary>
        /// <value>An array of URL addresses that allow client requests.</value>
        [DataMember(Name = "client_trusted_domains", EmitDefaultValue = true)]
        public List<string> ClientTrustedDomains
        {
            get{ return _ClientTrustedDomains;}
            set
            {
                _ClientTrustedDomains = value;
                _flagClientTrustedDomains = true;
            }
        }
        private List<string> _ClientTrustedDomains;
        private bool _flagClientTrustedDomains;

        /// <summary>
        /// Returns false as ClientTrustedDomains should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientTrustedDomains()
        {
            return _flagClientTrustedDomains;
        }
        /// <summary>
        /// Enables client-side redemption.
        /// </summary>
        /// <value>Enables client-side redemption.</value>
        [DataMember(Name = "client_redeem_enabled", EmitDefaultValue = true)]
        public bool? ClientRedeemEnabled
        {
            get{ return _ClientRedeemEnabled;}
            set
            {
                _ClientRedeemEnabled = value;
                _flagClientRedeemEnabled = true;
            }
        }
        private bool? _ClientRedeemEnabled;
        private bool _flagClientRedeemEnabled;

        /// <summary>
        /// Returns false as ClientRedeemEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientRedeemEnabled()
        {
            return _flagClientRedeemEnabled;
        }
        /// <summary>
        /// Enables client-side publication.
        /// </summary>
        /// <value>Enables client-side publication.</value>
        [DataMember(Name = "client_publish_enabled", EmitDefaultValue = true)]
        public bool? ClientPublishEnabled
        {
            get{ return _ClientPublishEnabled;}
            set
            {
                _ClientPublishEnabled = value;
                _flagClientPublishEnabled = true;
            }
        }
        private bool? _ClientPublishEnabled;
        private bool _flagClientPublishEnabled;

        /// <summary>
        /// Returns false as ClientPublishEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientPublishEnabled()
        {
            return _flagClientPublishEnabled;
        }
        /// <summary>
        /// Enables client-side listing of vouchers.
        /// </summary>
        /// <value>Enables client-side listing of vouchers.</value>
        [DataMember(Name = "client_list_vouchers_enabled", EmitDefaultValue = true)]
        public bool? ClientListVouchersEnabled
        {
            get{ return _ClientListVouchersEnabled;}
            set
            {
                _ClientListVouchersEnabled = value;
                _flagClientListVouchersEnabled = true;
            }
        }
        private bool? _ClientListVouchersEnabled;
        private bool _flagClientListVouchersEnabled;

        /// <summary>
        /// Returns false as ClientListVouchersEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientListVouchersEnabled()
        {
            return _flagClientListVouchersEnabled;
        }
        /// <summary>
        /// Enables client-side creation of customers.
        /// </summary>
        /// <value>Enables client-side creation of customers.</value>
        [DataMember(Name = "client_create_customer_enabled", EmitDefaultValue = true)]
        public bool? ClientCreateCustomerEnabled
        {
            get{ return _ClientCreateCustomerEnabled;}
            set
            {
                _ClientCreateCustomerEnabled = value;
                _flagClientCreateCustomerEnabled = true;
            }
        }
        private bool? _ClientCreateCustomerEnabled;
        private bool _flagClientCreateCustomerEnabled;

        /// <summary>
        /// Returns false as ClientCreateCustomerEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientCreateCustomerEnabled()
        {
            return _flagClientCreateCustomerEnabled;
        }
        /// <summary>
        /// Enables client-side events for loyalty and referral programs.
        /// </summary>
        /// <value>Enables client-side events for loyalty and referral programs.</value>
        [DataMember(Name = "client_loyalty_events_enabled", EmitDefaultValue = true)]
        public bool? ClientLoyaltyEventsEnabled
        {
            get{ return _ClientLoyaltyEventsEnabled;}
            set
            {
                _ClientLoyaltyEventsEnabled = value;
                _flagClientLoyaltyEventsEnabled = true;
            }
        }
        private bool? _ClientLoyaltyEventsEnabled;
        private bool _flagClientLoyaltyEventsEnabled;

        /// <summary>
        /// Returns false as ClientLoyaltyEventsEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientLoyaltyEventsEnabled()
        {
            return _flagClientLoyaltyEventsEnabled;
        }
        /// <summary>
        /// Enables client-side setting of voucher expiration date.
        /// </summary>
        /// <value>Enables client-side setting of voucher expiration date.</value>
        [DataMember(Name = "client_set_voucher_expiration_date_enabled", EmitDefaultValue = true)]
        public bool? ClientSetVoucherExpirationDateEnabled
        {
            get{ return _ClientSetVoucherExpirationDateEnabled;}
            set
            {
                _ClientSetVoucherExpirationDateEnabled = value;
                _flagClientSetVoucherExpirationDateEnabled = true;
            }
        }
        private bool? _ClientSetVoucherExpirationDateEnabled;
        private bool _flagClientSetVoucherExpirationDateEnabled;

        /// <summary>
        /// Returns false as ClientSetVoucherExpirationDateEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientSetVoucherExpirationDateEnabled()
        {
            return _flagClientSetVoucherExpirationDateEnabled;
        }
        /// <summary>
        /// Gets or Sets WebhooksCalloutNotifications
        /// </summary>
        [DataMember(Name = "webhooks_callout_notifications", EmitDefaultValue = true)]
        public ManagementProjectsGetResponseBodyWebhooksCalloutNotifications WebhooksCalloutNotifications
        {
            get{ return _WebhooksCalloutNotifications;}
            set
            {
                _WebhooksCalloutNotifications = value;
                _flagWebhooksCalloutNotifications = true;
            }
        }
        private ManagementProjectsGetResponseBodyWebhooksCalloutNotifications _WebhooksCalloutNotifications;
        private bool _flagWebhooksCalloutNotifications;

        /// <summary>
        /// Returns false as WebhooksCalloutNotifications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebhooksCalloutNotifications()
        {
            return _flagWebhooksCalloutNotifications;
        }
        /// <summary>
        /// Gets or Sets ApiUsageNotifications
        /// </summary>
        [DataMember(Name = "api_usage_notifications", EmitDefaultValue = true)]
        public ManagementProjectsGetResponseBodyApiUsageNotifications ApiUsageNotifications
        {
            get{ return _ApiUsageNotifications;}
            set
            {
                _ApiUsageNotifications = value;
                _flagApiUsageNotifications = true;
            }
        }
        private ManagementProjectsGetResponseBodyApiUsageNotifications _ApiUsageNotifications;
        private bool _flagApiUsageNotifications;

        /// <summary>
        /// Returns false as ApiUsageNotifications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApiUsageNotifications()
        {
            return _flagApiUsageNotifications;
        }
        /// <summary>
        /// The identifier of the cluster where the project will be created.
        /// </summary>
        /// <value>The identifier of the cluster where the project will be created.</value>
        [DataMember(Name = "cluster_id", EmitDefaultValue = true)]
        public string ClusterId
        {
            get{ return _ClusterId;}
            set
            {
                _ClusterId = value;
                _flagClusterId = true;
            }
        }
        private string _ClusterId;
        private bool _flagClusterId;

        /// <summary>
        /// Returns false as ClusterId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClusterId()
        {
            return _flagClusterId;
        }
        /// <summary>
        /// Determines if the vouchers in the project will be: - case sensitive - if &#x60;true&#x60;, &#x60;C0dE-cfV&#x60; is **not** equal to &#x60;c0de-cfv&#x60;), - case insensitive - if &#x60;false&#x60;, &#x60;C0dE-cfV&#x60; is equal to &#x60;c0de-cfv&#x60;.
        /// </summary>
        /// <value>Determines if the vouchers in the project will be: - case sensitive - if &#x60;true&#x60;, &#x60;C0dE-cfV&#x60; is **not** equal to &#x60;c0de-cfv&#x60;), - case insensitive - if &#x60;false&#x60;, &#x60;C0dE-cfV&#x60; is equal to &#x60;c0de-cfv&#x60;.</value>
        [DataMember(Name = "case_sensitive_codes", EmitDefaultValue = true)]
        public bool? CaseSensitiveCodes
        {
            get{ return _CaseSensitiveCodes;}
            set
            {
                _CaseSensitiveCodes = value;
                _flagCaseSensitiveCodes = true;
            }
        }
        private bool? _CaseSensitiveCodes;
        private bool _flagCaseSensitiveCodes;

        /// <summary>
        /// Returns false as CaseSensitiveCodes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCaseSensitiveCodes()
        {
            return _flagCaseSensitiveCodes;
        }
        /// <summary>
        /// Determines if the project is a sandbox project.
        /// </summary>
        /// <value>Determines if the project is a sandbox project.</value>
        [DataMember(Name = "is_sandbox", EmitDefaultValue = true)]
        public bool? IsSandbox
        {
            get{ return _IsSandbox;}
            set
            {
                _IsSandbox = value;
                _flagIsSandbox = true;
            }
        }
        private bool? _IsSandbox;
        private bool _flagIsSandbox;

        /// <summary>
        /// Returns false as IsSandbox should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSandbox()
        {
            return _flagIsSandbox;
        }
        /// <summary>
        /// Webhook token used for authentication.
        /// </summary>
        /// <value>Webhook token used for authentication.</value>
        [DataMember(Name = "webhook_token", EmitDefaultValue = true)]
        public string WebhookToken
        {
            get{ return _WebhookToken;}
            set
            {
                _WebhookToken = value;
                _flagWebhookToken = true;
            }
        }
        private string _WebhookToken;
        private bool _flagWebhookToken;

        /// <summary>
        /// Returns false as WebhookToken should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebhookToken()
        {
            return _flagWebhookToken;
        }
        /// <summary>
        /// Gets or Sets DefaultCodeConfig
        /// </summary>
        [DataMember(Name = "default_code_config", EmitDefaultValue = true)]
        public ManagementProjectsGetResponseBodyDefaultCodeConfig DefaultCodeConfig
        {
            get{ return _DefaultCodeConfig;}
            set
            {
                _DefaultCodeConfig = value;
                _flagDefaultCodeConfig = true;
            }
        }
        private ManagementProjectsGetResponseBodyDefaultCodeConfig _DefaultCodeConfig;
        private bool _flagDefaultCodeConfig;

        /// <summary>
        /// Returns false as DefaultCodeConfig should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultCodeConfig()
        {
            return _flagDefaultCodeConfig;
        }
        /// <summary>
        /// Gets or Sets Limits
        /// </summary>
        [DataMember(Name = "limits", EmitDefaultValue = true)]
        public ManagementProjectsGetResponseBodyLimits Limits
        {
            get{ return _Limits;}
            set
            {
                _Limits = value;
                _flagLimits = true;
            }
        }
        private ManagementProjectsGetResponseBodyLimits _Limits;
        private bool _flagLimits;

        /// <summary>
        /// Returns false as Limits should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLimits()
        {
            return _flagLimits;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsGetResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DialCode: ").Append(DialCode).Append("\n");
            sb.Append("  WebhookVersion: ").Append(WebhookVersion).Append("\n");
            sb.Append("  ClientTrustedDomains: ").Append(ClientTrustedDomains).Append("\n");
            sb.Append("  ClientRedeemEnabled: ").Append(ClientRedeemEnabled).Append("\n");
            sb.Append("  ClientPublishEnabled: ").Append(ClientPublishEnabled).Append("\n");
            sb.Append("  ClientListVouchersEnabled: ").Append(ClientListVouchersEnabled).Append("\n");
            sb.Append("  ClientCreateCustomerEnabled: ").Append(ClientCreateCustomerEnabled).Append("\n");
            sb.Append("  ClientLoyaltyEventsEnabled: ").Append(ClientLoyaltyEventsEnabled).Append("\n");
            sb.Append("  ClientSetVoucherExpirationDateEnabled: ").Append(ClientSetVoucherExpirationDateEnabled).Append("\n");
            sb.Append("  WebhooksCalloutNotifications: ").Append(WebhooksCalloutNotifications).Append("\n");
            sb.Append("  ApiUsageNotifications: ").Append(ApiUsageNotifications).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  CaseSensitiveCodes: ").Append(CaseSensitiveCodes).Append("\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  IsSandbox: ").Append(IsSandbox).Append("\n");
            sb.Append("  WebhookToken: ").Append(WebhookToken).Append("\n");
            sb.Append("  DefaultCodeConfig: ").Append(DefaultCodeConfig).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
