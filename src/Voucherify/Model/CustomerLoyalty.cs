/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// CustomerLoyalty
    /// </summary>
    [DataContract(Name = "CustomerLoyalty")]
    public partial class CustomerLoyalty : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerLoyalty" /> class.
        /// </summary>
        /// <param name="points">Customer&#39;s loyalty points minus expired for all loyalty cards which the customer has..</param>
        /// <param name="referredCustomers">Total number of customers referred by the customer..</param>
        /// <param name="campaigns">Contains campaigns with details about point balances and how many customers were referred by the customer..</param>
        public CustomerLoyalty(int? points = default(int?), int? referredCustomers = default(int?), Dictionary<string, CustomerLoyaltyCampaignsEntryValue> campaigns = default(Dictionary<string, CustomerLoyaltyCampaignsEntryValue>))
        {
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._ReferredCustomers = referredCustomers;
            if (this.ReferredCustomers != null)
            {
                this._flagReferredCustomers = true;
            }
            this._Campaigns = campaigns;
            if (this.Campaigns != null)
            {
                this._flagCampaigns = true;
            }
        }

        /// <summary>
        /// Customer&#39;s loyalty points minus expired for all loyalty cards which the customer has.
        /// </summary>
        /// <value>Customer&#39;s loyalty points minus expired for all loyalty cards which the customer has.</value>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Total number of customers referred by the customer.
        /// </summary>
        /// <value>Total number of customers referred by the customer.</value>
        [DataMember(Name = "referred_customers", EmitDefaultValue = true)]
        public int? ReferredCustomers
        {
            get{ return _ReferredCustomers;}
            set
            {
                _ReferredCustomers = value;
                _flagReferredCustomers = true;
            }
        }
        private int? _ReferredCustomers;
        private bool _flagReferredCustomers;

        /// <summary>
        /// Returns false as ReferredCustomers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferredCustomers()
        {
            return _flagReferredCustomers;
        }
        /// <summary>
        /// Contains campaigns with details about point balances and how many customers were referred by the customer.
        /// </summary>
        /// <value>Contains campaigns with details about point balances and how many customers were referred by the customer.</value>
        [DataMember(Name = "campaigns", EmitDefaultValue = true)]
        public Dictionary<string, CustomerLoyaltyCampaignsEntryValue> Campaigns
        {
            get{ return _Campaigns;}
            set
            {
                _Campaigns = value;
                _flagCampaigns = true;
            }
        }
        private Dictionary<string, CustomerLoyaltyCampaignsEntryValue> _Campaigns;
        private bool _flagCampaigns;

        /// <summary>
        /// Returns false as Campaigns should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaigns()
        {
            return _flagCampaigns;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerLoyalty {\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  ReferredCustomers: ").Append(ReferredCustomers).Append("\n");
            sb.Append("  Campaigns: ").Append(Campaigns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
