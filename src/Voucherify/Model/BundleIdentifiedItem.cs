/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Determines a product from the customer&#39;s order items that meets bundle conditions.
    /// </summary>
    [DataContract(Name = "BundleIdentifiedItem")]
    public partial class BundleIdentifiedItem : IValidatableObject
    {
        /// <summary>
        /// Determines the type of the object that meets the bundle condition.
        /// </summary>
        /// <value>Determines the type of the object that meets the bundle condition.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Product for value: product
            /// </summary>
            [EnumMember(Value = "product")]
            Product = 1,

            /// <summary>
            /// Enum Sku for value: sku
            /// </summary>
            [EnumMember(Value = "sku")]
            Sku = 2
        }


        /// <summary>
        /// Determines the type of the object that meets the bundle condition.
        /// </summary>
        /// <value>Determines the type of the object that meets the bundle condition.</value>

        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleIdentifiedItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BundleIdentifiedItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleIdentifiedItem" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the product or SKU that meets the bundle condition. This is an ID assigned by Voucherify. (required).</param>
        /// <param name="varObject">Determines the type of the object that meets the bundle condition. (required).</param>
        /// <param name="itemIndex">Number assigned to the order line item in accordance with the order sent in the request. It starts with &#x60;0&#x60; for the first order line item in the request. (required).</param>
        /// <param name="itemQuantity">Quantity of items that meet the bundle conditions. If the quantity in the order is higher than the quantity required by the bundle, this returns only the number that meets the bundle. For example, if the bundle requires &#x60;5&#x60; coffees, but the order includes &#x60;10&#x60; coffees, &#x60;item_quantity&#x60; returns &#x60;5&#x60;. (required).</param>
        public BundleIdentifiedItem(string id = default(string), ObjectEnum varObject = default(ObjectEnum), int itemIndex = default(int), int itemQuantity = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for BundleIdentifiedItem and cannot be null");
            }
            this._Id = id;
            this._Object = varObject;
            this._ItemIndex = itemIndex;
            this._ItemQuantity = itemQuantity;
        }

        /// <summary>
        /// Unique identifier of the product or SKU that meets the bundle condition. This is an ID assigned by Voucherify.
        /// </summary>
        /// <value>Unique identifier of the product or SKU that meets the bundle condition. This is an ID assigned by Voucherify.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Number assigned to the order line item in accordance with the order sent in the request. It starts with &#x60;0&#x60; for the first order line item in the request.
        /// </summary>
        /// <value>Number assigned to the order line item in accordance with the order sent in the request. It starts with &#x60;0&#x60; for the first order line item in the request.</value>
        [DataMember(Name = "item_index", IsRequired = true, EmitDefaultValue = true)]
        public int ItemIndex
        {
            get{ return _ItemIndex;}
            set
            {
                _ItemIndex = value;
                _flagItemIndex = true;
            }
        }
        private int _ItemIndex;
        private bool _flagItemIndex;

        /// <summary>
        /// Returns false as ItemIndex should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemIndex()
        {
            return _flagItemIndex;
        }
        /// <summary>
        /// Quantity of items that meet the bundle conditions. If the quantity in the order is higher than the quantity required by the bundle, this returns only the number that meets the bundle. For example, if the bundle requires &#x60;5&#x60; coffees, but the order includes &#x60;10&#x60; coffees, &#x60;item_quantity&#x60; returns &#x60;5&#x60;.
        /// </summary>
        /// <value>Quantity of items that meet the bundle conditions. If the quantity in the order is higher than the quantity required by the bundle, this returns only the number that meets the bundle. For example, if the bundle requires &#x60;5&#x60; coffees, but the order includes &#x60;10&#x60; coffees, &#x60;item_quantity&#x60; returns &#x60;5&#x60;.</value>
        [DataMember(Name = "item_quantity", IsRequired = true, EmitDefaultValue = true)]
        public int ItemQuantity
        {
            get{ return _ItemQuantity;}
            set
            {
                _ItemQuantity = value;
                _flagItemQuantity = true;
            }
        }
        private int _ItemQuantity;
        private bool _flagItemQuantity;

        /// <summary>
        /// Returns false as ItemQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemQuantity()
        {
            return _flagItemQuantity;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BundleIdentifiedItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  ItemIndex: ").Append(ItemIndex).Append("\n");
            sb.Append("  ItemQuantity: ").Append(ItemQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ItemIndex (int) minimum
            if (this.ItemIndex < (int)0)
            {
                yield return new ValidationResult("Invalid value for ItemIndex, must be a value greater than or equal to 0.", new [] { "ItemIndex" });
            }

            yield break;
        }
    }

}
