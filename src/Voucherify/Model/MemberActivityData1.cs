/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Contains details about the event. The objects that are returned in the data attribute differ based on the context of the event type.
    /// </summary>
    [DataContract(Name = "MemberActivityData_1")]
    public partial class MemberActivityData1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberActivityData1" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="eventSource">eventSource.</param>
        public MemberActivityData1(MemberActivityData data = default(MemberActivityData), EventSource eventSource = default(EventSource))
        {
            this._Data = data;
            if (this.Data != null)
            {
                this._flagData = true;
            }
            this._EventSource = eventSource;
            if (this.EventSource != null)
            {
                this._flagEventSource = true;
            }
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public MemberActivityData Data
        {
            get{ return _Data;}
            set
            {
                _Data = value;
                _flagData = true;
            }
        }
        private MemberActivityData _Data;
        private bool _flagData;

        /// <summary>
        /// Returns false as Data should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeData()
        {
            return _flagData;
        }
        /// <summary>
        /// Gets or Sets EventSource
        /// </summary>
        [DataMember(Name = "event_source", EmitDefaultValue = true)]
        public EventSource EventSource
        {
            get{ return _EventSource;}
            set
            {
                _EventSource = value;
                _flagEventSource = true;
            }
        }
        private EventSource _EventSource;
        private bool _flagEventSource;

        /// <summary>
        /// Returns false as EventSource should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEventSource()
        {
            return _flagEventSource;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemberActivityData1 {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  EventSource: ").Append(EventSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
