/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request body schema for &#x60;vouchers/metadata/async&#x60;.
    /// </summary>
    [DataContract(Name = "VouchersMetadataUpdateInBulkRequestBody")]
    public partial class VouchersMetadataUpdateInBulkRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersMetadataUpdateInBulkRequestBody" /> class.
        /// </summary>
        /// <param name="codes">An array of voucher codes..</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format..</param>
        public VouchersMetadataUpdateInBulkRequestBody(List<string> codes = default(List<string>), Object metadata = default(Object))
        {
            this._Codes = codes;
            if (this.Codes != null)
            {
                this._flagCodes = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
        }

        /// <summary>
        /// An array of voucher codes.
        /// </summary>
        /// <value>An array of voucher codes.</value>
        [DataMember(Name = "codes", EmitDefaultValue = true)]
        public List<string> Codes
        {
            get{ return _Codes;}
            set
            {
                _Codes = value;
                _flagCodes = true;
            }
        }
        private List<string> _Codes;
        private bool _flagCodes;

        /// <summary>
        /// Returns false as Codes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCodes()
        {
            return _flagCodes;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.</value>
        /*
        <example>{&quot;lang&quot;:&quot;en&quot;,&quot;authorized_internally&quot;:true}</example>
        */
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VouchersMetadataUpdateInBulkRequestBody {\n");
            sb.Append("  Codes: ").Append(Codes).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
