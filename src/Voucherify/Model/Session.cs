/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Session
    /// </summary>
    [DataContract(Name = "Session")]
    public partial class Session : IValidatableObject
    {
        /// <summary>
        /// This parameter is required to establish a new session.
        /// </summary>
        /// <value>This parameter is required to establish a new session.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum LOCK for value: LOCK
            /// </summary>
            [EnumMember(Value = "LOCK")]
            LOCK = 1
        }


        /// <summary>
        /// This parameter is required to establish a new session.
        /// </summary>
        /// <value>This parameter is required to establish a new session.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Defines the type of unit in which the session time is counted.
        /// </summary>
        /// <value>Defines the type of unit in which the session time is counted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TtlUnitEnum
        {
            /// <summary>
            /// Enum DAYS for value: DAYS
            /// </summary>
            [EnumMember(Value = "DAYS")]
            DAYS = 1,

            /// <summary>
            /// Enum HOURS for value: HOURS
            /// </summary>
            [EnumMember(Value = "HOURS")]
            HOURS = 2,

            /// <summary>
            /// Enum MICROSECONDS for value: MICROSECONDS
            /// </summary>
            [EnumMember(Value = "MICROSECONDS")]
            MICROSECONDS = 3,

            /// <summary>
            /// Enum MILLISECONDS for value: MILLISECONDS
            /// </summary>
            [EnumMember(Value = "MILLISECONDS")]
            MILLISECONDS = 4,

            /// <summary>
            /// Enum MINUTES for value: MINUTES
            /// </summary>
            [EnumMember(Value = "MINUTES")]
            MINUTES = 5,

            /// <summary>
            /// Enum NANOSECONDS for value: NANOSECONDS
            /// </summary>
            [EnumMember(Value = "NANOSECONDS")]
            NANOSECONDS = 6,

            /// <summary>
            /// Enum SECONDS for value: SECONDS
            /// </summary>
            [EnumMember(Value = "SECONDS")]
            SECONDS = 7
        }


        /// <summary>
        /// Defines the type of unit in which the session time is counted.
        /// </summary>
        /// <value>Defines the type of unit in which the session time is counted.</value>

        [DataMember(Name = "ttl_unit", EmitDefaultValue = true)]
        public TtlUnitEnum? TtlUnit
        {
            get{ return _TtlUnit;}
            set
            {
                _TtlUnit = value;
                _flagTtlUnit = true;
            }
        }
        private TtlUnitEnum? _TtlUnit;
        private bool _flagTtlUnit;

        /// <summary>
        /// Returns false as TtlUnit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTtlUnit()
        {
            return _flagTtlUnit;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Session" /> class.
        /// </summary>
        /// <param name="key">The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated..</param>
        /// <param name="type">This parameter is required to establish a new session..</param>
        /// <param name="ttl">Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter..</param>
        /// <param name="ttlUnit">Defines the type of unit in which the session time is counted..</param>
        public Session(string key = default(string), TypeEnum? type = default(TypeEnum?), decimal? ttl = default(decimal?), TtlUnitEnum? ttlUnit = default(TtlUnitEnum?))
        {
            this._Key = key;
            if (this.Key != null)
            {
                this._flagKey = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Ttl = ttl;
            if (this.Ttl != null)
            {
                this._flagTtl = true;
            }
            this._TtlUnit = ttlUnit;
            if (this.TtlUnit != null)
            {
                this._flagTtlUnit = true;
            }
        }

        /// <summary>
        /// The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.
        /// </summary>
        /// <value>The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.</value>
        [DataMember(Name = "key", EmitDefaultValue = true)]
        public string Key
        {
            get{ return _Key;}
            set
            {
                _Key = value;
                _flagKey = true;
            }
        }
        private string _Key;
        private bool _flagKey;

        /// <summary>
        /// Returns false as Key should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeKey()
        {
            return _flagKey;
        }
        /// <summary>
        /// Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter.
        /// </summary>
        /// <value>Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter.</value>
        [DataMember(Name = "ttl", EmitDefaultValue = true)]
        public decimal? Ttl
        {
            get{ return _Ttl;}
            set
            {
                _Ttl = value;
                _flagTtl = true;
            }
        }
        private decimal? _Ttl;
        private bool _flagTtl;

        /// <summary>
        /// Returns false as Ttl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTtl()
        {
            return _flagTtl;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Session {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  TtlUnit: ").Append(TtlUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
