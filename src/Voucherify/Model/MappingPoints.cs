/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// MappingPoints
    /// </summary>
    [DataContract(Name = "MappingPoints")]
    public partial class MappingPoints : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MULTIPLY for value: MULTIPLY
            /// </summary>
            [EnumMember(Value = "MULTIPLY")]
            MULTIPLY = 1,

            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 2
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MappingPoints" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="multiplier">Multiplication factor used to multiply the points to obtain the mapped points..</param>
        /// <param name="points">Fixed number of points to be applied..</param>
        public MappingPoints(TypeEnum? type = default(TypeEnum?), decimal? multiplier = default(decimal?), int? points = default(int?))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Multiplier = multiplier;
            if (this.Multiplier != null)
            {
                this._flagMultiplier = true;
            }
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
        }

        /// <summary>
        /// Multiplication factor used to multiply the points to obtain the mapped points.
        /// </summary>
        /// <value>Multiplication factor used to multiply the points to obtain the mapped points.</value>
        [DataMember(Name = "multiplier", EmitDefaultValue = true)]
        public decimal? Multiplier
        {
            get{ return _Multiplier;}
            set
            {
                _Multiplier = value;
                _flagMultiplier = true;
            }
        }
        private decimal? _Multiplier;
        private bool _flagMultiplier;

        /// <summary>
        /// Returns false as Multiplier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMultiplier()
        {
            return _flagMultiplier;
        }
        /// <summary>
        /// Fixed number of points to be applied.
        /// </summary>
        /// <value>Fixed number of points to be applied.</value>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MappingPoints {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
