/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **POST** &#x60;v1/loyalties/members/{memberId}/transactions/export&#x60; and for **POST** &#x60;v1/loyalties/{campaignId}/members/{memberId}/transactions/export&#x60;.
    /// </summary>
    [DataContract(Name = "LoyaltiesMembersTransactionsExportCreateResponseBody")]
    public partial class LoyaltiesMembersTransactionsExportCreateResponseBody : IValidatableObject
    {
        /// <summary>
        /// The type of object being represented. This object stores information about the export.
        /// </summary>
        /// <value>The type of object being represented. This object stores information about the export.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Export for value: export
            /// </summary>
            [EnumMember(Value = "export")]
            Export = 1
        }


        /// <summary>
        /// The type of object being represented. This object stores information about the export.
        /// </summary>
        /// <value>The type of object being represented. This object stores information about the export.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.
        /// </summary>
        /// <value>Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum SCHEDULED for value: SCHEDULED
            /// </summary>
            [EnumMember(Value = "SCHEDULED")]
            SCHEDULED = 1
        }


        /// <summary>
        /// Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.
        /// </summary>
        /// <value>Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.</value>

        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private StatusEnum? _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// The type of object to be exported.
        /// </summary>
        /// <value>The type of object to be exported.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExportedObjectEnum
        {
            /// <summary>
            /// Enum VoucherTransactions for value: voucher_transactions
            /// </summary>
            [EnumMember(Value = "voucher_transactions")]
            VoucherTransactions = 1
        }


        /// <summary>
        /// The type of object to be exported.
        /// </summary>
        /// <value>The type of object to be exported.</value>

        [DataMember(Name = "exported_object", EmitDefaultValue = true)]
        public ExportedObjectEnum? ExportedObject
        {
            get{ return _ExportedObject;}
            set
            {
                _ExportedObject = value;
                _flagExportedObject = true;
            }
        }
        private ExportedObjectEnum? _ExportedObject;
        private bool _flagExportedObject;

        /// <summary>
        /// Returns false as ExportedObject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExportedObject()
        {
            return _flagExportedObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesMembersTransactionsExportCreateResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique export ID..</param>
        /// <param name="varObject">The type of object being represented. This object stores information about the export. (default to ObjectEnum.Export).</param>
        /// <param name="createdAt">Timestamp representing the date and time when the export was scheduled in ISO 8601 format..</param>
        /// <param name="status">Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated. (default to StatusEnum.SCHEDULED).</param>
        /// <param name="channel">The channel through which the export was triggered..</param>
        /// <param name="result">Contains the URL of the CSV file..</param>
        /// <param name="userId">Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE..</param>
        /// <param name="exportedObject">The type of object to be exported. (default to ExportedObjectEnum.VoucherTransactions).</param>
        /// <param name="parameters">parameters.</param>
        public LoyaltiesMembersTransactionsExportCreateResponseBody(string id = default(string), ObjectEnum? varObject = ObjectEnum.Export, DateTimeOffset? createdAt = default(DateTimeOffset?), StatusEnum? status = StatusEnum.SCHEDULED, string channel = default(string), Object result = default(Object), string userId = default(string), ExportedObjectEnum? exportedObject = ExportedObjectEnum.VoucherTransactions, LoyaltiesMembersTransactionsExportCreateResponseBodyParameters parameters = default(LoyaltiesMembersTransactionsExportCreateResponseBodyParameters))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._Channel = channel;
            if (this.Channel != null)
            {
                this._flagChannel = true;
            }
            this._Result = result;
            if (this.Result != null)
            {
                this._flagResult = true;
            }
            this._UserId = userId;
            if (this.UserId != null)
            {
                this._flagUserId = true;
            }
            this._Parameters = parameters;
            if (this.Parameters != null)
            {
                this._flagParameters = true;
            }
        }

        /// <summary>
        /// Unique export ID.
        /// </summary>
        /// <value>Unique export ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the export was scheduled in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the export was scheduled in ISO 8601 format.</value>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// The channel through which the export was triggered.
        /// </summary>
        /// <value>The channel through which the export was triggered.</value>
        [DataMember(Name = "channel", EmitDefaultValue = true)]
        public string Channel
        {
            get{ return _Channel;}
            set
            {
                _Channel = value;
                _flagChannel = true;
            }
        }
        private string _Channel;
        private bool _flagChannel;

        /// <summary>
        /// Returns false as Channel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChannel()
        {
            return _flagChannel;
        }
        /// <summary>
        /// Contains the URL of the CSV file.
        /// </summary>
        /// <value>Contains the URL of the CSV file.</value>
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public Object Result
        {
            get{ return _Result;}
            set
            {
                _Result = value;
                _flagResult = true;
            }
        }
        private Object _Result;
        private bool _flagResult;

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return _flagResult;
        }
        /// <summary>
        /// Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE.
        /// </summary>
        /// <value>Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the channel value is WEBSITE.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public string UserId
        {
            get{ return _UserId;}
            set
            {
                _UserId = value;
                _flagUserId = true;
            }
        }
        private string _UserId;
        private bool _flagUserId;

        /// <summary>
        /// Returns false as UserId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUserId()
        {
            return _flagUserId;
        }
        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public LoyaltiesMembersTransactionsExportCreateResponseBodyParameters Parameters
        {
            get{ return _Parameters;}
            set
            {
                _Parameters = value;
                _flagParameters = true;
            }
        }
        private LoyaltiesMembersTransactionsExportCreateResponseBodyParameters _Parameters;
        private bool _flagParameters;

        /// <summary>
        /// Returns false as Parameters should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParameters()
        {
            return _flagParameters;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltiesMembersTransactionsExportCreateResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ExportedObject: ").Append(ExportedObject).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
