/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// LoyaltyCampaign
    /// </summary>
    [DataContract(Name = "LoyaltyCampaign")]
    public partial class LoyaltyCampaign : IValidatableObject
    {
        /// <summary>
        /// Type of campaign.
        /// </summary>
        /// <value>Type of campaign.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CampaignTypeEnum
        {
            /// <summary>
            /// Enum LOYALTYPROGRAM for value: LOYALTY_PROGRAM
            /// </summary>
            [EnumMember(Value = "LOYALTY_PROGRAM")]
            LOYALTYPROGRAM = 1
        }


        /// <summary>
        /// Type of campaign.
        /// </summary>
        /// <value>Type of campaign.</value>

        [DataMember(Name = "campaign_type", EmitDefaultValue = true)]
        public CampaignTypeEnum? CampaignType
        {
            get{ return _CampaignType;}
            set
            {
                _CampaignType = value;
                _flagCampaignType = true;
            }
        }
        private CampaignTypeEnum? _CampaignType;
        private bool _flagCampaignType;

        /// <summary>
        /// Returns false as CampaignType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignType()
        {
            return _flagCampaignType;
        }
        /// <summary>
        /// Defines whether the campaign can be updated with new vouchers after campaign creation.      - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria     -  &#x60;STATIC&#x60;: vouchers need to be manually published
        /// </summary>
        /// <value>Defines whether the campaign can be updated with new vouchers after campaign creation.      - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria     -  &#x60;STATIC&#x60;: vouchers need to be manually published</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AUTOUPDATE for value: AUTO_UPDATE
            /// </summary>
            [EnumMember(Value = "AUTO_UPDATE")]
            AUTOUPDATE = 1,

            /// <summary>
            /// Enum STATIC for value: STATIC
            /// </summary>
            [EnumMember(Value = "STATIC")]
            STATIC = 2
        }


        /// <summary>
        /// Defines whether the campaign can be updated with new vouchers after campaign creation.      - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria     -  &#x60;STATIC&#x60;: vouchers need to be manually published
        /// </summary>
        /// <value>Defines whether the campaign can be updated with new vouchers after campaign creation.      - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria     -  &#x60;STATIC&#x60;: vouchers need to be manually published</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Defines ValidityDayOfWeek
        /// </summary>
        public enum ValidityDayOfWeekEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6
        }

        /// <summary>
        /// Indicates the status of the campaign creation.
        /// </summary>
        /// <value>Indicates the status of the campaign creation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreationStatusEnum
        {
            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 1,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 4,

            /// <summary>
            /// Enum MODIFYING for value: MODIFYING
            /// </summary>
            [EnumMember(Value = "MODIFYING")]
            MODIFYING = 5
        }


        /// <summary>
        /// Indicates the status of the campaign creation.
        /// </summary>
        /// <value>Indicates the status of the campaign creation.</value>

        [DataMember(Name = "creation_status", EmitDefaultValue = true)]
        public CreationStatusEnum? CreationStatus
        {
            get{ return _CreationStatus;}
            set
            {
                _CreationStatus = value;
                _flagCreationStatus = true;
            }
        }
        private CreationStatusEnum? _CreationStatus;
        private bool _flagCreationStatus;

        /// <summary>
        /// Returns false as CreationStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreationStatus()
        {
            return _flagCreationStatus;
        }
        /// <summary>
        /// Indicates the status of the campaign&#39;s voucher generation.
        /// </summary>
        /// <value>Indicates the status of the campaign&#39;s voucher generation.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VouchersGenerationStatusEnum
        {
            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 1,

            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 2,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 3,

            /// <summary>
            /// Enum DRAFT for value: DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFT = 4,

            /// <summary>
            /// Enum MODIFYING for value: MODIFYING
            /// </summary>
            [EnumMember(Value = "MODIFYING")]
            MODIFYING = 5
        }


        /// <summary>
        /// Indicates the status of the campaign&#39;s voucher generation.
        /// </summary>
        /// <value>Indicates the status of the campaign&#39;s voucher generation.</value>

        [DataMember(Name = "vouchers_generation_status", EmitDefaultValue = true)]
        public VouchersGenerationStatusEnum? VouchersGenerationStatus
        {
            get{ return _VouchersGenerationStatus;}
            set
            {
                _VouchersGenerationStatus = value;
                _flagVouchersGenerationStatus = true;
            }
        }
        private VouchersGenerationStatusEnum? _VouchersGenerationStatus;
        private bool _flagVouchersGenerationStatus;

        /// <summary>
        /// Returns false as VouchersGenerationStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVouchersGenerationStatus()
        {
            return _flagVouchersGenerationStatus;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyCampaign" /> class.
        /// </summary>
        /// <param name="id">Unique campaign ID, assigned by Voucherify..</param>
        /// <param name="name">Campaign name..</param>
        /// <param name="description">An optional field to keep any extra textual information about the campaign such as a campaign description and details..</param>
        /// <param name="campaignType">Type of campaign..</param>
        /// <param name="type">Defines whether the campaign can be updated with new vouchers after campaign creation.      - &#x60;AUTO_UPDATE&#x60;: the campaign is dynamic, i.e. vouchers will generate based on set criteria     -  &#x60;STATIC&#x60;: vouchers need to be manually published.</param>
        /// <param name="voucher">voucher.</param>
        /// <param name="autoJoin">Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled..</param>
        /// <param name="joinOnce">If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once..</param>
        /// <param name="useVoucherMetadataSchema">Flag indicating whether the campaign is to use the voucher&#39;s metadata schema instead of the campaign metadata schema..</param>
        /// <param name="validityTimeframe">validityTimeframe.</param>
        /// <param name="validityDayOfWeek">Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday.</param>
        /// <param name="validityHours">validityHours.</param>
        /// <param name="activityDurationAfterPublishing">Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a &#x60;duration&#x60; of &#x60;P24D&#x60; will be valid for a duration of 24 days..</param>
        /// <param name="vouchersCount">Total number of unique vouchers in campaign..</param>
        /// <param name="startDate">Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. .</param>
        /// <param name="expirationDate">Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date..</param>
        /// <param name="active">A flag to toggle the campaign on or off. You can disable a campaign even though it&#39;s within the active period defined by the &#x60;start_date&#x60; and &#x60;expiration_date&#x60;.    - &#x60;true&#x60; indicates an *active* campaign - &#x60;false&#x60; indicates an *inactive* campaign.</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the campaign was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the campaign was last updated in ISO 8601 format..</param>
        /// <param name="category">Unique category name..</param>
        /// <param name="creationStatus">Indicates the status of the campaign creation..</param>
        /// <param name="vouchersGenerationStatus">Indicates the status of the campaign&#39;s voucher generation..</param>
        /// <param name="varReadonly">Indicates whether the campaign can be only read by a restricted user in the Areas and Stores enterprise feature. It is returned only to restricted users; this field is not returned for users with other roles..</param>
        /// <param name="varProtected">Indicates whether the resource can be deleted..</param>
        /// <param name="categoryId">Unique category ID that this campaign belongs to..</param>
        /// <param name="categories">Contains details about the category..</param>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about the campaign..</param>
        /// <param name="loyaltyTiersExpiration">loyaltyTiersExpiration.</param>
        /// <param name="validationRulesAssignments">validationRulesAssignments.</param>
        /// <param name="accessSettingsAssignments">accessSettingsAssignments.</param>
        public LoyaltyCampaign(string id = default(string), string name = default(string), string description = default(string), CampaignTypeEnum? campaignType = default(CampaignTypeEnum?), TypeEnum? type = default(TypeEnum?), LoyaltyCampaignVoucher voucher = default(LoyaltyCampaignVoucher), bool? autoJoin = default(bool?), bool? joinOnce = default(bool?), bool? useVoucherMetadataSchema = default(bool?), ValidityTimeframe validityTimeframe = default(ValidityTimeframe), List<ValidityDayOfWeekEnum> validityDayOfWeek = default(List<ValidityDayOfWeekEnum>), ValidityHours validityHours = default(ValidityHours), string activityDurationAfterPublishing = default(string), int? vouchersCount = default(int?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? expirationDate = default(DateTimeOffset?), bool? active = default(bool?), Object metadata = default(Object), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), string category = default(string), CreationStatusEnum? creationStatus = default(CreationStatusEnum?), VouchersGenerationStatusEnum? vouchersGenerationStatus = default(VouchersGenerationStatusEnum?), bool? varReadonly = default(bool?), bool? varProtected = default(bool?), string categoryId = default(string), List<Category> categories = default(List<Category>), string varObject = default(string), LoyaltyTiersExpirationAll loyaltyTiersExpiration = default(LoyaltyTiersExpirationAll), ValidationRulesAssignmentsList validationRulesAssignments = default(ValidationRulesAssignmentsList), AccessSettingsCampaignAssignmentsList accessSettingsAssignments = default(AccessSettingsCampaignAssignmentsList))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._CampaignType = campaignType;
            if (this.CampaignType != null)
            {
                this._flagCampaignType = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Voucher = voucher;
            if (this.Voucher != null)
            {
                this._flagVoucher = true;
            }
            this._AutoJoin = autoJoin;
            if (this.AutoJoin != null)
            {
                this._flagAutoJoin = true;
            }
            this._JoinOnce = joinOnce;
            if (this.JoinOnce != null)
            {
                this._flagJoinOnce = true;
            }
            this._UseVoucherMetadataSchema = useVoucherMetadataSchema;
            if (this.UseVoucherMetadataSchema != null)
            {
                this._flagUseVoucherMetadataSchema = true;
            }
            this._ValidityTimeframe = validityTimeframe;
            if (this.ValidityTimeframe != null)
            {
                this._flagValidityTimeframe = true;
            }
            this._ValidityDayOfWeek = validityDayOfWeek;
            if (this.ValidityDayOfWeek != null)
            {
                this._flagValidityDayOfWeek = true;
            }
            this._ValidityHours = validityHours;
            if (this.ValidityHours != null)
            {
                this._flagValidityHours = true;
            }
            this._ActivityDurationAfterPublishing = activityDurationAfterPublishing;
            if (this.ActivityDurationAfterPublishing != null)
            {
                this._flagActivityDurationAfterPublishing = true;
            }
            this._VouchersCount = vouchersCount;
            if (this.VouchersCount != null)
            {
                this._flagVouchersCount = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._CreationStatus = creationStatus;
            if (this.CreationStatus != null)
            {
                this._flagCreationStatus = true;
            }
            this._VouchersGenerationStatus = vouchersGenerationStatus;
            if (this.VouchersGenerationStatus != null)
            {
                this._flagVouchersGenerationStatus = true;
            }
            this._Readonly = varReadonly;
            if (this.Readonly != null)
            {
                this._flagReadonly = true;
            }
            this._Protected = varProtected;
            if (this.Protected != null)
            {
                this._flagProtected = true;
            }
            this._CategoryId = categoryId;
            if (this.CategoryId != null)
            {
                this._flagCategoryId = true;
            }
            this._Categories = categories;
            if (this.Categories != null)
            {
                this._flagCategories = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._LoyaltyTiersExpiration = loyaltyTiersExpiration;
            if (this.LoyaltyTiersExpiration != null)
            {
                this._flagLoyaltyTiersExpiration = true;
            }
            this._ValidationRulesAssignments = validationRulesAssignments;
            if (this.ValidationRulesAssignments != null)
            {
                this._flagValidationRulesAssignments = true;
            }
            this._AccessSettingsAssignments = accessSettingsAssignments;
            if (this.AccessSettingsAssignments != null)
            {
                this._flagAccessSettingsAssignments = true;
            }
        }

        /// <summary>
        /// Unique campaign ID, assigned by Voucherify.
        /// </summary>
        /// <value>Unique campaign ID, assigned by Voucherify.</value>
        /*
        <example>camp_f7fBbQxUuTN7dI7tGOo5XMDA</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Campaign name.
        /// </summary>
        /// <value>Campaign name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// An optional field to keep any extra textual information about the campaign such as a campaign description and details.
        /// </summary>
        /// <value>An optional field to keep any extra textual information about the campaign such as a campaign description and details.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", EmitDefaultValue = true)]
        public LoyaltyCampaignVoucher Voucher
        {
            get{ return _Voucher;}
            set
            {
                _Voucher = value;
                _flagVoucher = true;
            }
        }
        private LoyaltyCampaignVoucher _Voucher;
        private bool _flagVoucher;

        /// <summary>
        /// Returns false as Voucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucher()
        {
            return _flagVoucher;
        }
        /// <summary>
        /// Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled.
        /// </summary>
        /// <value>Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled.</value>
        [DataMember(Name = "auto_join", EmitDefaultValue = true)]
        public bool? AutoJoin
        {
            get{ return _AutoJoin;}
            set
            {
                _AutoJoin = value;
                _flagAutoJoin = true;
            }
        }
        private bool? _AutoJoin;
        private bool _flagAutoJoin;

        /// <summary>
        /// Returns false as AutoJoin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAutoJoin()
        {
            return _flagAutoJoin;
        }
        /// <summary>
        /// If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once.
        /// </summary>
        /// <value>If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once.</value>
        [DataMember(Name = "join_once", EmitDefaultValue = true)]
        public bool? JoinOnce
        {
            get{ return _JoinOnce;}
            set
            {
                _JoinOnce = value;
                _flagJoinOnce = true;
            }
        }
        private bool? _JoinOnce;
        private bool _flagJoinOnce;

        /// <summary>
        /// Returns false as JoinOnce should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJoinOnce()
        {
            return _flagJoinOnce;
        }
        /// <summary>
        /// Flag indicating whether the campaign is to use the voucher&#39;s metadata schema instead of the campaign metadata schema.
        /// </summary>
        /// <value>Flag indicating whether the campaign is to use the voucher&#39;s metadata schema instead of the campaign metadata schema.</value>
        [DataMember(Name = "use_voucher_metadata_schema", EmitDefaultValue = true)]
        public bool? UseVoucherMetadataSchema
        {
            get{ return _UseVoucherMetadataSchema;}
            set
            {
                _UseVoucherMetadataSchema = value;
                _flagUseVoucherMetadataSchema = true;
            }
        }
        private bool? _UseVoucherMetadataSchema;
        private bool _flagUseVoucherMetadataSchema;

        /// <summary>
        /// Returns false as UseVoucherMetadataSchema should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseVoucherMetadataSchema()
        {
            return _flagUseVoucherMetadataSchema;
        }
        /// <summary>
        /// Gets or Sets ValidityTimeframe
        /// </summary>
        [DataMember(Name = "validity_timeframe", EmitDefaultValue = true)]
        public ValidityTimeframe ValidityTimeframe
        {
            get{ return _ValidityTimeframe;}
            set
            {
                _ValidityTimeframe = value;
                _flagValidityTimeframe = true;
            }
        }
        private ValidityTimeframe _ValidityTimeframe;
        private bool _flagValidityTimeframe;

        /// <summary>
        /// Returns false as ValidityTimeframe should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityTimeframe()
        {
            return _flagValidityTimeframe;
        }
        /// <summary>
        /// Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday
        /// </summary>
        /// <value>Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday</value>
        [DataMember(Name = "validity_day_of_week", EmitDefaultValue = true)]
        public List<LoyaltyCampaign.ValidityDayOfWeekEnum> ValidityDayOfWeek
        {
            get{ return _ValidityDayOfWeek;}
            set
            {
                _ValidityDayOfWeek = value;
                _flagValidityDayOfWeek = true;
            }
        }
        private List<LoyaltyCampaign.ValidityDayOfWeekEnum> _ValidityDayOfWeek;
        private bool _flagValidityDayOfWeek;

        /// <summary>
        /// Returns false as ValidityDayOfWeek should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityDayOfWeek()
        {
            return _flagValidityDayOfWeek;
        }
        /// <summary>
        /// Gets or Sets ValidityHours
        /// </summary>
        [DataMember(Name = "validity_hours", EmitDefaultValue = true)]
        public ValidityHours ValidityHours
        {
            get{ return _ValidityHours;}
            set
            {
                _ValidityHours = value;
                _flagValidityHours = true;
            }
        }
        private ValidityHours _ValidityHours;
        private bool _flagValidityHours;

        /// <summary>
        /// Returns false as ValidityHours should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityHours()
        {
            return _flagValidityHours;
        }
        /// <summary>
        /// Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a &#x60;duration&#x60; of &#x60;P24D&#x60; will be valid for a duration of 24 days.
        /// </summary>
        /// <value>Defines the amount of time the campaign will be active in ISO 8601 format after publishing. For example, a campaign with a &#x60;duration&#x60; of &#x60;P24D&#x60; will be valid for a duration of 24 days.</value>
        [DataMember(Name = "activity_duration_after_publishing", EmitDefaultValue = true)]
        public string ActivityDurationAfterPublishing
        {
            get{ return _ActivityDurationAfterPublishing;}
            set
            {
                _ActivityDurationAfterPublishing = value;
                _flagActivityDurationAfterPublishing = true;
            }
        }
        private string _ActivityDurationAfterPublishing;
        private bool _flagActivityDurationAfterPublishing;

        /// <summary>
        /// Returns false as ActivityDurationAfterPublishing should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActivityDurationAfterPublishing()
        {
            return _flagActivityDurationAfterPublishing;
        }
        /// <summary>
        /// Total number of unique vouchers in campaign.
        /// </summary>
        /// <value>Total number of unique vouchers in campaign.</value>
        [DataMember(Name = "vouchers_count", EmitDefaultValue = true)]
        public int? VouchersCount
        {
            get{ return _VouchersCount;}
            set
            {
                _VouchersCount = value;
                _flagVouchersCount = true;
            }
        }
        private int? _VouchersCount;
        private bool _flagVouchersCount;

        /// <summary>
        /// Returns false as VouchersCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVouchersCount()
        {
            return _flagVouchersCount;
        }
        /// <summary>
        /// Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. 
        /// </summary>
        /// <value>Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. </value>
        /*
        <example>2022-09-20T00:00Z</example>
        */
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTimeOffset? StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private DateTimeOffset? _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.
        /// </summary>
        /// <value>Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.</value>
        /*
        <example>2022-09-30T00:00Z</example>
        */
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// A flag to toggle the campaign on or off. You can disable a campaign even though it&#39;s within the active period defined by the &#x60;start_date&#x60; and &#x60;expiration_date&#x60;.    - &#x60;true&#x60; indicates an *active* campaign - &#x60;false&#x60; indicates an *inactive* campaign
        /// </summary>
        /// <value>A flag to toggle the campaign on or off. You can disable a campaign even though it&#39;s within the active period defined by the &#x60;start_date&#x60; and &#x60;expiration_date&#x60;.    - &#x60;true&#x60; indicates an *active* campaign - &#x60;false&#x60; indicates an *inactive* campaign</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool? _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Timestamp representing the date and time when the campaign was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the campaign was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-01T08:00:50.038Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the campaign was last updated in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the campaign was last updated in ISO 8601 format.</value>
        /*
        <example>2022-09-20T09:18:19.623Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Unique category name.
        /// </summary>
        /// <value>Unique category name.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get{ return _Category;}
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// Indicates whether the campaign can be only read by a restricted user in the Areas and Stores enterprise feature. It is returned only to restricted users; this field is not returned for users with other roles.
        /// </summary>
        /// <value>Indicates whether the campaign can be only read by a restricted user in the Areas and Stores enterprise feature. It is returned only to restricted users; this field is not returned for users with other roles.</value>
        [DataMember(Name = "readonly", EmitDefaultValue = true)]
        public bool? Readonly
        {
            get{ return _Readonly;}
            set
            {
                _Readonly = value;
                _flagReadonly = true;
            }
        }
        private bool? _Readonly;
        private bool _flagReadonly;

        /// <summary>
        /// Returns false as Readonly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReadonly()
        {
            return _flagReadonly;
        }
        /// <summary>
        /// Indicates whether the resource can be deleted.
        /// </summary>
        /// <value>Indicates whether the resource can be deleted.</value>
        [DataMember(Name = "protected", EmitDefaultValue = true)]
        public bool? Protected
        {
            get{ return _Protected;}
            set
            {
                _Protected = value;
                _flagProtected = true;
            }
        }
        private bool? _Protected;
        private bool _flagProtected;

        /// <summary>
        /// Returns false as Protected should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProtected()
        {
            return _flagProtected;
        }
        /// <summary>
        /// Unique category ID that this campaign belongs to.
        /// </summary>
        /// <value>Unique category ID that this campaign belongs to.</value>
        /*
        <example>cat_0b688929a2476386a7</example>
        */
        [DataMember(Name = "category_id", EmitDefaultValue = true)]
        public string CategoryId
        {
            get{ return _CategoryId;}
            set
            {
                _CategoryId = value;
                _flagCategoryId = true;
            }
        }
        private string _CategoryId;
        private bool _flagCategoryId;

        /// <summary>
        /// Returns false as CategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryId()
        {
            return _flagCategoryId;
        }
        /// <summary>
        /// Contains details about the category.
        /// </summary>
        /// <value>Contains details about the category.</value>
        [DataMember(Name = "categories", EmitDefaultValue = true)]
        public List<Category> Categories
        {
            get{ return _Categories;}
            set
            {
                _Categories = value;
                _flagCategories = true;
            }
        }
        private List<Category> _Categories;
        private bool _flagCategories;

        /// <summary>
        /// Returns false as Categories should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategories()
        {
            return _flagCategories;
        }
        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the campaign.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the campaign.</value>
        [DataMember(Name = "object", EmitDefaultValue = true)]
        public string Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private string _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Gets or Sets LoyaltyTiersExpiration
        /// </summary>
        [DataMember(Name = "loyalty_tiers_expiration", EmitDefaultValue = true)]
        public LoyaltyTiersExpirationAll LoyaltyTiersExpiration
        {
            get{ return _LoyaltyTiersExpiration;}
            set
            {
                _LoyaltyTiersExpiration = value;
                _flagLoyaltyTiersExpiration = true;
            }
        }
        private LoyaltyTiersExpirationAll _LoyaltyTiersExpiration;
        private bool _flagLoyaltyTiersExpiration;

        /// <summary>
        /// Returns false as LoyaltyTiersExpiration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTiersExpiration()
        {
            return _flagLoyaltyTiersExpiration;
        }
        /// <summary>
        /// Gets or Sets ValidationRulesAssignments
        /// </summary>
        [DataMember(Name = "validation_rules_assignments", EmitDefaultValue = true)]
        public ValidationRulesAssignmentsList ValidationRulesAssignments
        {
            get{ return _ValidationRulesAssignments;}
            set
            {
                _ValidationRulesAssignments = value;
                _flagValidationRulesAssignments = true;
            }
        }
        private ValidationRulesAssignmentsList _ValidationRulesAssignments;
        private bool _flagValidationRulesAssignments;

        /// <summary>
        /// Returns false as ValidationRulesAssignments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationRulesAssignments()
        {
            return _flagValidationRulesAssignments;
        }
        /// <summary>
        /// Gets or Sets AccessSettingsAssignments
        /// </summary>
        [DataMember(Name = "access_settings_assignments", EmitDefaultValue = true)]
        public AccessSettingsCampaignAssignmentsList AccessSettingsAssignments
        {
            get{ return _AccessSettingsAssignments;}
            set
            {
                _AccessSettingsAssignments = value;
                _flagAccessSettingsAssignments = true;
            }
        }
        private AccessSettingsCampaignAssignmentsList _AccessSettingsAssignments;
        private bool _flagAccessSettingsAssignments;

        /// <summary>
        /// Returns false as AccessSettingsAssignments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccessSettingsAssignments()
        {
            return _flagAccessSettingsAssignments;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyCampaign {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CampaignType: ").Append(CampaignType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  AutoJoin: ").Append(AutoJoin).Append("\n");
            sb.Append("  JoinOnce: ").Append(JoinOnce).Append("\n");
            sb.Append("  UseVoucherMetadataSchema: ").Append(UseVoucherMetadataSchema).Append("\n");
            sb.Append("  ValidityTimeframe: ").Append(ValidityTimeframe).Append("\n");
            sb.Append("  ValidityDayOfWeek: ").Append(ValidityDayOfWeek).Append("\n");
            sb.Append("  ValidityHours: ").Append(ValidityHours).Append("\n");
            sb.Append("  ActivityDurationAfterPublishing: ").Append(ActivityDurationAfterPublishing).Append("\n");
            sb.Append("  VouchersCount: ").Append(VouchersCount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreationStatus: ").Append(CreationStatus).Append("\n");
            sb.Append("  VouchersGenerationStatus: ").Append(VouchersGenerationStatus).Append("\n");
            sb.Append("  Readonly: ").Append(Readonly).Append("\n");
            sb.Append("  Protected: ").Append(Protected).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  LoyaltyTiersExpiration: ").Append(LoyaltyTiersExpiration).Append("\n");
            sb.Append("  ValidationRulesAssignments: ").Append(ValidationRulesAssignments).Append("\n");
            sb.Append("  AccessSettingsAssignments: ").Append(AccessSettingsAssignments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
