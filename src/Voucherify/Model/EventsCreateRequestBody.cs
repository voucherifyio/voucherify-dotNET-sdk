/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request body schema for **POST** &#x60;v1/events&#x60;.
    /// </summary>
    [DataContract(Name = "EventsCreateRequestBody")]
    public partial class EventsCreateRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventsCreateRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventsCreateRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventsCreateRequestBody" /> class.
        /// </summary>
        /// <param name="varEvent">Event name. This is the same name that you used to define a custom event in the **Dashboard** &gt; **Project Settings** &gt; **Event Schema**..</param>
        /// <param name="customer">customer (required).</param>
        /// <param name="referral">referral.</param>
        /// <param name="loyalty">loyalty.</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** &gt; **Project Settings** &gt; **Event Schema** &gt; **Edit particular event** &gt; **Metadata property definition**..</param>
        public EventsCreateRequestBody(string varEvent = default(string), Customer customer = default(Customer), EventsCreateRequestBodyReferral referral = default(EventsCreateRequestBodyReferral), EventsCreateRequestBodyLoyalty loyalty = default(EventsCreateRequestBodyLoyalty), Object metadata = default(Object))
        {
            // to ensure "customer" is required (not null)
            if (customer == null)
            {
                throw new ArgumentNullException("customer is a required property for EventsCreateRequestBody and cannot be null");
            }
            this._Customer = customer;
            this._Event = varEvent;
            if (this.Event != null)
            {
                this._flagEvent = true;
            }
            this._Referral = referral;
            if (this.Referral != null)
            {
                this._flagReferral = true;
            }
            this._Loyalty = loyalty;
            if (this.Loyalty != null)
            {
                this._flagLoyalty = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
        }

        /// <summary>
        /// Event name. This is the same name that you used to define a custom event in the **Dashboard** &gt; **Project Settings** &gt; **Event Schema**.
        /// </summary>
        /// <value>Event name. This is the same name that you used to define a custom event in the **Dashboard** &gt; **Project Settings** &gt; **Event Schema**.</value>
        [DataMember(Name = "event", EmitDefaultValue = true)]
        public string Event
        {
            get{ return _Event;}
            set
            {
                _Event = value;
                _flagEvent = true;
            }
        }
        private string _Event;
        private bool _flagEvent;

        /// <summary>
        /// Returns false as Event should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvent()
        {
            return _flagEvent;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", IsRequired = true, EmitDefaultValue = true)]
        public Customer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private Customer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets Referral
        /// </summary>
        [DataMember(Name = "referral", EmitDefaultValue = true)]
        public EventsCreateRequestBodyReferral Referral
        {
            get{ return _Referral;}
            set
            {
                _Referral = value;
                _flagReferral = true;
            }
        }
        private EventsCreateRequestBodyReferral _Referral;
        private bool _flagReferral;

        /// <summary>
        /// Returns false as Referral should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferral()
        {
            return _flagReferral;
        }
        /// <summary>
        /// Gets or Sets Loyalty
        /// </summary>
        [DataMember(Name = "loyalty", EmitDefaultValue = true)]
        public EventsCreateRequestBodyLoyalty Loyalty
        {
            get{ return _Loyalty;}
            set
            {
                _Loyalty = value;
                _flagLoyalty = true;
            }
        }
        private EventsCreateRequestBodyLoyalty _Loyalty;
        private bool _flagLoyalty;

        /// <summary>
        /// Returns false as Loyalty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyalty()
        {
            return _flagLoyalty;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** &gt; **Project Settings** &gt; **Event Schema** &gt; **Edit particular event** &gt; **Metadata property definition**.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the event. A set of key/value pairs that you can attach to an event object. It can be useful for storing additional information about the event in a structured format. Event metadata schema is defined in the **Dashboard** &gt; **Project Settings** &gt; **Event Schema** &gt; **Edit particular event** &gt; **Metadata property definition**.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventsCreateRequestBody {\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  Loyalty: ").Append(Loyalty).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Event (string) maxLength
            if (this.Event != null && this.Event.Length > 300)
            {
                yield return new ValidationResult("Invalid value for Event, length must be less than 300.", new [] { "Event" });
            }

            // Event (string) minLength
            if (this.Event != null && this.Event.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Event, length must be greater than 1.", new [] { "Event" });
            }

            yield break;
        }
    }

}
