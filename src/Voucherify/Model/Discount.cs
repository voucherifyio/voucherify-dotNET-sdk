/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Discount
    /// </summary>
    [DataContract(Name = "Discount")]
    public partial class Discount : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AMOUNT for value: AMOUNT
            /// </summary>
            [EnumMember(Value = "AMOUNT")]
            AMOUNT = 1,

            /// <summary>
            /// Enum UNIT for value: UNIT
            /// </summary>
            [EnumMember(Value = "UNIT")]
            UNIT = 2,

            /// <summary>
            /// Enum PERCENT for value: PERCENT
            /// </summary>
            [EnumMember(Value = "PERCENT")]
            PERCENT = 3,

            /// <summary>
            /// Enum FIXED for value: FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED = 4
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Defines Effect
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EffectEnum
        {
            /// <summary>
            /// Enum APPLYTOORDER for value: APPLY_TO_ORDER
            /// </summary>
            [EnumMember(Value = "APPLY_TO_ORDER")]
            APPLYTOORDER = 1,

            /// <summary>
            /// Enum APPLYTOITEMS for value: APPLY_TO_ITEMS
            /// </summary>
            [EnumMember(Value = "APPLY_TO_ITEMS")]
            APPLYTOITEMS = 2,

            /// <summary>
            /// Enum APPLYTOITEMSPROPORTIONALLY for value: APPLY_TO_ITEMS_PROPORTIONALLY
            /// </summary>
            [EnumMember(Value = "APPLY_TO_ITEMS_PROPORTIONALLY")]
            APPLYTOITEMSPROPORTIONALLY = 3,

            /// <summary>
            /// Enum APPLYTOITEMSPROPORTIONALLYBYQUANTITY for value: APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY
            /// </summary>
            [EnumMember(Value = "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY")]
            APPLYTOITEMSPROPORTIONALLYBYQUANTITY = 4,

            /// <summary>
            /// Enum APPLYTOITEMSBYQUANTITY for value: APPLY_TO_ITEMS_BY_QUANTITY
            /// </summary>
            [EnumMember(Value = "APPLY_TO_ITEMS_BY_QUANTITY")]
            APPLYTOITEMSBYQUANTITY = 5,

            /// <summary>
            /// Enum ADDMISSINGITEMS for value: ADD_MISSING_ITEMS
            /// </summary>
            [EnumMember(Value = "ADD_MISSING_ITEMS")]
            ADDMISSINGITEMS = 6,

            /// <summary>
            /// Enum ADDNEWITEMS for value: ADD_NEW_ITEMS
            /// </summary>
            [EnumMember(Value = "ADD_NEW_ITEMS")]
            ADDNEWITEMS = 7,

            /// <summary>
            /// Enum ADDMANYITEMS for value: ADD_MANY_ITEMS
            /// </summary>
            [EnumMember(Value = "ADD_MANY_ITEMS")]
            ADDMANYITEMS = 8
        }


        /// <summary>
        /// Gets or Sets Effect
        /// </summary>

        [DataMember(Name = "effect", EmitDefaultValue = true)]
        public EffectEnum? Effect
        {
            get{ return _Effect;}
            set
            {
                _Effect = value;
                _flagEffect = true;
            }
        }
        private EffectEnum? _Effect;
        private bool _flagEffect;

        /// <summary>
        /// Returns false as Effect should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEffect()
        {
            return _flagEffect;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="Discount" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="amountOff">Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000..</param>
        /// <param name="amountOffFormula">amountOffFormula.</param>
        /// <param name="aggregatedAmountLimit">Maximum discount amount per order..</param>
        /// <param name="effect">effect.</param>
        /// <param name="isDynamic">Flag indicating whether the discount was calculated using a formula..</param>
        /// <param name="unitOff">Number of units to be granted a full value discount..</param>
        /// <param name="unitOffFormula">Formula used to calculate the number of units..</param>
        /// <param name="unitType">The product deemed as free, chosen from product inventory (e.g. time, items)..</param>
        /// <param name="product">product.</param>
        /// <param name="sku">sku.</param>
        /// <param name="units">units.</param>
        /// <param name="percentOff">The percent discount that the customer will receive..</param>
        /// <param name="percentOffFormula">percentOffFormula.</param>
        /// <param name="amountLimit">Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600..</param>
        /// <param name="fixedAmount">Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the &#x60;fixed_amount_formula&#x60; parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value..</param>
        /// <param name="fixedAmountFormula">fixedAmountFormula.</param>
        public Discount(TypeEnum? type = default(TypeEnum?), decimal? amountOff = default(decimal?), string amountOffFormula = default(string), int? aggregatedAmountLimit = default(int?), EffectEnum? effect = default(EffectEnum?), bool? isDynamic = default(bool?), int? unitOff = default(int?), string unitOffFormula = default(string), string unitType = default(string), DiscountProduct product = default(DiscountProduct), SimpleSkuDiscountUnit sku = default(SimpleSkuDiscountUnit), List<DiscountUnitMultipleOneUnit> units = default(List<DiscountUnitMultipleOneUnit>), decimal? percentOff = default(decimal?), string percentOffFormula = default(string), decimal? amountLimit = default(decimal?), decimal? fixedAmount = default(decimal?), string fixedAmountFormula = default(string))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._AmountOff = amountOff;
            if (this.AmountOff != null)
            {
                this._flagAmountOff = true;
            }
            this._AmountOffFormula = amountOffFormula;
            if (this.AmountOffFormula != null)
            {
                this._flagAmountOffFormula = true;
            }
            this._AggregatedAmountLimit = aggregatedAmountLimit;
            if (this.AggregatedAmountLimit != null)
            {
                this._flagAggregatedAmountLimit = true;
            }
            this._Effect = effect;
            if (this.Effect != null)
            {
                this._flagEffect = true;
            }
            this._IsDynamic = isDynamic;
            if (this.IsDynamic != null)
            {
                this._flagIsDynamic = true;
            }
            this._UnitOff = unitOff;
            if (this.UnitOff != null)
            {
                this._flagUnitOff = true;
            }
            this._UnitOffFormula = unitOffFormula;
            if (this.UnitOffFormula != null)
            {
                this._flagUnitOffFormula = true;
            }
            this._UnitType = unitType;
            if (this.UnitType != null)
            {
                this._flagUnitType = true;
            }
            this._Product = product;
            if (this.Product != null)
            {
                this._flagProduct = true;
            }
            this._Sku = sku;
            if (this.Sku != null)
            {
                this._flagSku = true;
            }
            this._Units = units;
            if (this.Units != null)
            {
                this._flagUnits = true;
            }
            this._PercentOff = percentOff;
            if (this.PercentOff != null)
            {
                this._flagPercentOff = true;
            }
            this._PercentOffFormula = percentOffFormula;
            if (this.PercentOffFormula != null)
            {
                this._flagPercentOffFormula = true;
            }
            this._AmountLimit = amountLimit;
            if (this.AmountLimit != null)
            {
                this._flagAmountLimit = true;
            }
            this._FixedAmount = fixedAmount;
            if (this.FixedAmount != null)
            {
                this._flagFixedAmount = true;
            }
            this._FixedAmountFormula = fixedAmountFormula;
            if (this.FixedAmountFormula != null)
            {
                this._flagFixedAmountFormula = true;
            }
        }

        /// <summary>
        /// Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.
        /// </summary>
        /// <value>Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.</value>
        [DataMember(Name = "amount_off", EmitDefaultValue = true)]
        public decimal? AmountOff
        {
            get{ return _AmountOff;}
            set
            {
                _AmountOff = value;
                _flagAmountOff = true;
            }
        }
        private decimal? _AmountOff;
        private bool _flagAmountOff;

        /// <summary>
        /// Returns false as AmountOff should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOff()
        {
            return _flagAmountOff;
        }
        /// <summary>
        /// Gets or Sets AmountOffFormula
        /// </summary>
        [DataMember(Name = "amount_off_formula", EmitDefaultValue = true)]
        public string AmountOffFormula
        {
            get{ return _AmountOffFormula;}
            set
            {
                _AmountOffFormula = value;
                _flagAmountOffFormula = true;
            }
        }
        private string _AmountOffFormula;
        private bool _flagAmountOffFormula;

        /// <summary>
        /// Returns false as AmountOffFormula should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountOffFormula()
        {
            return _flagAmountOffFormula;
        }
        /// <summary>
        /// Maximum discount amount per order.
        /// </summary>
        /// <value>Maximum discount amount per order.</value>
        [DataMember(Name = "aggregated_amount_limit", EmitDefaultValue = true)]
        public int? AggregatedAmountLimit
        {
            get{ return _AggregatedAmountLimit;}
            set
            {
                _AggregatedAmountLimit = value;
                _flagAggregatedAmountLimit = true;
            }
        }
        private int? _AggregatedAmountLimit;
        private bool _flagAggregatedAmountLimit;

        /// <summary>
        /// Returns false as AggregatedAmountLimit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAggregatedAmountLimit()
        {
            return _flagAggregatedAmountLimit;
        }
        /// <summary>
        /// Flag indicating whether the discount was calculated using a formula.
        /// </summary>
        /// <value>Flag indicating whether the discount was calculated using a formula.</value>
        [DataMember(Name = "is_dynamic", EmitDefaultValue = true)]
        public bool? IsDynamic
        {
            get{ return _IsDynamic;}
            set
            {
                _IsDynamic = value;
                _flagIsDynamic = true;
            }
        }
        private bool? _IsDynamic;
        private bool _flagIsDynamic;

        /// <summary>
        /// Returns false as IsDynamic should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDynamic()
        {
            return _flagIsDynamic;
        }
        /// <summary>
        /// Number of units to be granted a full value discount.
        /// </summary>
        /// <value>Number of units to be granted a full value discount.</value>
        [DataMember(Name = "unit_off", EmitDefaultValue = true)]
        public int? UnitOff
        {
            get{ return _UnitOff;}
            set
            {
                _UnitOff = value;
                _flagUnitOff = true;
            }
        }
        private int? _UnitOff;
        private bool _flagUnitOff;

        /// <summary>
        /// Returns false as UnitOff should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitOff()
        {
            return _flagUnitOff;
        }
        /// <summary>
        /// Formula used to calculate the number of units.
        /// </summary>
        /// <value>Formula used to calculate the number of units.</value>
        [DataMember(Name = "unit_off_formula", EmitDefaultValue = true)]
        public string UnitOffFormula
        {
            get{ return _UnitOffFormula;}
            set
            {
                _UnitOffFormula = value;
                _flagUnitOffFormula = true;
            }
        }
        private string _UnitOffFormula;
        private bool _flagUnitOffFormula;

        /// <summary>
        /// Returns false as UnitOffFormula should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitOffFormula()
        {
            return _flagUnitOffFormula;
        }
        /// <summary>
        /// The product deemed as free, chosen from product inventory (e.g. time, items).
        /// </summary>
        /// <value>The product deemed as free, chosen from product inventory (e.g. time, items).</value>
        [DataMember(Name = "unit_type", EmitDefaultValue = true)]
        public string UnitType
        {
            get{ return _UnitType;}
            set
            {
                _UnitType = value;
                _flagUnitType = true;
            }
        }
        private string _UnitType;
        private bool _flagUnitType;

        /// <summary>
        /// Returns false as UnitType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitType()
        {
            return _flagUnitType;
        }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = true)]
        public DiscountProduct Product
        {
            get{ return _Product;}
            set
            {
                _Product = value;
                _flagProduct = true;
            }
        }
        private DiscountProduct _Product;
        private bool _flagProduct;

        /// <summary>
        /// Returns false as Product should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProduct()
        {
            return _flagProduct;
        }
        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = true)]
        public SimpleSkuDiscountUnit Sku
        {
            get{ return _Sku;}
            set
            {
                _Sku = value;
                _flagSku = true;
            }
        }
        private SimpleSkuDiscountUnit _Sku;
        private bool _flagSku;

        /// <summary>
        /// Returns false as Sku should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSku()
        {
            return _flagSku;
        }
        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", EmitDefaultValue = true)]
        public List<DiscountUnitMultipleOneUnit> Units
        {
            get{ return _Units;}
            set
            {
                _Units = value;
                _flagUnits = true;
            }
        }
        private List<DiscountUnitMultipleOneUnit> _Units;
        private bool _flagUnits;

        /// <summary>
        /// Returns false as Units should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnits()
        {
            return _flagUnits;
        }
        /// <summary>
        /// The percent discount that the customer will receive.
        /// </summary>
        /// <value>The percent discount that the customer will receive.</value>
        [DataMember(Name = "percent_off", EmitDefaultValue = true)]
        public decimal? PercentOff
        {
            get{ return _PercentOff;}
            set
            {
                _PercentOff = value;
                _flagPercentOff = true;
            }
        }
        private decimal? _PercentOff;
        private bool _flagPercentOff;

        /// <summary>
        /// Returns false as PercentOff should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentOff()
        {
            return _flagPercentOff;
        }
        /// <summary>
        /// Gets or Sets PercentOffFormula
        /// </summary>
        [DataMember(Name = "percent_off_formula", EmitDefaultValue = true)]
        public string PercentOffFormula
        {
            get{ return _PercentOffFormula;}
            set
            {
                _PercentOffFormula = value;
                _flagPercentOffFormula = true;
            }
        }
        private string _PercentOffFormula;
        private bool _flagPercentOffFormula;

        /// <summary>
        /// Returns false as PercentOffFormula should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentOffFormula()
        {
            return _flagPercentOffFormula;
        }
        /// <summary>
        /// Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600.
        /// </summary>
        /// <value>Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600.</value>
        [DataMember(Name = "amount_limit", EmitDefaultValue = true)]
        public decimal? AmountLimit
        {
            get{ return _AmountLimit;}
            set
            {
                _AmountLimit = value;
                _flagAmountLimit = true;
            }
        }
        private decimal? _AmountLimit;
        private bool _flagAmountLimit;

        /// <summary>
        /// Returns false as AmountLimit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmountLimit()
        {
            return _flagAmountLimit;
        }
        /// <summary>
        /// Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the &#x60;fixed_amount_formula&#x60; parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.
        /// </summary>
        /// <value>Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the &#x60;fixed_amount_formula&#x60; parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.</value>
        [DataMember(Name = "fixed_amount", EmitDefaultValue = true)]
        public decimal? FixedAmount
        {
            get{ return _FixedAmount;}
            set
            {
                _FixedAmount = value;
                _flagFixedAmount = true;
            }
        }
        private decimal? _FixedAmount;
        private bool _flagFixedAmount;

        /// <summary>
        /// Returns false as FixedAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFixedAmount()
        {
            return _flagFixedAmount;
        }
        /// <summary>
        /// Gets or Sets FixedAmountFormula
        /// </summary>
        [DataMember(Name = "fixed_amount_formula", EmitDefaultValue = true)]
        public string FixedAmountFormula
        {
            get{ return _FixedAmountFormula;}
            set
            {
                _FixedAmountFormula = value;
                _flagFixedAmountFormula = true;
            }
        }
        private string _FixedAmountFormula;
        private bool _flagFixedAmountFormula;

        /// <summary>
        /// Returns false as FixedAmountFormula should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFixedAmountFormula()
        {
            return _flagFixedAmountFormula;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Discount {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AmountOff: ").Append(AmountOff).Append("\n");
            sb.Append("  AmountOffFormula: ").Append(AmountOffFormula).Append("\n");
            sb.Append("  AggregatedAmountLimit: ").Append(AggregatedAmountLimit).Append("\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("  IsDynamic: ").Append(IsDynamic).Append("\n");
            sb.Append("  UnitOff: ").Append(UnitOff).Append("\n");
            sb.Append("  UnitOffFormula: ").Append(UnitOffFormula).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  PercentOff: ").Append(PercentOff).Append("\n");
            sb.Append("  PercentOffFormula: ").Append(PercentOffFormula).Append("\n");
            sb.Append("  AmountLimit: ").Append(AmountLimit).Append("\n");
            sb.Append("  FixedAmount: ").Append(FixedAmount).Append("\n");
            sb.Append("  FixedAmountFormula: ").Append(FixedAmountFormula).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
