/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request Body schema for **POST** &#x60;v1/loyalties/members/{memberId}/balance&#x60; and **POST** &#x60;v1/loyalties/{campaignId}/members/{memberId}/balance&#x60;.
    /// </summary>
    [DataContract(Name = "LoyaltiesMembersBalanceUpdateRequestBody")]
    public partial class LoyaltiesMembersBalanceUpdateRequestBody : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ExpirationType
        /// </summary>

        [DataMember(Name = "expiration_type", EmitDefaultValue = true)]
        public PointsExpirationTypes? ExpirationType
        {
            get{ return _ExpirationType;}
            set
            {
                _ExpirationType = value;
                _flagExpirationType = true;
            }
        }
        private PointsExpirationTypes? _ExpirationType;
        private bool _flagExpirationType;

        /// <summary>
        /// Returns false as ExpirationType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationType()
        {
            return _flagExpirationType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesMembersBalanceUpdateRequestBody" /> class.
        /// </summary>
        /// <param name="points">Incremental balance to be added to/subtracted from the loyalty card.  - To add points: 100 - To subtract points, add a minus: -100.</param>
        /// <param name="expirationType">expirationType.</param>
        /// <param name="expirationDate">Set expiration date for added points, i.e. &#x60;YYYY-MM-DD&#x60;. This parameter is required only when expiration_type is set to &#x60;CUSTOM_DATE&#x60;..</param>
        /// <param name="reason">Reason for the transfer..</param>
        /// <param name="sourceId">The merchant&#39;s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service..</param>
        public LoyaltiesMembersBalanceUpdateRequestBody(int? points = default(int?), PointsExpirationTypes? expirationType = default(PointsExpirationTypes?), DateTimeOffset? expirationDate = default(DateTimeOffset?), string reason = default(string), string sourceId = default(string))
        {
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._ExpirationType = expirationType;
            if (this.ExpirationType != null)
            {
                this._flagExpirationType = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._Reason = reason;
            if (this.Reason != null)
            {
                this._flagReason = true;
            }
            this._SourceId = sourceId;
            if (this.SourceId != null)
            {
                this._flagSourceId = true;
            }
        }

        /// <summary>
        /// Incremental balance to be added to/subtracted from the loyalty card.  - To add points: 100 - To subtract points, add a minus: -100
        /// </summary>
        /// <value>Incremental balance to be added to/subtracted from the loyalty card.  - To add points: 100 - To subtract points, add a minus: -100</value>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Set expiration date for added points, i.e. &#x60;YYYY-MM-DD&#x60;. This parameter is required only when expiration_type is set to &#x60;CUSTOM_DATE&#x60;.
        /// </summary>
        /// <value>Set expiration date for added points, i.e. &#x60;YYYY-MM-DD&#x60;. This parameter is required only when expiration_type is set to &#x60;CUSTOM_DATE&#x60;.</value>
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// Reason for the transfer.
        /// </summary>
        /// <value>Reason for the transfer.</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason
        {
            get{ return _Reason;}
            set
            {
                _Reason = value;
                _flagReason = true;
            }
        }
        private string _Reason;
        private bool _flagReason;

        /// <summary>
        /// Returns false as Reason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReason()
        {
            return _flagReason;
        }
        /// <summary>
        /// The merchant&#39;s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service.
        /// </summary>
        /// <value>The merchant&#39;s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service.</value>
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId
        {
            get{ return _SourceId;}
            set
            {
                _SourceId = value;
                _flagSourceId = true;
            }
        }
        private string _SourceId;
        private bool _flagSourceId;

        /// <summary>
        /// Returns false as SourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceId()
        {
            return _flagSourceId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltiesMembersBalanceUpdateRequestBody {\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  ExpirationType: ").Append(ExpirationType).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
