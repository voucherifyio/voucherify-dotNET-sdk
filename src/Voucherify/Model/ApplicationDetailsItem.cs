/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Object representing item replacement.
    /// </summary>
    [DataContract(Name = "ApplicationDetailsItem")]
    public partial class ApplicationDetailsItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationDetailsItem" /> class.
        /// </summary>
        /// <param name="sourceIndex">Index number of the source item that is replaced. The enumeration starts from &#x60;0&#x60;, which represents the first item in the request, e.g., if the replaced item is passed as the second in the request, &#x60;source_index&#x60; equals &#x60;3&#x60;..</param>
        /// <param name="sourceAppliedQuantity">Number of source units that are replaced..</param>
        /// <param name="sourceAppliedQuantityAmount">Amount equal to the price of the units that are replaced. Determines the change of the amount of the source item quantity..</param>
        /// <param name="targetIndex">Index number of the target item that is a replacement of the source item. The enumeration continues the values for the order items, e.g. if there are three items in the request, &#x60;target_index&#x60; equals &#x60;3&#x60;, as enumeration starts from &#x60;0&#x60;..</param>
        /// <param name="targetAppliedQuantity">Number of added target units that are replacements..</param>
        /// <param name="targetAppliedQuantityAmount">Amount equal to the price of the units that are replacements. Determines the change in the amount of the target item quantity..</param>
        /// <param name="targetAppliedDiscountAmount">Discount amount applied to the target item with regard to the replacement. Equals the &#x60;target_applied_quantity_amount&#x60; minus &#x60;source_applied_quantity_amount&#x60;..</param>
        public ApplicationDetailsItem(int sourceIndex = default(int), int sourceAppliedQuantity = default(int), int sourceAppliedQuantityAmount = default(int), int targetIndex = default(int), int targetAppliedQuantity = default(int), int targetAppliedQuantityAmount = default(int), int targetAppliedDiscountAmount = default(int))
        {
            this._SourceIndex = sourceIndex;
            if (this.SourceIndex != null)
            {
                this._flagSourceIndex = true;
            }
            this._SourceAppliedQuantity = sourceAppliedQuantity;
            if (this.SourceAppliedQuantity != null)
            {
                this._flagSourceAppliedQuantity = true;
            }
            this._SourceAppliedQuantityAmount = sourceAppliedQuantityAmount;
            if (this.SourceAppliedQuantityAmount != null)
            {
                this._flagSourceAppliedQuantityAmount = true;
            }
            this._TargetIndex = targetIndex;
            if (this.TargetIndex != null)
            {
                this._flagTargetIndex = true;
            }
            this._TargetAppliedQuantity = targetAppliedQuantity;
            if (this.TargetAppliedQuantity != null)
            {
                this._flagTargetAppliedQuantity = true;
            }
            this._TargetAppliedQuantityAmount = targetAppliedQuantityAmount;
            if (this.TargetAppliedQuantityAmount != null)
            {
                this._flagTargetAppliedQuantityAmount = true;
            }
            this._TargetAppliedDiscountAmount = targetAppliedDiscountAmount;
            if (this.TargetAppliedDiscountAmount != null)
            {
                this._flagTargetAppliedDiscountAmount = true;
            }
        }

        /// <summary>
        /// Index number of the source item that is replaced. The enumeration starts from &#x60;0&#x60;, which represents the first item in the request, e.g., if the replaced item is passed as the second in the request, &#x60;source_index&#x60; equals &#x60;3&#x60;.
        /// </summary>
        /// <value>Index number of the source item that is replaced. The enumeration starts from &#x60;0&#x60;, which represents the first item in the request, e.g., if the replaced item is passed as the second in the request, &#x60;source_index&#x60; equals &#x60;3&#x60;.</value>
        [DataMember(Name = "source_index", EmitDefaultValue = true)]
        public int SourceIndex
        {
            get{ return _SourceIndex;}
            set
            {
                _SourceIndex = value;
                _flagSourceIndex = true;
            }
        }
        private int _SourceIndex;
        private bool _flagSourceIndex;

        /// <summary>
        /// Returns false as SourceIndex should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceIndex()
        {
            return _flagSourceIndex;
        }
        /// <summary>
        /// Number of source units that are replaced.
        /// </summary>
        /// <value>Number of source units that are replaced.</value>
        [DataMember(Name = "source_applied_quantity", EmitDefaultValue = true)]
        public int SourceAppliedQuantity
        {
            get{ return _SourceAppliedQuantity;}
            set
            {
                _SourceAppliedQuantity = value;
                _flagSourceAppliedQuantity = true;
            }
        }
        private int _SourceAppliedQuantity;
        private bool _flagSourceAppliedQuantity;

        /// <summary>
        /// Returns false as SourceAppliedQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceAppliedQuantity()
        {
            return _flagSourceAppliedQuantity;
        }
        /// <summary>
        /// Amount equal to the price of the units that are replaced. Determines the change of the amount of the source item quantity.
        /// </summary>
        /// <value>Amount equal to the price of the units that are replaced. Determines the change of the amount of the source item quantity.</value>
        [DataMember(Name = "source_applied_quantity_amount", EmitDefaultValue = true)]
        public int SourceAppliedQuantityAmount
        {
            get{ return _SourceAppliedQuantityAmount;}
            set
            {
                _SourceAppliedQuantityAmount = value;
                _flagSourceAppliedQuantityAmount = true;
            }
        }
        private int _SourceAppliedQuantityAmount;
        private bool _flagSourceAppliedQuantityAmount;

        /// <summary>
        /// Returns false as SourceAppliedQuantityAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceAppliedQuantityAmount()
        {
            return _flagSourceAppliedQuantityAmount;
        }
        /// <summary>
        /// Index number of the target item that is a replacement of the source item. The enumeration continues the values for the order items, e.g. if there are three items in the request, &#x60;target_index&#x60; equals &#x60;3&#x60;, as enumeration starts from &#x60;0&#x60;.
        /// </summary>
        /// <value>Index number of the target item that is a replacement of the source item. The enumeration continues the values for the order items, e.g. if there are three items in the request, &#x60;target_index&#x60; equals &#x60;3&#x60;, as enumeration starts from &#x60;0&#x60;.</value>
        [DataMember(Name = "target_index", EmitDefaultValue = true)]
        public int TargetIndex
        {
            get{ return _TargetIndex;}
            set
            {
                _TargetIndex = value;
                _flagTargetIndex = true;
            }
        }
        private int _TargetIndex;
        private bool _flagTargetIndex;

        /// <summary>
        /// Returns false as TargetIndex should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetIndex()
        {
            return _flagTargetIndex;
        }
        /// <summary>
        /// Number of added target units that are replacements.
        /// </summary>
        /// <value>Number of added target units that are replacements.</value>
        [DataMember(Name = "target_applied_quantity", EmitDefaultValue = true)]
        public int TargetAppliedQuantity
        {
            get{ return _TargetAppliedQuantity;}
            set
            {
                _TargetAppliedQuantity = value;
                _flagTargetAppliedQuantity = true;
            }
        }
        private int _TargetAppliedQuantity;
        private bool _flagTargetAppliedQuantity;

        /// <summary>
        /// Returns false as TargetAppliedQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetAppliedQuantity()
        {
            return _flagTargetAppliedQuantity;
        }
        /// <summary>
        /// Amount equal to the price of the units that are replacements. Determines the change in the amount of the target item quantity.
        /// </summary>
        /// <value>Amount equal to the price of the units that are replacements. Determines the change in the amount of the target item quantity.</value>
        [DataMember(Name = "target_applied_quantity_amount", EmitDefaultValue = true)]
        public int TargetAppliedQuantityAmount
        {
            get{ return _TargetAppliedQuantityAmount;}
            set
            {
                _TargetAppliedQuantityAmount = value;
                _flagTargetAppliedQuantityAmount = true;
            }
        }
        private int _TargetAppliedQuantityAmount;
        private bool _flagTargetAppliedQuantityAmount;

        /// <summary>
        /// Returns false as TargetAppliedQuantityAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetAppliedQuantityAmount()
        {
            return _flagTargetAppliedQuantityAmount;
        }
        /// <summary>
        /// Discount amount applied to the target item with regard to the replacement. Equals the &#x60;target_applied_quantity_amount&#x60; minus &#x60;source_applied_quantity_amount&#x60;.
        /// </summary>
        /// <value>Discount amount applied to the target item with regard to the replacement. Equals the &#x60;target_applied_quantity_amount&#x60; minus &#x60;source_applied_quantity_amount&#x60;.</value>
        [DataMember(Name = "target_applied_discount_amount", EmitDefaultValue = true)]
        public int TargetAppliedDiscountAmount
        {
            get{ return _TargetAppliedDiscountAmount;}
            set
            {
                _TargetAppliedDiscountAmount = value;
                _flagTargetAppliedDiscountAmount = true;
            }
        }
        private int _TargetAppliedDiscountAmount;
        private bool _flagTargetAppliedDiscountAmount;

        /// <summary>
        /// Returns false as TargetAppliedDiscountAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetAppliedDiscountAmount()
        {
            return _flagTargetAppliedDiscountAmount;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationDetailsItem {\n");
            sb.Append("  SourceIndex: ").Append(SourceIndex).Append("\n");
            sb.Append("  SourceAppliedQuantity: ").Append(SourceAppliedQuantity).Append("\n");
            sb.Append("  SourceAppliedQuantityAmount: ").Append(SourceAppliedQuantityAmount).Append("\n");
            sb.Append("  TargetIndex: ").Append(TargetIndex).Append("\n");
            sb.Append("  TargetAppliedQuantity: ").Append(TargetAppliedQuantity).Append("\n");
            sb.Append("  TargetAppliedQuantityAmount: ").Append(TargetAppliedQuantityAmount).Append("\n");
            sb.Append("  TargetAppliedDiscountAmount: ").Append(TargetAppliedDiscountAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SourceIndex (int) minimum
            if (this.SourceIndex < (int)0)
            {
                yield return new ValidationResult("Invalid value for SourceIndex, must be a value greater than or equal to 0.", new [] { "SourceIndex" });
            }

            // SourceAppliedQuantity (int) maximum
            if (this.SourceAppliedQuantity > (int)-1)
            {
                yield return new ValidationResult("Invalid value for SourceAppliedQuantity, must be a value less than or equal to -1.", new [] { "SourceAppliedQuantity" });
            }

            // SourceAppliedQuantityAmount (int) maximum
            if (this.SourceAppliedQuantityAmount > (int)0)
            {
                yield return new ValidationResult("Invalid value for SourceAppliedQuantityAmount, must be a value less than or equal to 0.", new [] { "SourceAppliedQuantityAmount" });
            }

            yield break;
        }
    }

}
