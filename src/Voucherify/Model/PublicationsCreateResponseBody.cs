/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// PublicationsCreateResponseBody
    /// </summary>
    [DataContract(Name = "PublicationsCreateResponseBody")]
    public partial class PublicationsCreateResponseBody : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by the JSON. This object stores information about the &#x60;publication&#x60;.
        /// </summary>
        /// <value>The type of the object represented by the JSON. This object stores information about the &#x60;publication&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Publication for value: publication
            /// </summary>
            [EnumMember(Value = "publication")]
            Publication = 1
        }


        /// <summary>
        /// The type of the object represented by the JSON. This object stores information about the &#x60;publication&#x60;.
        /// </summary>
        /// <value>The type of the object represented by the JSON. This object stores information about the &#x60;publication&#x60;.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// How the publication was originated. It can be your own custom channel or an example value provided here.
        /// </summary>
        /// <value>How the publication was originated. It can be your own custom channel or an example value provided here.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum API for value: API
            /// </summary>
            [EnumMember(Value = "API")]
            API = 1
        }


        /// <summary>
        /// How the publication was originated. It can be your own custom channel or an example value provided here.
        /// </summary>
        /// <value>How the publication was originated. It can be your own custom channel or an example value provided here.</value>

        [DataMember(Name = "channel", EmitDefaultValue = true)]
        public ChannelEnum? Channel
        {
            get{ return _Channel;}
            set
            {
                _Channel = value;
                _flagChannel = true;
            }
        }
        private ChannelEnum? _Channel;
        private bool _flagChannel;

        /// <summary>
        /// Returns false as Channel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChannel()
        {
            return _flagChannel;
        }
        /// <summary>
        /// Status of the publication attempt.
        /// </summary>
        /// <value>Status of the publication attempt.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum SUCCESS for value: SUCCESS
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS = 1
        }


        /// <summary>
        /// Status of the publication attempt.
        /// </summary>
        /// <value>Status of the publication attempt.</value>

        [DataMember(Name = "result", EmitDefaultValue = true)]
        public ResultEnum? Result
        {
            get{ return _Result;}
            set
            {
                _Result = value;
                _flagResult = true;
            }
        }
        private ResultEnum? _Result;
        private bool _flagResult;

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return _flagResult;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicationsCreateResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique publication ID, assigned by Voucherify..</param>
        /// <param name="varObject">The type of the object represented by the JSON. This object stores information about the &#x60;publication&#x60;. (default to ObjectEnum.Publication).</param>
        /// <param name="createdAt">Timestamp representing the date and time when the publication was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="customerId">Unique customer ID of the customer receiving the publication..</param>
        /// <param name="trackingId">Customer&#39;s &#x60;source_id&#x60;..</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format..</param>
        /// <param name="channel">How the publication was originated. It can be your own custom channel or an example value provided here. (default to ChannelEnum.API).</param>
        /// <param name="sourceId">The merchant&#39;s publication ID if it is different from the Voucherify publication ID. It&#39;s an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. .</param>
        /// <param name="result">Status of the publication attempt. (default to ResultEnum.SUCCESS).</param>
        /// <param name="customer">customer.</param>
        /// <param name="vouchersId">Contains the unique internal voucher ID that was assigned by Voucherify..</param>
        /// <param name="voucher">voucher.</param>
        /// <param name="vouchers">Contains the unique voucher codes that was assigned by Voucherify..</param>
        public PublicationsCreateResponseBody(string id = default(string), ObjectEnum? varObject = ObjectEnum.Publication, DateTimeOffset? createdAt = default(DateTimeOffset?), string customerId = default(string), string trackingId = default(string), Object metadata = default(Object), ChannelEnum? channel = ChannelEnum.API, string sourceId = default(string), ResultEnum? result = ResultEnum.SUCCESS, CustomerWithSummaryLoyaltyReferrals customer = default(CustomerWithSummaryLoyaltyReferrals), List<string> vouchersId = default(List<string>), Voucher voucher = default(Voucher), List<string> vouchers = default(List<string>))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._CustomerId = customerId;
            if (this.CustomerId != null)
            {
                this._flagCustomerId = true;
            }
            this._TrackingId = trackingId;
            if (this.TrackingId != null)
            {
                this._flagTrackingId = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._SourceId = sourceId;
            if (this.SourceId != null)
            {
                this._flagSourceId = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._VouchersId = vouchersId;
            if (this.VouchersId != null)
            {
                this._flagVouchersId = true;
            }
            this._Voucher = voucher;
            if (this.Voucher != null)
            {
                this._flagVoucher = true;
            }
            this._Vouchers = vouchers;
            if (this.Vouchers != null)
            {
                this._flagVouchers = true;
            }
        }

        /// <summary>
        /// Unique publication ID, assigned by Voucherify.
        /// </summary>
        /// <value>Unique publication ID, assigned by Voucherify.</value>
        /*
        <example>pub_BbjAXnmm8e0SIm3zG8qvvFCP0KuLywtp</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the publication was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the publication was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-09-23T09:57:00.434Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Unique customer ID of the customer receiving the publication.
        /// </summary>
        /// <value>Unique customer ID of the customer receiving the publication.</value>
        /*
        <example>cust_eWgXlBBiY6THFRJwX45Iakv4</example>
        */
        [DataMember(Name = "customer_id", EmitDefaultValue = true)]
        public string CustomerId
        {
            get{ return _CustomerId;}
            set
            {
                _CustomerId = value;
                _flagCustomerId = true;
            }
        }
        private string _CustomerId;
        private bool _flagCustomerId;

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return _flagCustomerId;
        }
        /// <summary>
        /// Customer&#39;s &#x60;source_id&#x60;.
        /// </summary>
        /// <value>Customer&#39;s &#x60;source_id&#x60;.</value>
        [DataMember(Name = "tracking_id", EmitDefaultValue = true)]
        public string TrackingId
        {
            get{ return _TrackingId;}
            set
            {
                _TrackingId = value;
                _flagTrackingId = true;
            }
        }
        private string _TrackingId;
        private bool _flagTrackingId;

        /// <summary>
        /// Returns false as TrackingId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTrackingId()
        {
            return _flagTrackingId;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// The merchant&#39;s publication ID if it is different from the Voucherify publication ID. It&#39;s an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. 
        /// </summary>
        /// <value>The merchant&#39;s publication ID if it is different from the Voucherify publication ID. It&#39;s an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. </value>
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId
        {
            get{ return _SourceId;}
            set
            {
                _SourceId = value;
                _flagSourceId = true;
            }
        }
        private string _SourceId;
        private bool _flagSourceId;

        /// <summary>
        /// Returns false as SourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceId()
        {
            return _flagSourceId;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public CustomerWithSummaryLoyaltyReferrals Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private CustomerWithSummaryLoyaltyReferrals _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Contains the unique internal voucher ID that was assigned by Voucherify.
        /// </summary>
        /// <value>Contains the unique internal voucher ID that was assigned by Voucherify.</value>
        [DataMember(Name = "vouchers_id", EmitDefaultValue = true)]
        public List<string> VouchersId
        {
            get{ return _VouchersId;}
            set
            {
                _VouchersId = value;
                _flagVouchersId = true;
            }
        }
        private List<string> _VouchersId;
        private bool _flagVouchersId;

        /// <summary>
        /// Returns false as VouchersId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVouchersId()
        {
            return _flagVouchersId;
        }
        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", EmitDefaultValue = true)]
        public Voucher Voucher
        {
            get{ return _Voucher;}
            set
            {
                _Voucher = value;
                _flagVoucher = true;
            }
        }
        private Voucher _Voucher;
        private bool _flagVoucher;

        /// <summary>
        /// Returns false as Voucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucher()
        {
            return _flagVoucher;
        }
        /// <summary>
        /// Contains the unique voucher codes that was assigned by Voucherify.
        /// </summary>
        /// <value>Contains the unique voucher codes that was assigned by Voucherify.</value>
        [DataMember(Name = "vouchers", EmitDefaultValue = true)]
        public List<string> Vouchers
        {
            get{ return _Vouchers;}
            set
            {
                _Vouchers = value;
                _flagVouchers = true;
            }
        }
        private List<string> _Vouchers;
        private bool _flagVouchers;

        /// <summary>
        /// Returns false as Vouchers should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVouchers()
        {
            return _flagVouchers;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicationsCreateResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  VouchersId: ").Append(VouchersId).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  Vouchers: ").Append(Vouchers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
