/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// QualificationsRedeemable
    /// </summary>
    [DataContract(Name = "QualificationsRedeemable")]
    public partial class QualificationsRedeemable : IValidatableObject
    {
        /// <summary>
        /// Object type of the redeemable.
        /// </summary>
        /// <value>Object type of the redeemable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Campaign for value: campaign
            /// </summary>
            [EnumMember(Value = "campaign")]
            Campaign = 1,

            /// <summary>
            /// Enum PromotionTier for value: promotion_tier
            /// </summary>
            [EnumMember(Value = "promotion_tier")]
            PromotionTier = 2,

            /// <summary>
            /// Enum PromotionStack for value: promotion_stack
            /// </summary>
            [EnumMember(Value = "promotion_stack")]
            PromotionStack = 3,

            /// <summary>
            /// Enum Voucher for value: voucher
            /// </summary>
            [EnumMember(Value = "voucher")]
            Voucher = 4
        }


        /// <summary>
        /// Object type of the redeemable.
        /// </summary>
        /// <value>Object type of the redeemable.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="QualificationsRedeemable" /> class.
        /// </summary>
        /// <param name="id">Id of the redeemable..</param>
        /// <param name="varObject">Object type of the redeemable..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="result">result.</param>
        /// <param name="order">order.</param>
        /// <param name="validationRuleId">A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance..</param>
        /// <param name="applicableTo">applicableTo.</param>
        /// <param name="inapplicableTo">inapplicableTo.</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format..</param>
        /// <param name="categories">List of category information..</param>
        /// <param name="banner">Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard..</param>
        /// <param name="name">Name of the redeemable..</param>
        /// <param name="campaignName">Name of the campaign associated to the redeemable. This field is available only if object is not &#x60;campaign&#x60;.</param>
        /// <param name="campaignId">Id of the campaign associated to the redeemable. This field is available only if object is not &#x60;campaign&#x60;.</param>
        /// <param name="validationRulesAssignments">validationRulesAssignments.</param>
        /// <param name="redeemables">redeemables.</param>
        public QualificationsRedeemable(string id = default(string), ObjectEnum? varObject = default(ObjectEnum?), DateTimeOffset? createdAt = default(DateTimeOffset?), RedeemableResult result = default(RedeemableResult), QualificationsRedeemableOrder order = default(QualificationsRedeemableOrder), string validationRuleId = default(string), ApplicableToResultList applicableTo = default(ApplicableToResultList), InapplicableToResultList inapplicableTo = default(InapplicableToResultList), Object metadata = default(Object), List<CategoryWithStackingRulesType> categories = default(List<CategoryWithStackingRulesType>), string banner = default(string), string name = default(string), string campaignName = default(string), string campaignId = default(string), ValidationRulesAssignmentsList validationRulesAssignments = default(ValidationRulesAssignmentsList), List<QualificationsRedeemableBase> redeemables = default(List<QualificationsRedeemableBase>))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._Result = result;
            if (this.Result != null)
            {
                this._flagResult = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._ValidationRuleId = validationRuleId;
            if (this.ValidationRuleId != null)
            {
                this._flagValidationRuleId = true;
            }
            this._ApplicableTo = applicableTo;
            if (this.ApplicableTo != null)
            {
                this._flagApplicableTo = true;
            }
            this._InapplicableTo = inapplicableTo;
            if (this.InapplicableTo != null)
            {
                this._flagInapplicableTo = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._Categories = categories;
            if (this.Categories != null)
            {
                this._flagCategories = true;
            }
            this._Banner = banner;
            if (this.Banner != null)
            {
                this._flagBanner = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._CampaignName = campaignName;
            if (this.CampaignName != null)
            {
                this._flagCampaignName = true;
            }
            this._CampaignId = campaignId;
            if (this.CampaignId != null)
            {
                this._flagCampaignId = true;
            }
            this._ValidationRulesAssignments = validationRulesAssignments;
            if (this.ValidationRulesAssignments != null)
            {
                this._flagValidationRulesAssignments = true;
            }
            this._Redeemables = redeemables;
            if (this.Redeemables != null)
            {
                this._flagRedeemables = true;
            }
        }

        /// <summary>
        /// Id of the redeemable.
        /// </summary>
        /// <value>Id of the redeemable.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-03-09T11:19:04.819Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public RedeemableResult Result
        {
            get{ return _Result;}
            set
            {
                _Result = value;
                _flagResult = true;
            }
        }
        private RedeemableResult _Result;
        private bool _flagResult;

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return _flagResult;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public QualificationsRedeemableOrder Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private QualificationsRedeemableOrder _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.
        /// </summary>
        /// <value>A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.</value>
        [DataMember(Name = "validation_rule_id", EmitDefaultValue = true)]
        public string ValidationRuleId
        {
            get{ return _ValidationRuleId;}
            set
            {
                _ValidationRuleId = value;
                _flagValidationRuleId = true;
            }
        }
        private string _ValidationRuleId;
        private bool _flagValidationRuleId;

        /// <summary>
        /// Returns false as ValidationRuleId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationRuleId()
        {
            return _flagValidationRuleId;
        }
        /// <summary>
        /// Gets or Sets ApplicableTo
        /// </summary>
        [DataMember(Name = "applicable_to", EmitDefaultValue = true)]
        public ApplicableToResultList ApplicableTo
        {
            get{ return _ApplicableTo;}
            set
            {
                _ApplicableTo = value;
                _flagApplicableTo = true;
            }
        }
        private ApplicableToResultList _ApplicableTo;
        private bool _flagApplicableTo;

        /// <summary>
        /// Returns false as ApplicableTo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicableTo()
        {
            return _flagApplicableTo;
        }
        /// <summary>
        /// Gets or Sets InapplicableTo
        /// </summary>
        [DataMember(Name = "inapplicable_to", EmitDefaultValue = true)]
        public InapplicableToResultList InapplicableTo
        {
            get{ return _InapplicableTo;}
            set
            {
                _InapplicableTo = value;
                _flagInapplicableTo = true;
            }
        }
        private InapplicableToResultList _InapplicableTo;
        private bool _flagInapplicableTo;

        /// <summary>
        /// Returns false as InapplicableTo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInapplicableTo()
        {
            return _flagInapplicableTo;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the product. A set of key/value pairs that you can attach to a product object. It can be useful for storing additional information about the product in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// List of category information.
        /// </summary>
        /// <value>List of category information.</value>
        [DataMember(Name = "categories", EmitDefaultValue = true)]
        public List<CategoryWithStackingRulesType> Categories
        {
            get{ return _Categories;}
            set
            {
                _Categories = value;
                _flagCategories = true;
            }
        }
        private List<CategoryWithStackingRulesType> _Categories;
        private bool _flagCategories;

        /// <summary>
        /// Returns false as Categories should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategories()
        {
            return _flagCategories;
        }
        /// <summary>
        /// Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard.
        /// </summary>
        /// <value>Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard.</value>
        /*
        <example>Order Paid - You will get 100 points</example>
        */
        [DataMember(Name = "banner", EmitDefaultValue = true)]
        public string Banner
        {
            get{ return _Banner;}
            set
            {
                _Banner = value;
                _flagBanner = true;
            }
        }
        private string _Banner;
        private bool _flagBanner;

        /// <summary>
        /// Returns false as Banner should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBanner()
        {
            return _flagBanner;
        }
        /// <summary>
        /// Name of the redeemable.
        /// </summary>
        /// <value>Name of the redeemable.</value>
        /*
        <example>promotion_tier_get_points</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Name of the campaign associated to the redeemable. This field is available only if object is not &#x60;campaign&#x60;
        /// </summary>
        /// <value>Name of the campaign associated to the redeemable. This field is available only if object is not &#x60;campaign&#x60;</value>
        /*
        <example>PromotionCampaign</example>
        */
        [DataMember(Name = "campaign_name", EmitDefaultValue = true)]
        public string CampaignName
        {
            get{ return _CampaignName;}
            set
            {
                _CampaignName = value;
                _flagCampaignName = true;
            }
        }
        private string _CampaignName;
        private bool _flagCampaignName;

        /// <summary>
        /// Returns false as CampaignName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignName()
        {
            return _flagCampaignName;
        }
        /// <summary>
        /// Id of the campaign associated to the redeemable. This field is available only if object is not &#x60;campaign&#x60;
        /// </summary>
        /// <value>Id of the campaign associated to the redeemable. This field is available only if object is not &#x60;campaign&#x60;</value>
        /*
        <example>camp_Mow7u4gSxagLlZ2oDQ01ZS5N</example>
        */
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId
        {
            get{ return _CampaignId;}
            set
            {
                _CampaignId = value;
                _flagCampaignId = true;
            }
        }
        private string _CampaignId;
        private bool _flagCampaignId;

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return _flagCampaignId;
        }
        /// <summary>
        /// Gets or Sets ValidationRulesAssignments
        /// </summary>
        [DataMember(Name = "validation_rules_assignments", EmitDefaultValue = true)]
        public ValidationRulesAssignmentsList ValidationRulesAssignments
        {
            get{ return _ValidationRulesAssignments;}
            set
            {
                _ValidationRulesAssignments = value;
                _flagValidationRulesAssignments = true;
            }
        }
        private ValidationRulesAssignmentsList _ValidationRulesAssignments;
        private bool _flagValidationRulesAssignments;

        /// <summary>
        /// Returns false as ValidationRulesAssignments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationRulesAssignments()
        {
            return _flagValidationRulesAssignments;
        }
        /// <summary>
        /// Gets or Sets Redeemables
        /// </summary>
        [DataMember(Name = "redeemables", EmitDefaultValue = true)]
        public List<QualificationsRedeemableBase> Redeemables
        {
            get{ return _Redeemables;}
            set
            {
                _Redeemables = value;
                _flagRedeemables = true;
            }
        }
        private List<QualificationsRedeemableBase> _Redeemables;
        private bool _flagRedeemables;

        /// <summary>
        /// Returns false as Redeemables should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemables()
        {
            return _flagRedeemables;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QualificationsRedeemable {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ValidationRuleId: ").Append(ValidationRuleId).Append("\n");
            sb.Append("  ApplicableTo: ").Append(ApplicableTo).Append("\n");
            sb.Append("  InapplicableTo: ").Append(InapplicableTo).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  ValidationRulesAssignments: ").Append(ValidationRulesAssignments).Append("\n");
            sb.Append("  Redeemables: ").Append(Redeemables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
