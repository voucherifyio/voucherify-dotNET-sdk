/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Object representing gift parameters. Child attributes are present only if &#x60;type&#x60; is &#x60;GIFT_VOUCHER&#x60;. Defaults to &#x60;null&#x60;.
    /// </summary>
    [DataContract(Name = "VouchersEnableResponseBodyGift")]
    public partial class VouchersEnableResponseBodyGift : IValidatableObject
    {
        /// <summary>
        /// Defines how the credits are applied to the customer&#39;s order.
        /// </summary>
        /// <value>Defines how the credits are applied to the customer&#39;s order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EffectEnum
        {
            /// <summary>
            /// Enum APPLYTOORDER for value: APPLY_TO_ORDER
            /// </summary>
            [EnumMember(Value = "APPLY_TO_ORDER")]
            APPLYTOORDER = 1,

            /// <summary>
            /// Enum APPLYTOITEMS for value: APPLY_TO_ITEMS
            /// </summary>
            [EnumMember(Value = "APPLY_TO_ITEMS")]
            APPLYTOITEMS = 2
        }


        /// <summary>
        /// Defines how the credits are applied to the customer&#39;s order.
        /// </summary>
        /// <value>Defines how the credits are applied to the customer&#39;s order.</value>

        [DataMember(Name = "effect", EmitDefaultValue = true)]
        public EffectEnum? Effect
        {
            get{ return _Effect;}
            set
            {
                _Effect = value;
                _flagEffect = true;
            }
        }
        private EffectEnum? _Effect;
        private bool _flagEffect;

        /// <summary>
        /// Returns false as Effect should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEffect()
        {
            return _flagEffect;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersEnableResponseBodyGift" /> class.
        /// </summary>
        /// <param name="amount">Total gift card income over the lifetime of the card. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="subtractedAmount">Total amount of subtracted credits over the gift card lifetime. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="balance">Available funds. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="effect">Defines how the credits are applied to the customer&#39;s order..</param>
        public VouchersEnableResponseBodyGift(int? amount = default(int?), int? subtractedAmount = default(int?), int? balance = default(int?), EffectEnum? effect = default(EffectEnum?))
        {
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
            this._SubtractedAmount = subtractedAmount;
            if (this.SubtractedAmount != null)
            {
                this._flagSubtractedAmount = true;
            }
            this._Balance = balance;
            if (this.Balance != null)
            {
                this._flagBalance = true;
            }
            this._Effect = effect;
            if (this.Effect != null)
            {
                this._flagEffect = true;
            }
        }

        /// <summary>
        /// Total gift card income over the lifetime of the card. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Total gift card income over the lifetime of the card. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        /*
        <example>10000</example>
        */
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public int? Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private int? _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// Total amount of subtracted credits over the gift card lifetime. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Total amount of subtracted credits over the gift card lifetime. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "subtracted_amount", EmitDefaultValue = true)]
        public int? SubtractedAmount
        {
            get{ return _SubtractedAmount;}
            set
            {
                _SubtractedAmount = value;
                _flagSubtractedAmount = true;
            }
        }
        private int? _SubtractedAmount;
        private bool _flagSubtractedAmount;

        /// <summary>
        /// Returns false as SubtractedAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubtractedAmount()
        {
            return _flagSubtractedAmount;
        }
        /// <summary>
        /// Available funds. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Available funds. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        /*
        <example>500</example>
        */
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public int? Balance
        {
            get{ return _Balance;}
            set
            {
                _Balance = value;
                _flagBalance = true;
            }
        }
        private int? _Balance;
        private bool _flagBalance;

        /// <summary>
        /// Returns false as Balance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBalance()
        {
            return _flagBalance;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VouchersEnableResponseBodyGift {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SubtractedAmount: ").Append(SubtractedAmount).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
