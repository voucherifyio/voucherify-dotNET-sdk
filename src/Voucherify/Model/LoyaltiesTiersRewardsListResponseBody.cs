/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **GET** &#x60;v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards&#x60;.
    /// </summary>
    [DataContract(Name = "LoyaltiesTiersRewardsListResponseBody")]
    public partial class LoyaltiesTiersRewardsListResponseBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesTiersRewardsListResponseBody" /> class.
        /// </summary>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about loyalty tier rewards in a dictionary. (default to &quot;list&quot;).</param>
        /// <param name="dataRef">Identifies the name of the attribute that contains the array of loyalty tier reward objects. (default to &quot;data&quot;).</param>
        /// <param name="data">Contains array of loyalty tier reward objects..</param>
        /// <param name="total">Total number of loyalty tier reward objects..</param>
        public LoyaltiesTiersRewardsListResponseBody(string varObject = @"list", string dataRef = @"data", List<LoyaltiesLoyaltyTierReward> data = default(List<LoyaltiesLoyaltyTierReward>), int? total = default(int?))
        {
            this._Data = data;
            if (this.Data != null)
            {
                this._flagData = true;
            }
            this._Total = total;
            if (this.Total != null)
            {
                this._flagTotal = true;
            }
        }

        /// <summary>
        /// The type of the object represented by JSON. This object stores information about loyalty tier rewards in a dictionary.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about loyalty tier rewards in a dictionary.</value>
        [DataMember(Name = "object", EmitDefaultValue = true)]
        public string Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private string _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Identifies the name of the attribute that contains the array of loyalty tier reward objects.
        /// </summary>
        /// <value>Identifies the name of the attribute that contains the array of loyalty tier reward objects.</value>
        [DataMember(Name = "data_ref", EmitDefaultValue = true)]
        public string DataRef
        {
            get{ return _DataRef;}
            set
            {
                _DataRef = value;
                _flagDataRef = true;
            }
        }
        private string _DataRef;
        private bool _flagDataRef;

        /// <summary>
        /// Returns false as DataRef should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDataRef()
        {
            return _flagDataRef;
        }
        /// <summary>
        /// Contains array of loyalty tier reward objects.
        /// </summary>
        /// <value>Contains array of loyalty tier reward objects.</value>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public List<LoyaltiesLoyaltyTierReward> Data
        {
            get{ return _Data;}
            set
            {
                _Data = value;
                _flagData = true;
            }
        }
        private List<LoyaltiesLoyaltyTierReward> _Data;
        private bool _flagData;

        /// <summary>
        /// Returns false as Data should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeData()
        {
            return _flagData;
        }
        /// <summary>
        /// Total number of loyalty tier reward objects.
        /// </summary>
        /// <value>Total number of loyalty tier reward objects.</value>
        [DataMember(Name = "total", EmitDefaultValue = true)]
        public int? Total
        {
            get{ return _Total;}
            set
            {
                _Total = value;
                _flagTotal = true;
            }
        }
        private int? _Total;
        private bool _flagTotal;

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return _flagTotal;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltiesTiersRewardsListResponseBody {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  DataRef: ").Append(DataRef).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
