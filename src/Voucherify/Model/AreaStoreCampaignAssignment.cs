/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// An object representing an assignment of a campaign to an area or store.
    /// </summary>
    [DataContract(Name = "AreaStoreCampaignAssignment")]
    public partial class AreaStoreCampaignAssignment : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the campaign assignment to areas or stores.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the campaign assignment to areas or stores.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum AreaStoreCampaignAssignment for value: area_store_campaign_assignment
            /// </summary>
            [EnumMember(Value = "area_store_campaign_assignment")]
            AreaStoreCampaignAssignment = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the campaign assignment to areas or stores.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the campaign assignment to areas or stores.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="AreaStoreCampaignAssignment" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the campaign assignment..</param>
        /// <param name="areaId">Unique identifier of the area to which the campaign is assigned..</param>
        /// <param name="allStores">Determines if the campaign is assigned to all of the stores in the area, i.e. if an area ID is passed in the &#x60;access_settings.assign.area_all_stores_ids&#x60; in the request..</param>
        /// <param name="areaStoreId">Unique identifier of the store to which the campaign is assigned..</param>
        /// <param name="createdAt">Date and time when the assignment was made. The value is shown in the ISO 8601 format..</param>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about the campaign assignment to areas or stores..</param>
        public AreaStoreCampaignAssignment(string id = default(string), string areaId = default(string), bool? allStores = default(bool?), string areaStoreId = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), ObjectEnum? varObject = default(ObjectEnum?))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._AreaId = areaId;
            if (this.AreaId != null)
            {
                this._flagAreaId = true;
            }
            this._AllStores = allStores;
            if (this.AllStores != null)
            {
                this._flagAllStores = true;
            }
            this._AreaStoreId = areaStoreId;
            if (this.AreaStoreId != null)
            {
                this._flagAreaStoreId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
        }

        /// <summary>
        /// Unique identifier of the campaign assignment.
        /// </summary>
        /// <value>Unique identifier of the campaign assignment.</value>
        /*
        <example>arsca_0ef5ee192117ae2416</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Unique identifier of the area to which the campaign is assigned.
        /// </summary>
        /// <value>Unique identifier of the area to which the campaign is assigned.</value>
        /*
        <example>ar_0ea6cd7b781b8f857f</example>
        */
        [DataMember(Name = "area_id", EmitDefaultValue = true)]
        public string AreaId
        {
            get{ return _AreaId;}
            set
            {
                _AreaId = value;
                _flagAreaId = true;
            }
        }
        private string _AreaId;
        private bool _flagAreaId;

        /// <summary>
        /// Returns false as AreaId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreaId()
        {
            return _flagAreaId;
        }
        /// <summary>
        /// Determines if the campaign is assigned to all of the stores in the area, i.e. if an area ID is passed in the &#x60;access_settings.assign.area_all_stores_ids&#x60; in the request.
        /// </summary>
        /// <value>Determines if the campaign is assigned to all of the stores in the area, i.e. if an area ID is passed in the &#x60;access_settings.assign.area_all_stores_ids&#x60; in the request.</value>
        [DataMember(Name = "all_stores", EmitDefaultValue = true)]
        public bool? AllStores
        {
            get{ return _AllStores;}
            set
            {
                _AllStores = value;
                _flagAllStores = true;
            }
        }
        private bool? _AllStores;
        private bool _flagAllStores;

        /// <summary>
        /// Returns false as AllStores should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllStores()
        {
            return _flagAllStores;
        }
        /// <summary>
        /// Unique identifier of the store to which the campaign is assigned.
        /// </summary>
        /// <value>Unique identifier of the store to which the campaign is assigned.</value>
        /*
        <example>ars_0ec347e2016bed85f4</example>
        */
        [DataMember(Name = "area_store_id", EmitDefaultValue = true)]
        public string AreaStoreId
        {
            get{ return _AreaStoreId;}
            set
            {
                _AreaStoreId = value;
                _flagAreaStoreId = true;
            }
        }
        private string _AreaStoreId;
        private bool _flagAreaStoreId;

        /// <summary>
        /// Returns false as AreaStoreId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreaStoreId()
        {
            return _flagAreaStoreId;
        }
        /// <summary>
        /// Date and time when the assignment was made. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Date and time when the assignment was made. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2024-06-25T19:04:16.260Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AreaStoreCampaignAssignment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AreaId: ").Append(AreaId).Append("\n");
            sb.Append("  AllStores: ").Append(AllStores).Append("\n");
            sb.Append("  AreaStoreId: ").Append(AreaStoreId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
