/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Data filters used to narrow down the data records to be returned in the result.
    /// </summary>
    [DataContract(Name = "QualificationsOptionFiltersHolderRoleConditions")]
    public partial class QualificationsOptionFiltersHolderRoleConditions : IValidatableObject
    {
        /// <summary>
        /// Defines Is
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsEnum
        {
            /// <summary>
            /// Enum OWNER for value: OWNER
            /// </summary>
            [EnumMember(Value = "OWNER")]
            OWNER = 1,

            /// <summary>
            /// Enum REFERRER for value: REFERRER
            /// </summary>
            [EnumMember(Value = "REFERRER")]
            REFERRER = 2,

            /// <summary>
            /// Enum REFEREE for value: REFEREE
            /// </summary>
            [EnumMember(Value = "REFEREE")]
            REFEREE = 3
        }

        /// <summary>
        /// Defines IsNot
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsNotEnum
        {
            /// <summary>
            /// Enum OWNER for value: OWNER
            /// </summary>
            [EnumMember(Value = "OWNER")]
            OWNER = 1,

            /// <summary>
            /// Enum REFERRER for value: REFERRER
            /// </summary>
            [EnumMember(Value = "REFERRER")]
            REFERRER = 2,

            /// <summary>
            /// Enum REFEREE for value: REFEREE
            /// </summary>
            [EnumMember(Value = "REFEREE")]
            REFEREE = 3
        }

        /// <summary>
        /// Defines In
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InEnum
        {
            /// <summary>
            /// Enum OWNER for value: OWNER
            /// </summary>
            [EnumMember(Value = "OWNER")]
            OWNER = 1,

            /// <summary>
            /// Enum REFERRER for value: REFERRER
            /// </summary>
            [EnumMember(Value = "REFERRER")]
            REFERRER = 2,

            /// <summary>
            /// Enum REFEREE for value: REFEREE
            /// </summary>
            [EnumMember(Value = "REFEREE")]
            REFEREE = 3
        }

        /// <summary>
        /// Defines NotIn
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NotInEnum
        {
            /// <summary>
            /// Enum OWNER for value: OWNER
            /// </summary>
            [EnumMember(Value = "OWNER")]
            OWNER = 1,

            /// <summary>
            /// Enum REFERRER for value: REFERRER
            /// </summary>
            [EnumMember(Value = "REFERRER")]
            REFERRER = 2,

            /// <summary>
            /// Enum REFEREE for value: REFEREE
            /// </summary>
            [EnumMember(Value = "REFEREE")]
            REFEREE = 3
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QualificationsOptionFiltersHolderRoleConditions" /> class.
        /// </summary>
        /// <param name="varIs">Will return records only for the first value in the array..</param>
        /// <param name="isNot">Will return records only for the first value in the array..</param>
        /// <param name="varIn">Will return records for the values in the array..</param>
        /// <param name="notIn">Will return records for the values in the array..</param>
        public QualificationsOptionFiltersHolderRoleConditions(List<IsEnum> varIs = default(List<IsEnum>), List<IsNotEnum> isNot = default(List<IsNotEnum>), List<InEnum> varIn = default(List<InEnum>), List<NotInEnum> notIn = default(List<NotInEnum>))
        {
            this._Is = varIs;
            if (this.Is != null)
            {
                this._flagIs = true;
            }
            this._IsNot = isNot;
            if (this.IsNot != null)
            {
                this._flagIsNot = true;
            }
            this._In = varIn;
            if (this.In != null)
            {
                this._flagIn = true;
            }
            this._NotIn = notIn;
            if (this.NotIn != null)
            {
                this._flagNotIn = true;
            }
        }

        /// <summary>
        /// Will return records only for the first value in the array.
        /// </summary>
        /// <value>Will return records only for the first value in the array.</value>
        [DataMember(Name = "$is", EmitDefaultValue = true)]
        public List<QualificationsOptionFiltersHolderRoleConditions.IsEnum> Is
        {
            get{ return _Is;}
            set
            {
                _Is = value;
                _flagIs = true;
            }
        }
        private List<QualificationsOptionFiltersHolderRoleConditions.IsEnum> _Is;
        private bool _flagIs;

        /// <summary>
        /// Returns false as Is should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIs()
        {
            return _flagIs;
        }
        /// <summary>
        /// Will return records only for the first value in the array.
        /// </summary>
        /// <value>Will return records only for the first value in the array.</value>
        [DataMember(Name = "$is_not", EmitDefaultValue = true)]
        public List<QualificationsOptionFiltersHolderRoleConditions.IsNotEnum> IsNot
        {
            get{ return _IsNot;}
            set
            {
                _IsNot = value;
                _flagIsNot = true;
            }
        }
        private List<QualificationsOptionFiltersHolderRoleConditions.IsNotEnum> _IsNot;
        private bool _flagIsNot;

        /// <summary>
        /// Returns false as IsNot should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsNot()
        {
            return _flagIsNot;
        }
        /// <summary>
        /// Will return records for the values in the array.
        /// </summary>
        /// <value>Will return records for the values in the array.</value>
        [DataMember(Name = "$in", EmitDefaultValue = true)]
        public List<QualificationsOptionFiltersHolderRoleConditions.InEnum> In
        {
            get{ return _In;}
            set
            {
                _In = value;
                _flagIn = true;
            }
        }
        private List<QualificationsOptionFiltersHolderRoleConditions.InEnum> _In;
        private bool _flagIn;

        /// <summary>
        /// Returns false as In should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIn()
        {
            return _flagIn;
        }
        /// <summary>
        /// Will return records for the values in the array.
        /// </summary>
        /// <value>Will return records for the values in the array.</value>
        [DataMember(Name = "$not_in", EmitDefaultValue = true)]
        public List<QualificationsOptionFiltersHolderRoleConditions.NotInEnum> NotIn
        {
            get{ return _NotIn;}
            set
            {
                _NotIn = value;
                _flagNotIn = true;
            }
        }
        private List<QualificationsOptionFiltersHolderRoleConditions.NotInEnum> _NotIn;
        private bool _flagNotIn;

        /// <summary>
        /// Returns false as NotIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotIn()
        {
            return _flagNotIn;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QualificationsOptionFiltersHolderRoleConditions {\n");
            sb.Append("  Is: ").Append(Is).Append("\n");
            sb.Append("  IsNot: ").Append(IsNot).Append("\n");
            sb.Append("  In: ").Append(In).Append("\n");
            sb.Append("  NotIn: ").Append(NotIn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
