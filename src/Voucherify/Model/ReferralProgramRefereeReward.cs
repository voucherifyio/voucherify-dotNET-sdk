/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the referee reward.
    /// </summary>
    [DataContract(Name = "ReferralProgramRefereeReward")]
    public partial class ReferralProgramRefereeReward : IValidatableObject
    {
        /// <summary>
        /// Type of reward.
        /// </summary>
        /// <value>Type of reward.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum LOYALTYCARD for value: LOYALTY_CARD
            /// </summary>
            [EnumMember(Value = "LOYALTY_CARD")]
            LOYALTYCARD = 1,

            /// <summary>
            /// Enum GIFTVOUCHER for value: GIFT_VOUCHER
            /// </summary>
            [EnumMember(Value = "GIFT_VOUCHER")]
            GIFTVOUCHER = 2
        }


        /// <summary>
        /// Type of reward.
        /// </summary>
        /// <value>Type of reward.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferralProgramRefereeReward" /> class.
        /// </summary>
        /// <param name="relatedObjectParent">relatedObjectParent.</param>
        /// <param name="type">Type of reward..</param>
        /// <param name="amount">Define the number of &#x60;points&#x60; to add to a loyalty card or &#x60;credits&#x60; to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000..</param>
        public ReferralProgramRefereeReward(ReferralProgramRefereeRewardRelatedObjectParent relatedObjectParent = default(ReferralProgramRefereeRewardRelatedObjectParent), TypeEnum? type = default(TypeEnum?), string amount = default(string))
        {
            this._RelatedObjectParent = relatedObjectParent;
            if (this.RelatedObjectParent != null)
            {
                this._flagRelatedObjectParent = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
        }

        /// <summary>
        /// Gets or Sets RelatedObjectParent
        /// </summary>
        [DataMember(Name = "related_object_parent", EmitDefaultValue = true)]
        public ReferralProgramRefereeRewardRelatedObjectParent RelatedObjectParent
        {
            get{ return _RelatedObjectParent;}
            set
            {
                _RelatedObjectParent = value;
                _flagRelatedObjectParent = true;
            }
        }
        private ReferralProgramRefereeRewardRelatedObjectParent _RelatedObjectParent;
        private bool _flagRelatedObjectParent;

        /// <summary>
        /// Returns false as RelatedObjectParent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectParent()
        {
            return _flagRelatedObjectParent;
        }
        /// <summary>
        /// Define the number of &#x60;points&#x60; to add to a loyalty card or &#x60;credits&#x60; to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.
        /// </summary>
        /// <value>Define the number of &#x60;points&#x60; to add to a loyalty card or &#x60;credits&#x60; to the balance on a gift card. In case of the gift card, the value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public string Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private string _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReferralProgramRefereeReward {\n");
            sb.Append("  RelatedObjectParent: ").Append(RelatedObjectParent).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
