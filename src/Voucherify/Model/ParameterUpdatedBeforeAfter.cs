/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ParameterUpdatedBeforeAfter
    /// </summary>
    [DataContract(Name = "ParameterUpdatedBeforeAfter")]
    public partial class ParameterUpdatedBeforeAfter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterUpdatedBeforeAfter" /> class.
        /// </summary>
        /// <param name="before">Timestamp representing the date and time before the voucher was updated. The value is shown in the ISO 8601 format..</param>
        /// <param name="after">Timestamp representing the date and time after the voucher was updated. The value is shown in the ISO 8601 format..</param>
        public ParameterUpdatedBeforeAfter(DateTimeOffset? before = default(DateTimeOffset?), DateTimeOffset? after = default(DateTimeOffset?))
        {
            this._Before = before;
            if (this.Before != null)
            {
                this._flagBefore = true;
            }
            this._After = after;
            if (this.After != null)
            {
                this._flagAfter = true;
            }
        }

        /// <summary>
        /// Timestamp representing the date and time before the voucher was updated. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time before the voucher was updated. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-22T10:13:06.487Z</example>
        */
        [DataMember(Name = "before", EmitDefaultValue = true)]
        public DateTimeOffset? Before
        {
            get{ return _Before;}
            set
            {
                _Before = value;
                _flagBefore = true;
            }
        }
        private DateTimeOffset? _Before;
        private bool _flagBefore;

        /// <summary>
        /// Returns false as Before should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBefore()
        {
            return _flagBefore;
        }
        /// <summary>
        /// Timestamp representing the date and time after the voucher was updated. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time after the voucher was updated. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-22T10:13:06.487Z</example>
        */
        [DataMember(Name = "after", EmitDefaultValue = true)]
        public DateTimeOffset? After
        {
            get{ return _After;}
            set
            {
                _After = value;
                _flagAfter = true;
            }
        }
        private DateTimeOffset? _After;
        private bool _flagAfter;

        /// <summary>
        /// Returns false as After should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAfter()
        {
            return _flagAfter;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterUpdatedBeforeAfter {\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
