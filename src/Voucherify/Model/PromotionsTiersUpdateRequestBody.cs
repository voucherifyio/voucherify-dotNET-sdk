/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request body schema for **PUT** &#x60;v1/promotions/tiers/{promotionTierId}&#x60;.
    /// </summary>
    [DataContract(Name = "PromotionsTiersUpdateRequestBody")]
    public partial class PromotionsTiersUpdateRequestBody : IValidatableObject
    {
        /// <summary>
        /// Defines ValidityDayOfWeek
        /// </summary>
        public enum ValidityDayOfWeekEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsTiersUpdateRequestBody" /> class.
        /// </summary>
        /// <param name="name">Name of the promotion tier..</param>
        /// <param name="banner">Text to be displayed to your customers on your website..</param>
        /// <param name="action">action.</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format..</param>
        /// <param name="hierarchy">The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer&#39;s order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy..</param>
        /// <param name="startDate">Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. .</param>
        /// <param name="expirationDate">Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. .</param>
        /// <param name="validityTimeframe">validityTimeframe.</param>
        /// <param name="validityDayOfWeek">Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday.</param>
        /// <param name="validityHours">validityHours.</param>
        /// <param name="validationRuleAssignments">validationRuleAssignments.</param>
        /// <param name="category">Assign a new or update the promotion tier&#39;s category using name..</param>
        /// <param name="categoryId">Assign a new or update the promotion tier&#39;s category using id.</param>
        public PromotionsTiersUpdateRequestBody(string name = default(string), string banner = default(string), PromotionsTiersUpdateRequestBodyAction action = default(PromotionsTiersUpdateRequestBodyAction), Object metadata = default(Object), int? hierarchy = default(int?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? expirationDate = default(DateTimeOffset?), ValidityTimeframe validityTimeframe = default(ValidityTimeframe), List<ValidityDayOfWeekEnum> validityDayOfWeek = default(List<ValidityDayOfWeekEnum>), ValidityHours validityHours = default(ValidityHours), ValidationRuleAssignmentsList validationRuleAssignments = default(ValidationRuleAssignmentsList), string category = default(string), string categoryId = default(string))
        {
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Banner = banner;
            if (this.Banner != null)
            {
                this._flagBanner = true;
            }
            this._Action = action;
            if (this.Action != null)
            {
                this._flagAction = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._Hierarchy = hierarchy;
            if (this.Hierarchy != null)
            {
                this._flagHierarchy = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._ValidityTimeframe = validityTimeframe;
            if (this.ValidityTimeframe != null)
            {
                this._flagValidityTimeframe = true;
            }
            this._ValidityDayOfWeek = validityDayOfWeek;
            if (this.ValidityDayOfWeek != null)
            {
                this._flagValidityDayOfWeek = true;
            }
            this._ValidityHours = validityHours;
            if (this.ValidityHours != null)
            {
                this._flagValidityHours = true;
            }
            this._ValidationRuleAssignments = validationRuleAssignments;
            if (this.ValidationRuleAssignments != null)
            {
                this._flagValidationRuleAssignments = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._CategoryId = categoryId;
            if (this.CategoryId != null)
            {
                this._flagCategoryId = true;
            }
        }

        /// <summary>
        /// Name of the promotion tier.
        /// </summary>
        /// <value>Name of the promotion tier.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Text to be displayed to your customers on your website.
        /// </summary>
        /// <value>Text to be displayed to your customers on your website.</value>
        [DataMember(Name = "banner", EmitDefaultValue = true)]
        public string Banner
        {
            get{ return _Banner;}
            set
            {
                _Banner = value;
                _flagBanner = true;
            }
        }
        private string _Banner;
        private bool _flagBanner;

        /// <summary>
        /// Returns false as Banner should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBanner()
        {
            return _flagBanner;
        }
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = true)]
        public PromotionsTiersUpdateRequestBodyAction Action
        {
            get{ return _Action;}
            set
            {
                _Action = value;
                _flagAction = true;
            }
        }
        private PromotionsTiersUpdateRequestBodyAction _Action;
        private bool _flagAction;

        /// <summary>
        /// Returns false as Action should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAction()
        {
            return _flagAction;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer&#39;s order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy.
        /// </summary>
        /// <value>The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer&#39;s order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy.</value>
        [DataMember(Name = "hierarchy", EmitDefaultValue = true)]
        public int? Hierarchy
        {
            get{ return _Hierarchy;}
            set
            {
                _Hierarchy = value;
                _flagHierarchy = true;
            }
        }
        private int? _Hierarchy;
        private bool _flagHierarchy;

        /// <summary>
        /// Returns false as Hierarchy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHierarchy()
        {
            return _flagHierarchy;
        }
        /// <summary>
        /// Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. 
        /// </summary>
        /// <value>Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. </value>
        /*
        <example>2022-09-23T00:00Z</example>
        */
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTimeOffset? StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private DateTimeOffset? _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. 
        /// </summary>
        /// <value>Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. </value>
        /*
        <example>2022-09-26T00:00Z</example>
        */
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// Gets or Sets ValidityTimeframe
        /// </summary>
        [DataMember(Name = "validity_timeframe", EmitDefaultValue = true)]
        public ValidityTimeframe ValidityTimeframe
        {
            get{ return _ValidityTimeframe;}
            set
            {
                _ValidityTimeframe = value;
                _flagValidityTimeframe = true;
            }
        }
        private ValidityTimeframe _ValidityTimeframe;
        private bool _flagValidityTimeframe;

        /// <summary>
        /// Returns false as ValidityTimeframe should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityTimeframe()
        {
            return _flagValidityTimeframe;
        }
        /// <summary>
        /// Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday
        /// </summary>
        /// <value>Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday</value>
        [DataMember(Name = "validity_day_of_week", EmitDefaultValue = true)]
        public List<PromotionsTiersUpdateRequestBody.ValidityDayOfWeekEnum> ValidityDayOfWeek
        {
            get{ return _ValidityDayOfWeek;}
            set
            {
                _ValidityDayOfWeek = value;
                _flagValidityDayOfWeek = true;
            }
        }
        private List<PromotionsTiersUpdateRequestBody.ValidityDayOfWeekEnum> _ValidityDayOfWeek;
        private bool _flagValidityDayOfWeek;

        /// <summary>
        /// Returns false as ValidityDayOfWeek should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityDayOfWeek()
        {
            return _flagValidityDayOfWeek;
        }
        /// <summary>
        /// Gets or Sets ValidityHours
        /// </summary>
        [DataMember(Name = "validity_hours", EmitDefaultValue = true)]
        public ValidityHours ValidityHours
        {
            get{ return _ValidityHours;}
            set
            {
                _ValidityHours = value;
                _flagValidityHours = true;
            }
        }
        private ValidityHours _ValidityHours;
        private bool _flagValidityHours;

        /// <summary>
        /// Returns false as ValidityHours should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityHours()
        {
            return _flagValidityHours;
        }
        /// <summary>
        /// Gets or Sets ValidationRuleAssignments
        /// </summary>
        [DataMember(Name = "validation_rule_assignments", EmitDefaultValue = true)]
        public ValidationRuleAssignmentsList ValidationRuleAssignments
        {
            get{ return _ValidationRuleAssignments;}
            set
            {
                _ValidationRuleAssignments = value;
                _flagValidationRuleAssignments = true;
            }
        }
        private ValidationRuleAssignmentsList _ValidationRuleAssignments;
        private bool _flagValidationRuleAssignments;

        /// <summary>
        /// Returns false as ValidationRuleAssignments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationRuleAssignments()
        {
            return _flagValidationRuleAssignments;
        }
        /// <summary>
        /// Assign a new or update the promotion tier&#39;s category using name.
        /// </summary>
        /// <value>Assign a new or update the promotion tier&#39;s category using name.</value>
        /*
        <example>cat_0c9da30e7116ba6bba</example>
        */
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get{ return _Category;}
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// Assign a new or update the promotion tier&#39;s category using id
        /// </summary>
        /// <value>Assign a new or update the promotion tier&#39;s category using id</value>
        /*
        <example>cat_0c9da30e7116ba6bba</example>
        */
        [DataMember(Name = "category_id", EmitDefaultValue = true)]
        public string CategoryId
        {
            get{ return _CategoryId;}
            set
            {
                _CategoryId = value;
                _flagCategoryId = true;
            }
        }
        private string _CategoryId;
        private bool _flagCategoryId;

        /// <summary>
        /// Returns false as CategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryId()
        {
            return _flagCategoryId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PromotionsTiersUpdateRequestBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ValidityTimeframe: ").Append(ValidityTimeframe).Append("\n");
            sb.Append("  ValidityDayOfWeek: ").Append(ValidityDayOfWeek).Append("\n");
            sb.Append("  ValidityHours: ").Append(ValidityHours).Append("\n");
            sb.Append("  ValidationRuleAssignments: ").Append(ValidationRuleAssignments).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
