/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the address details.
    /// </summary>
    [DataContract(Name = "ManagementProjectsBrandingCreateResponseBodyAddress")]
    public partial class ManagementProjectsBrandingCreateResponseBodyAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsBrandingCreateResponseBodyAddress" /> class.
        /// </summary>
        /// <param name="street">Defines the brand&#39;s street..</param>
        /// <param name="city">Defines the brand&#39;s city..</param>
        /// <param name="postal">Defines the brand&#39;s postal code..</param>
        /// <param name="state">Defines the brand&#39;s state or similar administrative area..</param>
        /// <param name="country">Defines the brand&#39;s country..</param>
        public ManagementProjectsBrandingCreateResponseBodyAddress(string street = default(string), string city = default(string), string postal = default(string), string state = default(string), string country = default(string))
        {
            this._Street = street;
            if (this.Street != null)
            {
                this._flagStreet = true;
            }
            this._City = city;
            if (this.City != null)
            {
                this._flagCity = true;
            }
            this._Postal = postal;
            if (this.Postal != null)
            {
                this._flagPostal = true;
            }
            this._State = state;
            if (this.State != null)
            {
                this._flagState = true;
            }
            this._Country = country;
            if (this.Country != null)
            {
                this._flagCountry = true;
            }
        }

        /// <summary>
        /// Defines the brand&#39;s street.
        /// </summary>
        /// <value>Defines the brand&#39;s street.</value>
        [DataMember(Name = "street", EmitDefaultValue = true)]
        public string Street
        {
            get{ return _Street;}
            set
            {
                _Street = value;
                _flagStreet = true;
            }
        }
        private string _Street;
        private bool _flagStreet;

        /// <summary>
        /// Returns false as Street should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStreet()
        {
            return _flagStreet;
        }
        /// <summary>
        /// Defines the brand&#39;s city.
        /// </summary>
        /// <value>Defines the brand&#39;s city.</value>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City
        {
            get{ return _City;}
            set
            {
                _City = value;
                _flagCity = true;
            }
        }
        private string _City;
        private bool _flagCity;

        /// <summary>
        /// Returns false as City should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCity()
        {
            return _flagCity;
        }
        /// <summary>
        /// Defines the brand&#39;s postal code.
        /// </summary>
        /// <value>Defines the brand&#39;s postal code.</value>
        [DataMember(Name = "postal", EmitDefaultValue = true)]
        public string Postal
        {
            get{ return _Postal;}
            set
            {
                _Postal = value;
                _flagPostal = true;
            }
        }
        private string _Postal;
        private bool _flagPostal;

        /// <summary>
        /// Returns false as Postal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostal()
        {
            return _flagPostal;
        }
        /// <summary>
        /// Defines the brand&#39;s state or similar administrative area.
        /// </summary>
        /// <value>Defines the brand&#39;s state or similar administrative area.</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State
        {
            get{ return _State;}
            set
            {
                _State = value;
                _flagState = true;
            }
        }
        private string _State;
        private bool _flagState;

        /// <summary>
        /// Returns false as State should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeState()
        {
            return _flagState;
        }
        /// <summary>
        /// Defines the brand&#39;s country.
        /// </summary>
        /// <value>Defines the brand&#39;s country.</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country
        {
            get{ return _Country;}
            set
            {
                _Country = value;
                _flagCountry = true;
            }
        }
        private string _Country;
        private bool _flagCountry;

        /// <summary>
        /// Returns false as Country should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountry()
        {
            return _flagCountry;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsBrandingCreateResponseBodyAddress {\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Postal: ").Append(Postal).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
