/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines customer cockpit details.
    /// </summary>
    [DataContract(Name = "ManagementProjectsBrandingCockpits")]
    public partial class ManagementProjectsBrandingCockpits : IValidatableObject
    {
        /// <summary>
        /// Determines the color scheme of the customer cockpit.
        /// </summary>
        /// <value>Determines the color scheme of the customer cockpit.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThemeEnum
        {
            /// <summary>
            /// Enum Blue for value: blue
            /// </summary>
            [EnumMember(Value = "blue")]
            Blue = 1,

            /// <summary>
            /// Enum DarkGreen for value: dark-green
            /// </summary>
            [EnumMember(Value = "dark-green")]
            DarkGreen = 2,

            /// <summary>
            /// Enum Default for value: default
            /// </summary>
            [EnumMember(Value = "default")]
            Default = 3,

            /// <summary>
            /// Enum Green for value: green
            /// </summary>
            [EnumMember(Value = "green")]
            Green = 4,

            /// <summary>
            /// Enum Grey for value: grey
            /// </summary>
            [EnumMember(Value = "grey")]
            Grey = 5,

            /// <summary>
            /// Enum Orange for value: orange
            /// </summary>
            [EnumMember(Value = "orange")]
            Orange = 6,

            /// <summary>
            /// Enum Purple for value: purple
            /// </summary>
            [EnumMember(Value = "purple")]
            Purple = 7,

            /// <summary>
            /// Enum Red for value: red
            /// </summary>
            [EnumMember(Value = "red")]
            Red = 8
        }


        /// <summary>
        /// Determines the color scheme of the customer cockpit.
        /// </summary>
        /// <value>Determines the color scheme of the customer cockpit.</value>

        [DataMember(Name = "theme", EmitDefaultValue = true)]
        public ThemeEnum? Theme
        {
            get{ return _Theme;}
            set
            {
                _Theme = value;
                _flagTheme = true;
            }
        }
        private ThemeEnum? _Theme;
        private bool _flagTheme;

        /// <summary>
        /// Returns false as Theme should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTheme()
        {
            return _flagTheme;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsBrandingCockpits" /> class.
        /// </summary>
        /// <param name="campaignsOverviewEnabled">Enables the campaign overview for customers..</param>
        /// <param name="loyaltyEnabled">Enables the loyalty campaign overview for customers..</param>
        /// <param name="giftCardsEnabled">Enables the gift card overview for customers..</param>
        /// <param name="couponsEnabled">Enables the discount coupon overview for customers..</param>
        /// <param name="referralsEnabled">Enables the referral campaign overview for customers..</param>
        /// <param name="theme">Determines the color scheme of the customer cockpit..</param>
        /// <param name="useCustomDoubleOptInRedirectUrl">Enables the double opt-in option. It must be a valid URL format..</param>
        /// <param name="customDoubleOptInRedirectUrl">Defines the URL for the double opt-in consent. It must be a valid URL format..</param>
        public ManagementProjectsBrandingCockpits(bool? campaignsOverviewEnabled = default(bool?), bool? loyaltyEnabled = default(bool?), bool? giftCardsEnabled = default(bool?), bool? couponsEnabled = default(bool?), bool? referralsEnabled = default(bool?), ThemeEnum? theme = default(ThemeEnum?), bool? useCustomDoubleOptInRedirectUrl = default(bool?), string customDoubleOptInRedirectUrl = default(string))
        {
            this._CampaignsOverviewEnabled = campaignsOverviewEnabled;
            if (this.CampaignsOverviewEnabled != null)
            {
                this._flagCampaignsOverviewEnabled = true;
            }
            this._LoyaltyEnabled = loyaltyEnabled;
            if (this.LoyaltyEnabled != null)
            {
                this._flagLoyaltyEnabled = true;
            }
            this._GiftCardsEnabled = giftCardsEnabled;
            if (this.GiftCardsEnabled != null)
            {
                this._flagGiftCardsEnabled = true;
            }
            this._CouponsEnabled = couponsEnabled;
            if (this.CouponsEnabled != null)
            {
                this._flagCouponsEnabled = true;
            }
            this._ReferralsEnabled = referralsEnabled;
            if (this.ReferralsEnabled != null)
            {
                this._flagReferralsEnabled = true;
            }
            this._Theme = theme;
            if (this.Theme != null)
            {
                this._flagTheme = true;
            }
            this._UseCustomDoubleOptInRedirectUrl = useCustomDoubleOptInRedirectUrl;
            if (this.UseCustomDoubleOptInRedirectUrl != null)
            {
                this._flagUseCustomDoubleOptInRedirectUrl = true;
            }
            this._CustomDoubleOptInRedirectUrl = customDoubleOptInRedirectUrl;
            if (this.CustomDoubleOptInRedirectUrl != null)
            {
                this._flagCustomDoubleOptInRedirectUrl = true;
            }
        }

        /// <summary>
        /// Enables the campaign overview for customers.
        /// </summary>
        /// <value>Enables the campaign overview for customers.</value>
        [DataMember(Name = "campaigns_overview_enabled", EmitDefaultValue = true)]
        public bool? CampaignsOverviewEnabled
        {
            get{ return _CampaignsOverviewEnabled;}
            set
            {
                _CampaignsOverviewEnabled = value;
                _flagCampaignsOverviewEnabled = true;
            }
        }
        private bool? _CampaignsOverviewEnabled;
        private bool _flagCampaignsOverviewEnabled;

        /// <summary>
        /// Returns false as CampaignsOverviewEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignsOverviewEnabled()
        {
            return _flagCampaignsOverviewEnabled;
        }
        /// <summary>
        /// Enables the loyalty campaign overview for customers.
        /// </summary>
        /// <value>Enables the loyalty campaign overview for customers.</value>
        [DataMember(Name = "loyalty_enabled", EmitDefaultValue = true)]
        public bool? LoyaltyEnabled
        {
            get{ return _LoyaltyEnabled;}
            set
            {
                _LoyaltyEnabled = value;
                _flagLoyaltyEnabled = true;
            }
        }
        private bool? _LoyaltyEnabled;
        private bool _flagLoyaltyEnabled;

        /// <summary>
        /// Returns false as LoyaltyEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyEnabled()
        {
            return _flagLoyaltyEnabled;
        }
        /// <summary>
        /// Enables the gift card overview for customers.
        /// </summary>
        /// <value>Enables the gift card overview for customers.</value>
        [DataMember(Name = "gift_cards_enabled", EmitDefaultValue = true)]
        public bool? GiftCardsEnabled
        {
            get{ return _GiftCardsEnabled;}
            set
            {
                _GiftCardsEnabled = value;
                _flagGiftCardsEnabled = true;
            }
        }
        private bool? _GiftCardsEnabled;
        private bool _flagGiftCardsEnabled;

        /// <summary>
        /// Returns false as GiftCardsEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGiftCardsEnabled()
        {
            return _flagGiftCardsEnabled;
        }
        /// <summary>
        /// Enables the discount coupon overview for customers.
        /// </summary>
        /// <value>Enables the discount coupon overview for customers.</value>
        [DataMember(Name = "coupons_enabled", EmitDefaultValue = true)]
        public bool? CouponsEnabled
        {
            get{ return _CouponsEnabled;}
            set
            {
                _CouponsEnabled = value;
                _flagCouponsEnabled = true;
            }
        }
        private bool? _CouponsEnabled;
        private bool _flagCouponsEnabled;

        /// <summary>
        /// Returns false as CouponsEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCouponsEnabled()
        {
            return _flagCouponsEnabled;
        }
        /// <summary>
        /// Enables the referral campaign overview for customers.
        /// </summary>
        /// <value>Enables the referral campaign overview for customers.</value>
        [DataMember(Name = "referrals_enabled", EmitDefaultValue = true)]
        public bool? ReferralsEnabled
        {
            get{ return _ReferralsEnabled;}
            set
            {
                _ReferralsEnabled = value;
                _flagReferralsEnabled = true;
            }
        }
        private bool? _ReferralsEnabled;
        private bool _flagReferralsEnabled;

        /// <summary>
        /// Returns false as ReferralsEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferralsEnabled()
        {
            return _flagReferralsEnabled;
        }
        /// <summary>
        /// Enables the double opt-in option. It must be a valid URL format.
        /// </summary>
        /// <value>Enables the double opt-in option. It must be a valid URL format.</value>
        [DataMember(Name = "use_custom_double_opt_in_redirect_url", EmitDefaultValue = true)]
        public bool? UseCustomDoubleOptInRedirectUrl
        {
            get{ return _UseCustomDoubleOptInRedirectUrl;}
            set
            {
                _UseCustomDoubleOptInRedirectUrl = value;
                _flagUseCustomDoubleOptInRedirectUrl = true;
            }
        }
        private bool? _UseCustomDoubleOptInRedirectUrl;
        private bool _flagUseCustomDoubleOptInRedirectUrl;

        /// <summary>
        /// Returns false as UseCustomDoubleOptInRedirectUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUseCustomDoubleOptInRedirectUrl()
        {
            return _flagUseCustomDoubleOptInRedirectUrl;
        }
        /// <summary>
        /// Defines the URL for the double opt-in consent. It must be a valid URL format.
        /// </summary>
        /// <value>Defines the URL for the double opt-in consent. It must be a valid URL format.</value>
        [DataMember(Name = "custom_double_opt_in_redirect_url", EmitDefaultValue = true)]
        public string CustomDoubleOptInRedirectUrl
        {
            get{ return _CustomDoubleOptInRedirectUrl;}
            set
            {
                _CustomDoubleOptInRedirectUrl = value;
                _flagCustomDoubleOptInRedirectUrl = true;
            }
        }
        private string _CustomDoubleOptInRedirectUrl;
        private bool _flagCustomDoubleOptInRedirectUrl;

        /// <summary>
        /// Returns false as CustomDoubleOptInRedirectUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomDoubleOptInRedirectUrl()
        {
            return _flagCustomDoubleOptInRedirectUrl;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsBrandingCockpits {\n");
            sb.Append("  CampaignsOverviewEnabled: ").Append(CampaignsOverviewEnabled).Append("\n");
            sb.Append("  LoyaltyEnabled: ").Append(LoyaltyEnabled).Append("\n");
            sb.Append("  GiftCardsEnabled: ").Append(GiftCardsEnabled).Append("\n");
            sb.Append("  CouponsEnabled: ").Append(CouponsEnabled).Append("\n");
            sb.Append("  ReferralsEnabled: ").Append(ReferralsEnabled).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  UseCustomDoubleOptInRedirectUrl: ").Append(UseCustomDoubleOptInRedirectUrl).Append("\n");
            sb.Append("  CustomDoubleOptInRedirectUrl: ").Append(CustomDoubleOptInRedirectUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
