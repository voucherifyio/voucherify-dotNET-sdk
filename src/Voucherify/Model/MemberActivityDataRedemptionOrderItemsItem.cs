/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// MemberActivityDataRedemptionOrderItemsItem
    /// </summary>
    [DataContract(Name = "MemberActivityDataRedemptionOrderItemsItem")]
    public partial class MemberActivityDataRedemptionOrderItemsItem : IValidatableObject
    {
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum OrderItem for value: order_item
            /// </summary>
            [EnumMember(Value = "order_item")]
            OrderItem = 1
        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Defines RelatedObject
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelatedObjectEnum
        {
            /// <summary>
            /// Enum Product for value: product
            /// </summary>
            [EnumMember(Value = "product")]
            Product = 1,

            /// <summary>
            /// Enum Sku for value: sku
            /// </summary>
            [EnumMember(Value = "sku")]
            Sku = 2
        }


        /// <summary>
        /// Gets or Sets RelatedObject
        /// </summary>

        [DataMember(Name = "related_object", EmitDefaultValue = true)]
        public RelatedObjectEnum? RelatedObject
        {
            get{ return _RelatedObject;}
            set
            {
                _RelatedObject = value;
                _flagRelatedObject = true;
            }
        }
        private RelatedObjectEnum? _RelatedObject;
        private bool _flagRelatedObject;

        /// <summary>
        /// Returns false as RelatedObject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObject()
        {
            return _flagRelatedObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberActivityDataRedemptionOrderItemsItem" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the order line item..</param>
        /// <param name="varObject">varObject (default to ObjectEnum.OrderItem).</param>
        /// <param name="sourceId">The merchant&#39;s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service..</param>
        /// <param name="relatedObject">relatedObject.</param>
        /// <param name="productId">Unique identifier of the product. It is assigned by Voucherify..</param>
        /// <param name="skuId">Unique identifier of the SKU. It is assigned by Voucherify..</param>
        /// <param name="quantity">Quantity of the particular item in the cart. and The quantity of the particular item in the cart..</param>
        /// <param name="appliedQuantity">Quantity of items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced..</param>
        /// <param name="appliedQuantityAmount">Amount for the items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced..</param>
        /// <param name="discountQuantity">Number of discounted items. and Number of dicounted items..</param>
        /// <param name="appliedDiscountQuantity">Number of the discounted items applied in the transaction..</param>
        /// <param name="amount">Total amount of the order item (price * quantity). and The total amount of the order item (price * quantity)..</param>
        /// <param name="discountAmount">Sum of all order-item-level discounts applied to the order..</param>
        /// <param name="appliedDiscountAmount">Order-level discount amount applied in the transaction. and This field shows the order-level discount applied..</param>
        /// <param name="price">Unit price of an item. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="subtotalAmount">Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the &#x60;amount&#x60;.    &#x60;subtotal_amount&#x60;&#x3D;&#x60;amount&#x60;-&#x60;discount_amount&#x60; and Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the &#x60;amount&#x60;.    &#x60;subtotal_amount&#x60;&#x3D;&#x60;amount&#x60;-&#x60;applied_discount_amount&#x60;.</param>
        /// <param name="initialQuantity">A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items&#39; quantity..</param>
        /// <param name="initialAmount">A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts..</param>
        /// <param name="product">product.</param>
        /// <param name="sku">sku.</param>
        /// <param name="metadata">A set of custom key/value pairs that you can attach to an item object. It can be useful for storing additional information about the item in a structured format. It can be used to define business validation rules or discount formulas..</param>
        public MemberActivityDataRedemptionOrderItemsItem(string id = default(string), ObjectEnum? varObject = ObjectEnum.OrderItem, string sourceId = default(string), RelatedObjectEnum? relatedObject = default(RelatedObjectEnum?), string productId = default(string), string skuId = default(string), int quantity = default(int), int? appliedQuantity = default(int?), int? appliedQuantityAmount = default(int?), int discountQuantity = default(int), int? appliedDiscountQuantity = default(int?), int amount = default(int), int? discountAmount = default(int?), int appliedDiscountAmount = default(int), int? price = default(int?), int subtotalAmount = default(int), int? initialQuantity = default(int?), int? initialAmount = default(int?), MemberActivityDataRedemptionOrderItemsItemProduct product = default(MemberActivityDataRedemptionOrderItemsItemProduct), MemberActivityDataRedemptionOrderItemsItemSku sku = default(MemberActivityDataRedemptionOrderItemsItemSku), Object metadata = default(Object))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._SourceId = sourceId;
            if (this.SourceId != null)
            {
                this._flagSourceId = true;
            }
            this._RelatedObject = relatedObject;
            if (this.RelatedObject != null)
            {
                this._flagRelatedObject = true;
            }
            this._ProductId = productId;
            if (this.ProductId != null)
            {
                this._flagProductId = true;
            }
            this._SkuId = skuId;
            if (this.SkuId != null)
            {
                this._flagSkuId = true;
            }
            this._Quantity = quantity;
            if (this.Quantity != null)
            {
                this._flagQuantity = true;
            }
            this._AppliedQuantity = appliedQuantity;
            if (this.AppliedQuantity != null)
            {
                this._flagAppliedQuantity = true;
            }
            this._AppliedQuantityAmount = appliedQuantityAmount;
            if (this.AppliedQuantityAmount != null)
            {
                this._flagAppliedQuantityAmount = true;
            }
            this._DiscountQuantity = discountQuantity;
            if (this.DiscountQuantity != null)
            {
                this._flagDiscountQuantity = true;
            }
            this._AppliedDiscountQuantity = appliedDiscountQuantity;
            if (this.AppliedDiscountQuantity != null)
            {
                this._flagAppliedDiscountQuantity = true;
            }
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
            this._DiscountAmount = discountAmount;
            if (this.DiscountAmount != null)
            {
                this._flagDiscountAmount = true;
            }
            this._AppliedDiscountAmount = appliedDiscountAmount;
            if (this.AppliedDiscountAmount != null)
            {
                this._flagAppliedDiscountAmount = true;
            }
            this._Price = price;
            if (this.Price != null)
            {
                this._flagPrice = true;
            }
            this._SubtotalAmount = subtotalAmount;
            if (this.SubtotalAmount != null)
            {
                this._flagSubtotalAmount = true;
            }
            this._InitialQuantity = initialQuantity;
            if (this.InitialQuantity != null)
            {
                this._flagInitialQuantity = true;
            }
            this._InitialAmount = initialAmount;
            if (this.InitialAmount != null)
            {
                this._flagInitialAmount = true;
            }
            this._Product = product;
            if (this.Product != null)
            {
                this._flagProduct = true;
            }
            this._Sku = sku;
            if (this.Sku != null)
            {
                this._flagSku = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
        }

        /// <summary>
        /// Unique identifier of the order line item.
        /// </summary>
        /// <value>Unique identifier of the order line item.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The merchant&#39;s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service.
        /// </summary>
        /// <value>The merchant&#39;s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is useful in the integration between multiple systems. It can be an ID from an eCommerce site, a database, or a third-party service.</value>
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId
        {
            get{ return _SourceId;}
            set
            {
                _SourceId = value;
                _flagSourceId = true;
            }
        }
        private string _SourceId;
        private bool _flagSourceId;

        /// <summary>
        /// Returns false as SourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceId()
        {
            return _flagSourceId;
        }
        /// <summary>
        /// Unique identifier of the product. It is assigned by Voucherify.
        /// </summary>
        /// <value>Unique identifier of the product. It is assigned by Voucherify.</value>
        [DataMember(Name = "product_id", EmitDefaultValue = true)]
        public string ProductId
        {
            get{ return _ProductId;}
            set
            {
                _ProductId = value;
                _flagProductId = true;
            }
        }
        private string _ProductId;
        private bool _flagProductId;

        /// <summary>
        /// Returns false as ProductId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductId()
        {
            return _flagProductId;
        }
        /// <summary>
        /// Unique identifier of the SKU. It is assigned by Voucherify.
        /// </summary>
        /// <value>Unique identifier of the SKU. It is assigned by Voucherify.</value>
        [DataMember(Name = "sku_id", EmitDefaultValue = true)]
        public string SkuId
        {
            get{ return _SkuId;}
            set
            {
                _SkuId = value;
                _flagSkuId = true;
            }
        }
        private string _SkuId;
        private bool _flagSkuId;

        /// <summary>
        /// Returns false as SkuId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSkuId()
        {
            return _flagSkuId;
        }
        /// <summary>
        /// Quantity of the particular item in the cart. and The quantity of the particular item in the cart.
        /// </summary>
        /// <value>Quantity of the particular item in the cart. and The quantity of the particular item in the cart.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public int Quantity
        {
            get{ return _Quantity;}
            set
            {
                _Quantity = value;
                _flagQuantity = true;
            }
        }
        private int _Quantity;
        private bool _flagQuantity;

        /// <summary>
        /// Returns false as Quantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantity()
        {
            return _flagQuantity;
        }
        /// <summary>
        /// Quantity of items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced.
        /// </summary>
        /// <value>Quantity of items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced.</value>
        [DataMember(Name = "applied_quantity", EmitDefaultValue = true)]
        public int? AppliedQuantity
        {
            get{ return _AppliedQuantity;}
            set
            {
                _AppliedQuantity = value;
                _flagAppliedQuantity = true;
            }
        }
        private int? _AppliedQuantity;
        private bool _flagAppliedQuantity;

        /// <summary>
        /// Returns false as AppliedQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAppliedQuantity()
        {
            return _flagAppliedQuantity;
        }
        /// <summary>
        /// Amount for the items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced.
        /// </summary>
        /// <value>Amount for the items changed by the application of a new quantity items. It can be positive when an item is added or negative if an item is replaced.</value>
        [DataMember(Name = "applied_quantity_amount", EmitDefaultValue = true)]
        public int? AppliedQuantityAmount
        {
            get{ return _AppliedQuantityAmount;}
            set
            {
                _AppliedQuantityAmount = value;
                _flagAppliedQuantityAmount = true;
            }
        }
        private int? _AppliedQuantityAmount;
        private bool _flagAppliedQuantityAmount;

        /// <summary>
        /// Returns false as AppliedQuantityAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAppliedQuantityAmount()
        {
            return _flagAppliedQuantityAmount;
        }
        /// <summary>
        /// Number of discounted items. and Number of dicounted items.
        /// </summary>
        /// <value>Number of discounted items. and Number of dicounted items.</value>
        [DataMember(Name = "discount_quantity", EmitDefaultValue = true)]
        public int DiscountQuantity
        {
            get{ return _DiscountQuantity;}
            set
            {
                _DiscountQuantity = value;
                _flagDiscountQuantity = true;
            }
        }
        private int _DiscountQuantity;
        private bool _flagDiscountQuantity;

        /// <summary>
        /// Returns false as DiscountQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscountQuantity()
        {
            return _flagDiscountQuantity;
        }
        /// <summary>
        /// Number of the discounted items applied in the transaction.
        /// </summary>
        /// <value>Number of the discounted items applied in the transaction.</value>
        [DataMember(Name = "applied_discount_quantity", EmitDefaultValue = true)]
        public int? AppliedDiscountQuantity
        {
            get{ return _AppliedDiscountQuantity;}
            set
            {
                _AppliedDiscountQuantity = value;
                _flagAppliedDiscountQuantity = true;
            }
        }
        private int? _AppliedDiscountQuantity;
        private bool _flagAppliedDiscountQuantity;

        /// <summary>
        /// Returns false as AppliedDiscountQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAppliedDiscountQuantity()
        {
            return _flagAppliedDiscountQuantity;
        }
        /// <summary>
        /// Total amount of the order item (price * quantity). and The total amount of the order item (price * quantity).
        /// </summary>
        /// <value>Total amount of the order item (price * quantity). and The total amount of the order item (price * quantity).</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public int Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private int _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// Sum of all order-item-level discounts applied to the order.
        /// </summary>
        /// <value>Sum of all order-item-level discounts applied to the order.</value>
        [DataMember(Name = "discount_amount", EmitDefaultValue = true)]
        public int? DiscountAmount
        {
            get{ return _DiscountAmount;}
            set
            {
                _DiscountAmount = value;
                _flagDiscountAmount = true;
            }
        }
        private int? _DiscountAmount;
        private bool _flagDiscountAmount;

        /// <summary>
        /// Returns false as DiscountAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscountAmount()
        {
            return _flagDiscountAmount;
        }
        /// <summary>
        /// Order-level discount amount applied in the transaction. and This field shows the order-level discount applied.
        /// </summary>
        /// <value>Order-level discount amount applied in the transaction. and This field shows the order-level discount applied.</value>
        [DataMember(Name = "applied_discount_amount", EmitDefaultValue = true)]
        public int AppliedDiscountAmount
        {
            get{ return _AppliedDiscountAmount;}
            set
            {
                _AppliedDiscountAmount = value;
                _flagAppliedDiscountAmount = true;
            }
        }
        private int _AppliedDiscountAmount;
        private bool _flagAppliedDiscountAmount;

        /// <summary>
        /// Returns false as AppliedDiscountAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAppliedDiscountAmount()
        {
            return _flagAppliedDiscountAmount;
        }
        /// <summary>
        /// Unit price of an item. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>Unit price of an item. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public int? Price
        {
            get{ return _Price;}
            set
            {
                _Price = value;
                _flagPrice = true;
            }
        }
        private int? _Price;
        private bool _flagPrice;

        /// <summary>
        /// Returns false as Price should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrice()
        {
            return _flagPrice;
        }
        /// <summary>
        /// Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the &#x60;amount&#x60;.    &#x60;subtotal_amount&#x60;&#x3D;&#x60;amount&#x60;-&#x60;discount_amount&#x60; and Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the &#x60;amount&#x60;.    &#x60;subtotal_amount&#x60;&#x3D;&#x60;amount&#x60;-&#x60;applied_discount_amount&#x60;
        /// </summary>
        /// <value>Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the &#x60;amount&#x60;.    &#x60;subtotal_amount&#x60;&#x3D;&#x60;amount&#x60;-&#x60;discount_amount&#x60; and Final order item amount after the applied item-level discount.  If there are no item-level discounts applied, this item is equal to the &#x60;amount&#x60;.    &#x60;subtotal_amount&#x60;&#x3D;&#x60;amount&#x60;-&#x60;applied_discount_amount&#x60;</value>
        [DataMember(Name = "subtotal_amount", EmitDefaultValue = true)]
        public int SubtotalAmount
        {
            get{ return _SubtotalAmount;}
            set
            {
                _SubtotalAmount = value;
                _flagSubtotalAmount = true;
            }
        }
        private int _SubtotalAmount;
        private bool _flagSubtotalAmount;

        /// <summary>
        /// Returns false as SubtotalAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSubtotalAmount()
        {
            return _flagSubtotalAmount;
        }
        /// <summary>
        /// A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items&#39; quantity.
        /// </summary>
        /// <value>A positive integer in the smallest unit quantity representing the total amount of the order; this is the sum of the order items&#39; quantity.</value>
        [DataMember(Name = "initial_quantity", EmitDefaultValue = true)]
        public int? InitialQuantity
        {
            get{ return _InitialQuantity;}
            set
            {
                _InitialQuantity = value;
                _flagInitialQuantity = true;
            }
        }
        private int? _InitialQuantity;
        private bool _flagInitialQuantity;

        /// <summary>
        /// Returns false as InitialQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInitialQuantity()
        {
            return _flagInitialQuantity;
        }
        /// <summary>
        /// A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts.
        /// </summary>
        /// <value>A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items&#39; amounts.</value>
        [DataMember(Name = "initial_amount", EmitDefaultValue = true)]
        public int? InitialAmount
        {
            get{ return _InitialAmount;}
            set
            {
                _InitialAmount = value;
                _flagInitialAmount = true;
            }
        }
        private int? _InitialAmount;
        private bool _flagInitialAmount;

        /// <summary>
        /// Returns false as InitialAmount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInitialAmount()
        {
            return _flagInitialAmount;
        }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = true)]
        public MemberActivityDataRedemptionOrderItemsItemProduct Product
        {
            get{ return _Product;}
            set
            {
                _Product = value;
                _flagProduct = true;
            }
        }
        private MemberActivityDataRedemptionOrderItemsItemProduct _Product;
        private bool _flagProduct;

        /// <summary>
        /// Returns false as Product should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProduct()
        {
            return _flagProduct;
        }
        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = true)]
        public MemberActivityDataRedemptionOrderItemsItemSku Sku
        {
            get{ return _Sku;}
            set
            {
                _Sku = value;
                _flagSku = true;
            }
        }
        private MemberActivityDataRedemptionOrderItemsItemSku _Sku;
        private bool _flagSku;

        /// <summary>
        /// Returns false as Sku should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSku()
        {
            return _flagSku;
        }
        /// <summary>
        /// A set of custom key/value pairs that you can attach to an item object. It can be useful for storing additional information about the item in a structured format. It can be used to define business validation rules or discount formulas.
        /// </summary>
        /// <value>A set of custom key/value pairs that you can attach to an item object. It can be useful for storing additional information about the item in a structured format. It can be used to define business validation rules or discount formulas.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemberActivityDataRedemptionOrderItemsItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  RelatedObject: ").Append(RelatedObject).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  SkuId: ").Append(SkuId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  AppliedQuantity: ").Append(AppliedQuantity).Append("\n");
            sb.Append("  AppliedQuantityAmount: ").Append(AppliedQuantityAmount).Append("\n");
            sb.Append("  DiscountQuantity: ").Append(DiscountQuantity).Append("\n");
            sb.Append("  AppliedDiscountQuantity: ").Append(AppliedDiscountQuantity).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  AppliedDiscountAmount: ").Append(AppliedDiscountAmount).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SubtotalAmount: ").Append(SubtotalAmount).Append("\n");
            sb.Append("  InitialQuantity: ").Append(InitialQuantity).Append("\n");
            sb.Append("  InitialAmount: ").Append(InitialAmount).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
