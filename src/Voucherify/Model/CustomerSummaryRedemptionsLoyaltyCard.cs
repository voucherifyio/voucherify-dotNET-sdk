/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Summary of loyalty points.
    /// </summary>
    [DataContract(Name = "CustomerSummaryRedemptionsLoyaltyCard")]
    public partial class CustomerSummaryRedemptionsLoyaltyCard : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerSummaryRedemptionsLoyaltyCard" /> class.
        /// </summary>
        /// <param name="redeemedPoints">Total number of loyalty points redeemed by the customer..</param>
        /// <param name="pointsToGo">Sum of remaining available point balance across all loyalty cards..</param>
        public CustomerSummaryRedemptionsLoyaltyCard(int? redeemedPoints = default(int?), int? pointsToGo = default(int?))
        {
            this._RedeemedPoints = redeemedPoints;
            if (this.RedeemedPoints != null)
            {
                this._flagRedeemedPoints = true;
            }
            this._PointsToGo = pointsToGo;
            if (this.PointsToGo != null)
            {
                this._flagPointsToGo = true;
            }
        }

        /// <summary>
        /// Total number of loyalty points redeemed by the customer.
        /// </summary>
        /// <value>Total number of loyalty points redeemed by the customer.</value>
        [DataMember(Name = "redeemed_points", EmitDefaultValue = true)]
        public int? RedeemedPoints
        {
            get{ return _RedeemedPoints;}
            set
            {
                _RedeemedPoints = value;
                _flagRedeemedPoints = true;
            }
        }
        private int? _RedeemedPoints;
        private bool _flagRedeemedPoints;

        /// <summary>
        /// Returns false as RedeemedPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemedPoints()
        {
            return _flagRedeemedPoints;
        }
        /// <summary>
        /// Sum of remaining available point balance across all loyalty cards.
        /// </summary>
        /// <value>Sum of remaining available point balance across all loyalty cards.</value>
        [DataMember(Name = "points_to_go", EmitDefaultValue = true)]
        public int? PointsToGo
        {
            get{ return _PointsToGo;}
            set
            {
                _PointsToGo = value;
                _flagPointsToGo = true;
            }
        }
        private int? _PointsToGo;
        private bool _flagPointsToGo;

        /// <summary>
        /// Returns false as PointsToGo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePointsToGo()
        {
            return _flagPointsToGo;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerSummaryRedemptionsLoyaltyCard {\n");
            sb.Append("  RedeemedPoints: ").Append(RedeemedPoints).Append("\n");
            sb.Append("  PointsToGo: ").Append(PointsToGo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
