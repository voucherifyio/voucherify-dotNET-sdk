/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the ratio based on the property defined in the calculation_type parameter. For every set of value (1, 10, etc) defined in the every parameter for the property defined in calculation_type, give the customer the number of points defined in the points parameter. In other words, for every calculation_type, give points.
    /// </summary>
    [DataContract(Name = "EarningRuleLoyaltyOrderItemsAmount")]
    public partial class EarningRuleLoyaltyOrderItemsAmount : IValidatableObject
    {
        /// <summary>
        /// Type of object taken under consideration.
        /// </summary>
        /// <value>Type of object taken under consideration.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum ProductsCollection for value: products_collection
            /// </summary>
            [EnumMember(Value = "products_collection")]
            ProductsCollection = 1,

            /// <summary>
            /// Enum Product for value: product
            /// </summary>
            [EnumMember(Value = "product")]
            Product = 2,

            /// <summary>
            /// Enum Sku for value: sku
            /// </summary>
            [EnumMember(Value = "sku")]
            Sku = 3
        }


        /// <summary>
        /// Type of object taken under consideration.
        /// </summary>
        /// <value>Type of object taken under consideration.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EarningRuleLoyaltyOrderItemsAmount" /> class.
        /// </summary>
        /// <param name="every">Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000..</param>
        /// <param name="points">Number of points to be awarded, i.e. how many points to be added to the loyalty card..</param>
        /// <param name="varObject">Type of object taken under consideration..</param>
        /// <param name="id">Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619..</param>
        public EarningRuleLoyaltyOrderItemsAmount(int? every = default(int?), int? points = default(int?), ObjectEnum? varObject = default(ObjectEnum?), string id = default(string))
        {
            this._Every = every;
            if (this.Every != null)
            {
                this._flagEvery = true;
            }
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
        }

        /// <summary>
        /// Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000.
        /// </summary>
        /// <value>Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000.</value>
        [DataMember(Name = "every", EmitDefaultValue = true)]
        public int? Every
        {
            get{ return _Every;}
            set
            {
                _Every = value;
                _flagEvery = true;
            }
        }
        private int? _Every;
        private bool _flagEvery;

        /// <summary>
        /// Returns false as Every should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvery()
        {
            return _flagEvery;
        }
        /// <summary>
        /// Number of points to be awarded, i.e. how many points to be added to the loyalty card.
        /// </summary>
        /// <value>Number of points to be awarded, i.e. how many points to be added to the loyalty card.</value>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619.
        /// </summary>
        /// <value>Unique ID of the resource, i.e. pc_75U0dHlr7u75BJodrW1AE3t6, prod_0bae32322150fd0546, or sku_0b7d7dfb090be5c619.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EarningRuleLoyaltyOrderItemsAmount {\n");
            sb.Append("  Every: ").Append(Every).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
