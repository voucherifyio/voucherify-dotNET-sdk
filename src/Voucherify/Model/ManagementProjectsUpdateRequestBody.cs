/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request body schema for **PUT** &#x60;/management/v1/projects/{projectId}&#x60;.
    /// </summary>
    [DataContract(Name = "ManagementProjectsUpdateRequestBody")]
    public partial class ManagementProjectsUpdateRequestBody : IValidatableObject
    {
        /// <summary>
        /// The webhook version used in the project.
        /// </summary>
        /// <value>The webhook version used in the project.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebhookVersionEnum
        {
            /// <summary>
            /// Enum V20240101 for value: v2024-01-01
            /// </summary>
            [EnumMember(Value = "v2024-01-01")]
            V20240101 = 1
        }


        /// <summary>
        /// The webhook version used in the project.
        /// </summary>
        /// <value>The webhook version used in the project.</value>

        [DataMember(Name = "webhook_version", EmitDefaultValue = true)]
        public WebhookVersionEnum? WebhookVersion
        {
            get{ return _WebhookVersion;}
            set
            {
                _WebhookVersion = value;
                _flagWebhookVersion = true;
            }
        }
        private WebhookVersionEnum? _WebhookVersion;
        private bool _flagWebhookVersion;

        /// <summary>
        /// Returns false as WebhookVersion should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebhookVersion()
        {
            return _flagWebhookVersion;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsUpdateRequestBody" /> class.
        /// </summary>
        /// <param name="name">The name of the project..</param>
        /// <param name="description">A user-defined description of the project, e.g. its purpose, scope, region..</param>
        /// <param name="timezone">The time zone in which the project is established. It can be in the GMT format or in accordance with IANA time zone database..</param>
        /// <param name="currency">The currency used in the project. It is equal to a 3-letter ISO 4217 code..</param>
        /// <param name="dialCode">The country dial code for the project. It is equal to an ITU country code..</param>
        /// <param name="webhookVersion">The webhook version used in the project..</param>
        /// <param name="clientTrustedDomains">An array of URL addresses that allow client requests..</param>
        /// <param name="clientRedeemEnabled">Enables client-side redemption..</param>
        /// <param name="clientPublishEnabled">Enables client-side publication..</param>
        /// <param name="clientListVouchersEnabled">Enables client-side listing of vouchers..</param>
        /// <param name="clientCreateCustomerEnabled">Enables client-side creation of customers..</param>
        /// <param name="clientLoyaltyEventsEnabled">Enables client-side events for loyalty and referral programs..</param>
        /// <param name="clientSetVoucherExpirationDateEnabled">Enables client-side setting of voucher expiration date..</param>
        /// <param name="webhooksCalloutNotifications">webhooksCalloutNotifications.</param>
        /// <param name="apiUsageNotifications">apiUsageNotifications.</param>
        /// <param name="defaultCodeConfig">defaultCodeConfig.</param>
        public ManagementProjectsUpdateRequestBody(string name = default(string), string description = default(string), string timezone = default(string), string currency = default(string), string dialCode = default(string), WebhookVersionEnum? webhookVersion = default(WebhookVersionEnum?), List<string> clientTrustedDomains = default(List<string>), bool? clientRedeemEnabled = default(bool?), bool? clientPublishEnabled = default(bool?), bool? clientListVouchersEnabled = default(bool?), bool? clientCreateCustomerEnabled = default(bool?), bool? clientLoyaltyEventsEnabled = default(bool?), bool? clientSetVoucherExpirationDateEnabled = default(bool?), ManagementProjectsUpdateRequestBodyWebhooksCalloutNotifications webhooksCalloutNotifications = default(ManagementProjectsUpdateRequestBodyWebhooksCalloutNotifications), ManagementProjectsUpdateRequestBodyApiUsageNotifications apiUsageNotifications = default(ManagementProjectsUpdateRequestBodyApiUsageNotifications), ManagementProjectsUpdateRequestBodyDefaultCodeConfig defaultCodeConfig = default(ManagementProjectsUpdateRequestBodyDefaultCodeConfig))
        {
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Timezone = timezone;
            if (this.Timezone != null)
            {
                this._flagTimezone = true;
            }
            this._Currency = currency;
            if (this.Currency != null)
            {
                this._flagCurrency = true;
            }
            this._DialCode = dialCode;
            if (this.DialCode != null)
            {
                this._flagDialCode = true;
            }
            this._WebhookVersion = webhookVersion;
            if (this.WebhookVersion != null)
            {
                this._flagWebhookVersion = true;
            }
            this._ClientTrustedDomains = clientTrustedDomains;
            if (this.ClientTrustedDomains != null)
            {
                this._flagClientTrustedDomains = true;
            }
            this._ClientRedeemEnabled = clientRedeemEnabled;
            if (this.ClientRedeemEnabled != null)
            {
                this._flagClientRedeemEnabled = true;
            }
            this._ClientPublishEnabled = clientPublishEnabled;
            if (this.ClientPublishEnabled != null)
            {
                this._flagClientPublishEnabled = true;
            }
            this._ClientListVouchersEnabled = clientListVouchersEnabled;
            if (this.ClientListVouchersEnabled != null)
            {
                this._flagClientListVouchersEnabled = true;
            }
            this._ClientCreateCustomerEnabled = clientCreateCustomerEnabled;
            if (this.ClientCreateCustomerEnabled != null)
            {
                this._flagClientCreateCustomerEnabled = true;
            }
            this._ClientLoyaltyEventsEnabled = clientLoyaltyEventsEnabled;
            if (this.ClientLoyaltyEventsEnabled != null)
            {
                this._flagClientLoyaltyEventsEnabled = true;
            }
            this._ClientSetVoucherExpirationDateEnabled = clientSetVoucherExpirationDateEnabled;
            if (this.ClientSetVoucherExpirationDateEnabled != null)
            {
                this._flagClientSetVoucherExpirationDateEnabled = true;
            }
            this._WebhooksCalloutNotifications = webhooksCalloutNotifications;
            if (this.WebhooksCalloutNotifications != null)
            {
                this._flagWebhooksCalloutNotifications = true;
            }
            this._ApiUsageNotifications = apiUsageNotifications;
            if (this.ApiUsageNotifications != null)
            {
                this._flagApiUsageNotifications = true;
            }
            this._DefaultCodeConfig = defaultCodeConfig;
            if (this.DefaultCodeConfig != null)
            {
                this._flagDefaultCodeConfig = true;
            }
        }

        /// <summary>
        /// The name of the project.
        /// </summary>
        /// <value>The name of the project.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// A user-defined description of the project, e.g. its purpose, scope, region.
        /// </summary>
        /// <value>A user-defined description of the project, e.g. its purpose, scope, region.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// The time zone in which the project is established. It can be in the GMT format or in accordance with IANA time zone database.
        /// </summary>
        /// <value>The time zone in which the project is established. It can be in the GMT format or in accordance with IANA time zone database.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = true)]
        public string Timezone
        {
            get{ return _Timezone;}
            set
            {
                _Timezone = value;
                _flagTimezone = true;
            }
        }
        private string _Timezone;
        private bool _flagTimezone;

        /// <summary>
        /// Returns false as Timezone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTimezone()
        {
            return _flagTimezone;
        }
        /// <summary>
        /// The currency used in the project. It is equal to a 3-letter ISO 4217 code.
        /// </summary>
        /// <value>The currency used in the project. It is equal to a 3-letter ISO 4217 code.</value>
        [DataMember(Name = "currency", EmitDefaultValue = true)]
        public string Currency
        {
            get{ return _Currency;}
            set
            {
                _Currency = value;
                _flagCurrency = true;
            }
        }
        private string _Currency;
        private bool _flagCurrency;

        /// <summary>
        /// Returns false as Currency should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrency()
        {
            return _flagCurrency;
        }
        /// <summary>
        /// The country dial code for the project. It is equal to an ITU country code.
        /// </summary>
        /// <value>The country dial code for the project. It is equal to an ITU country code.</value>
        [DataMember(Name = "dial_code", EmitDefaultValue = true)]
        public string DialCode
        {
            get{ return _DialCode;}
            set
            {
                _DialCode = value;
                _flagDialCode = true;
            }
        }
        private string _DialCode;
        private bool _flagDialCode;

        /// <summary>
        /// Returns false as DialCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDialCode()
        {
            return _flagDialCode;
        }
        /// <summary>
        /// An array of URL addresses that allow client requests.
        /// </summary>
        /// <value>An array of URL addresses that allow client requests.</value>
        [DataMember(Name = "client_trusted_domains", EmitDefaultValue = true)]
        public List<string> ClientTrustedDomains
        {
            get{ return _ClientTrustedDomains;}
            set
            {
                _ClientTrustedDomains = value;
                _flagClientTrustedDomains = true;
            }
        }
        private List<string> _ClientTrustedDomains;
        private bool _flagClientTrustedDomains;

        /// <summary>
        /// Returns false as ClientTrustedDomains should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientTrustedDomains()
        {
            return _flagClientTrustedDomains;
        }
        /// <summary>
        /// Enables client-side redemption.
        /// </summary>
        /// <value>Enables client-side redemption.</value>
        [DataMember(Name = "client_redeem_enabled", EmitDefaultValue = true)]
        public bool? ClientRedeemEnabled
        {
            get{ return _ClientRedeemEnabled;}
            set
            {
                _ClientRedeemEnabled = value;
                _flagClientRedeemEnabled = true;
            }
        }
        private bool? _ClientRedeemEnabled;
        private bool _flagClientRedeemEnabled;

        /// <summary>
        /// Returns false as ClientRedeemEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientRedeemEnabled()
        {
            return _flagClientRedeemEnabled;
        }
        /// <summary>
        /// Enables client-side publication.
        /// </summary>
        /// <value>Enables client-side publication.</value>
        [DataMember(Name = "client_publish_enabled", EmitDefaultValue = true)]
        public bool? ClientPublishEnabled
        {
            get{ return _ClientPublishEnabled;}
            set
            {
                _ClientPublishEnabled = value;
                _flagClientPublishEnabled = true;
            }
        }
        private bool? _ClientPublishEnabled;
        private bool _flagClientPublishEnabled;

        /// <summary>
        /// Returns false as ClientPublishEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientPublishEnabled()
        {
            return _flagClientPublishEnabled;
        }
        /// <summary>
        /// Enables client-side listing of vouchers.
        /// </summary>
        /// <value>Enables client-side listing of vouchers.</value>
        [DataMember(Name = "client_list_vouchers_enabled", EmitDefaultValue = true)]
        public bool? ClientListVouchersEnabled
        {
            get{ return _ClientListVouchersEnabled;}
            set
            {
                _ClientListVouchersEnabled = value;
                _flagClientListVouchersEnabled = true;
            }
        }
        private bool? _ClientListVouchersEnabled;
        private bool _flagClientListVouchersEnabled;

        /// <summary>
        /// Returns false as ClientListVouchersEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientListVouchersEnabled()
        {
            return _flagClientListVouchersEnabled;
        }
        /// <summary>
        /// Enables client-side creation of customers.
        /// </summary>
        /// <value>Enables client-side creation of customers.</value>
        [DataMember(Name = "client_create_customer_enabled", EmitDefaultValue = true)]
        public bool? ClientCreateCustomerEnabled
        {
            get{ return _ClientCreateCustomerEnabled;}
            set
            {
                _ClientCreateCustomerEnabled = value;
                _flagClientCreateCustomerEnabled = true;
            }
        }
        private bool? _ClientCreateCustomerEnabled;
        private bool _flagClientCreateCustomerEnabled;

        /// <summary>
        /// Returns false as ClientCreateCustomerEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientCreateCustomerEnabled()
        {
            return _flagClientCreateCustomerEnabled;
        }
        /// <summary>
        /// Enables client-side events for loyalty and referral programs.
        /// </summary>
        /// <value>Enables client-side events for loyalty and referral programs.</value>
        [DataMember(Name = "client_loyalty_events_enabled", EmitDefaultValue = true)]
        public bool? ClientLoyaltyEventsEnabled
        {
            get{ return _ClientLoyaltyEventsEnabled;}
            set
            {
                _ClientLoyaltyEventsEnabled = value;
                _flagClientLoyaltyEventsEnabled = true;
            }
        }
        private bool? _ClientLoyaltyEventsEnabled;
        private bool _flagClientLoyaltyEventsEnabled;

        /// <summary>
        /// Returns false as ClientLoyaltyEventsEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientLoyaltyEventsEnabled()
        {
            return _flagClientLoyaltyEventsEnabled;
        }
        /// <summary>
        /// Enables client-side setting of voucher expiration date.
        /// </summary>
        /// <value>Enables client-side setting of voucher expiration date.</value>
        [DataMember(Name = "client_set_voucher_expiration_date_enabled", EmitDefaultValue = true)]
        public bool? ClientSetVoucherExpirationDateEnabled
        {
            get{ return _ClientSetVoucherExpirationDateEnabled;}
            set
            {
                _ClientSetVoucherExpirationDateEnabled = value;
                _flagClientSetVoucherExpirationDateEnabled = true;
            }
        }
        private bool? _ClientSetVoucherExpirationDateEnabled;
        private bool _flagClientSetVoucherExpirationDateEnabled;

        /// <summary>
        /// Returns false as ClientSetVoucherExpirationDateEnabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClientSetVoucherExpirationDateEnabled()
        {
            return _flagClientSetVoucherExpirationDateEnabled;
        }
        /// <summary>
        /// Gets or Sets WebhooksCalloutNotifications
        /// </summary>
        [DataMember(Name = "webhooks_callout_notifications", EmitDefaultValue = true)]
        public ManagementProjectsUpdateRequestBodyWebhooksCalloutNotifications WebhooksCalloutNotifications
        {
            get{ return _WebhooksCalloutNotifications;}
            set
            {
                _WebhooksCalloutNotifications = value;
                _flagWebhooksCalloutNotifications = true;
            }
        }
        private ManagementProjectsUpdateRequestBodyWebhooksCalloutNotifications _WebhooksCalloutNotifications;
        private bool _flagWebhooksCalloutNotifications;

        /// <summary>
        /// Returns false as WebhooksCalloutNotifications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebhooksCalloutNotifications()
        {
            return _flagWebhooksCalloutNotifications;
        }
        /// <summary>
        /// Gets or Sets ApiUsageNotifications
        /// </summary>
        [DataMember(Name = "api_usage_notifications", EmitDefaultValue = true)]
        public ManagementProjectsUpdateRequestBodyApiUsageNotifications ApiUsageNotifications
        {
            get{ return _ApiUsageNotifications;}
            set
            {
                _ApiUsageNotifications = value;
                _flagApiUsageNotifications = true;
            }
        }
        private ManagementProjectsUpdateRequestBodyApiUsageNotifications _ApiUsageNotifications;
        private bool _flagApiUsageNotifications;

        /// <summary>
        /// Returns false as ApiUsageNotifications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApiUsageNotifications()
        {
            return _flagApiUsageNotifications;
        }
        /// <summary>
        /// Gets or Sets DefaultCodeConfig
        /// </summary>
        [DataMember(Name = "default_code_config", EmitDefaultValue = true)]
        public ManagementProjectsUpdateRequestBodyDefaultCodeConfig DefaultCodeConfig
        {
            get{ return _DefaultCodeConfig;}
            set
            {
                _DefaultCodeConfig = value;
                _flagDefaultCodeConfig = true;
            }
        }
        private ManagementProjectsUpdateRequestBodyDefaultCodeConfig _DefaultCodeConfig;
        private bool _flagDefaultCodeConfig;

        /// <summary>
        /// Returns false as DefaultCodeConfig should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultCodeConfig()
        {
            return _flagDefaultCodeConfig;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsUpdateRequestBody {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DialCode: ").Append(DialCode).Append("\n");
            sb.Append("  WebhookVersion: ").Append(WebhookVersion).Append("\n");
            sb.Append("  ClientTrustedDomains: ").Append(ClientTrustedDomains).Append("\n");
            sb.Append("  ClientRedeemEnabled: ").Append(ClientRedeemEnabled).Append("\n");
            sb.Append("  ClientPublishEnabled: ").Append(ClientPublishEnabled).Append("\n");
            sb.Append("  ClientListVouchersEnabled: ").Append(ClientListVouchersEnabled).Append("\n");
            sb.Append("  ClientCreateCustomerEnabled: ").Append(ClientCreateCustomerEnabled).Append("\n");
            sb.Append("  ClientLoyaltyEventsEnabled: ").Append(ClientLoyaltyEventsEnabled).Append("\n");
            sb.Append("  ClientSetVoucherExpirationDateEnabled: ").Append(ClientSetVoucherExpirationDateEnabled).Append("\n");
            sb.Append("  WebhooksCalloutNotifications: ").Append(WebhooksCalloutNotifications).Append("\n");
            sb.Append("  ApiUsageNotifications: ").Append(ApiUsageNotifications).Append("\n");
            sb.Append("  DefaultCodeConfig: ").Append(DefaultCodeConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
