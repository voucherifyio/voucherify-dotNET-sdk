/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **GET** &#x60;v1/vouchers/{code}/redemption&#x60;.
    /// </summary>
    [DataContract(Name = "VouchersRedemptionGetResponseBody")]
    public partial class VouchersRedemptionGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersRedemptionGetResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VouchersRedemptionGetResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersRedemptionGetResponseBody" /> class.
        /// </summary>
        /// <param name="quantity">The maximum number of times a voucher can be redeemed..</param>
        /// <param name="redeemedQuantity">The number of times the voucher was redeemed successfully..</param>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about redemptions in a dictionary..</param>
        /// <param name="url">URL.</param>
        /// <param name="dataRef">Identifies the name of the attribute that contains the array of &#x60;redemption_entries&#x60;..</param>
        /// <param name="total">Total number of redemption objects..</param>
        /// <param name="redemptionEntries">Contains the array of successful and failed redemption objects. (required).</param>
        public VouchersRedemptionGetResponseBody(int? quantity = default(int?), int? redeemedQuantity = default(int?), string varObject = default(string), string url = default(string), string dataRef = default(string), int? total = default(int?), List<RedemptionEntry> redemptionEntries = default(List<RedemptionEntry>))
        {
            // to ensure "redemptionEntries" is required (not null)
            if (redemptionEntries == null)
            {
                throw new ArgumentNullException("redemptionEntries is a required property for VouchersRedemptionGetResponseBody and cannot be null");
            }
            this._RedemptionEntries = redemptionEntries;
            this._Quantity = quantity;
            if (this.Quantity != null)
            {
                this._flagQuantity = true;
            }
            this._RedeemedQuantity = redeemedQuantity;
            if (this.RedeemedQuantity != null)
            {
                this._flagRedeemedQuantity = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._Url = url;
            if (this.Url != null)
            {
                this._flagUrl = true;
            }
            this._DataRef = dataRef;
            if (this.DataRef != null)
            {
                this._flagDataRef = true;
            }
            this._Total = total;
            if (this.Total != null)
            {
                this._flagTotal = true;
            }
        }

        /// <summary>
        /// The maximum number of times a voucher can be redeemed.
        /// </summary>
        /// <value>The maximum number of times a voucher can be redeemed.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = true)]
        public int? Quantity
        {
            get{ return _Quantity;}
            set
            {
                _Quantity = value;
                _flagQuantity = true;
            }
        }
        private int? _Quantity;
        private bool _flagQuantity;

        /// <summary>
        /// Returns false as Quantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuantity()
        {
            return _flagQuantity;
        }
        /// <summary>
        /// The number of times the voucher was redeemed successfully.
        /// </summary>
        /// <value>The number of times the voucher was redeemed successfully.</value>
        [DataMember(Name = "redeemed_quantity", EmitDefaultValue = true)]
        public int? RedeemedQuantity
        {
            get{ return _RedeemedQuantity;}
            set
            {
                _RedeemedQuantity = value;
                _flagRedeemedQuantity = true;
            }
        }
        private int? _RedeemedQuantity;
        private bool _flagRedeemedQuantity;

        /// <summary>
        /// Returns false as RedeemedQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemedQuantity()
        {
            return _flagRedeemedQuantity;
        }
        /// <summary>
        /// The type of the object represented by JSON. This object stores information about redemptions in a dictionary.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about redemptions in a dictionary.</value>
        [DataMember(Name = "object", EmitDefaultValue = true)]
        public string Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private string _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// URL
        /// </summary>
        /// <value>URL</value>
        /*
        <example>/v1/vouchers/PROMO-CODE2/redemptions?page&#x3D;1&amp;limit&#x3D;10</example>
        */
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url
        {
            get{ return _Url;}
            set
            {
                _Url = value;
                _flagUrl = true;
            }
        }
        private string _Url;
        private bool _flagUrl;

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return _flagUrl;
        }
        /// <summary>
        /// Identifies the name of the attribute that contains the array of &#x60;redemption_entries&#x60;.
        /// </summary>
        /// <value>Identifies the name of the attribute that contains the array of &#x60;redemption_entries&#x60;.</value>
        [DataMember(Name = "data_ref", EmitDefaultValue = true)]
        public string DataRef
        {
            get{ return _DataRef;}
            set
            {
                _DataRef = value;
                _flagDataRef = true;
            }
        }
        private string _DataRef;
        private bool _flagDataRef;

        /// <summary>
        /// Returns false as DataRef should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDataRef()
        {
            return _flagDataRef;
        }
        /// <summary>
        /// Total number of redemption objects.
        /// </summary>
        /// <value>Total number of redemption objects.</value>
        [DataMember(Name = "total", EmitDefaultValue = true)]
        public int? Total
        {
            get{ return _Total;}
            set
            {
                _Total = value;
                _flagTotal = true;
            }
        }
        private int? _Total;
        private bool _flagTotal;

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return _flagTotal;
        }
        /// <summary>
        /// Contains the array of successful and failed redemption objects.
        /// </summary>
        /// <value>Contains the array of successful and failed redemption objects.</value>
        [DataMember(Name = "redemption_entries", IsRequired = true, EmitDefaultValue = true)]
        public List<RedemptionEntry> RedemptionEntries
        {
            get{ return _RedemptionEntries;}
            set
            {
                _RedemptionEntries = value;
                _flagRedemptionEntries = true;
            }
        }
        private List<RedemptionEntry> _RedemptionEntries;
        private bool _flagRedemptionEntries;

        /// <summary>
        /// Returns false as RedemptionEntries should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemptionEntries()
        {
            return _flagRedemptionEntries;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VouchersRedemptionGetResponseBody {\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RedeemedQuantity: ").Append(RedeemedQuantity).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  DataRef: ").Append(DataRef).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  RedemptionEntries: ").Append(RedemptionEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
