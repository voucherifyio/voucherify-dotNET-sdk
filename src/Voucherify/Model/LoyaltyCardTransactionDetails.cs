/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Contains the detailed information about the transaction.
    /// </summary>
    [DataContract(Name = "LoyaltyCardTransactionDetails")]
    public partial class LoyaltyCardTransactionDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyCardTransactionDetails" /> class.
        /// </summary>
        /// <param name="balance">balance.</param>
        /// <param name="order">order.</param>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="earningRule">earningRule.</param>
        /// <param name="segment">segment.</param>
        /// <param name="loyaltyTier">loyaltyTier.</param>
        /// <param name="redemption">redemption.</param>
        /// <param name="rollback">rollback.</param>
        /// <param name="customEvent">customEvent.</param>
        /// <param name="eventSchema">eventSchema.</param>
        /// <param name="holderLoyaltyTier">holderLoyaltyTier.</param>
        /// <param name="pendingPoints">pendingPoints.</param>
        /// <param name="reward">reward.</param>
        /// <param name="sourceVoucher">sourceVoucher.</param>
        /// <param name="destinationVoucher">destinationVoucher.</param>
        public LoyaltyCardTransactionDetails(VoucherBalance balance = default(VoucherBalance), LoyaltyCardTransactionDetailsOrder order = default(LoyaltyCardTransactionDetailsOrder), LoyaltyCardTransactionDetailsEvent varEvent = default(LoyaltyCardTransactionDetailsEvent), LoyaltyCardTransactionDetailsEarningRule earningRule = default(LoyaltyCardTransactionDetailsEarningRule), LoyaltyCardTransactionDetailsSegment segment = default(LoyaltyCardTransactionDetailsSegment), LoyaltyCardTransactionDetailsLoyaltyTier loyaltyTier = default(LoyaltyCardTransactionDetailsLoyaltyTier), LoyaltyCardTransactionDetailsRedemption redemption = default(LoyaltyCardTransactionDetailsRedemption), LoyaltyCardTransactionDetailsRollback rollback = default(LoyaltyCardTransactionDetailsRollback), LoyaltyCardTransactionDetailsCustomEvent customEvent = default(LoyaltyCardTransactionDetailsCustomEvent), LoyaltyCardTransactionDetailsEventSchema eventSchema = default(LoyaltyCardTransactionDetailsEventSchema), LoyaltyCardTransactionDetailsHolderLoyaltyTier holderLoyaltyTier = default(LoyaltyCardTransactionDetailsHolderLoyaltyTier), LoyaltyPendingPoints pendingPoints = default(LoyaltyPendingPoints), LoyaltyCardTransactionDetailsReward reward = default(LoyaltyCardTransactionDetailsReward), SimpleVoucher sourceVoucher = default(SimpleVoucher), SimpleVoucher destinationVoucher = default(SimpleVoucher))
        {
            this._Balance = balance;
            if (this.Balance != null)
            {
                this._flagBalance = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._Event = varEvent;
            if (this.Event != null)
            {
                this._flagEvent = true;
            }
            this._EarningRule = earningRule;
            if (this.EarningRule != null)
            {
                this._flagEarningRule = true;
            }
            this._Segment = segment;
            if (this.Segment != null)
            {
                this._flagSegment = true;
            }
            this._LoyaltyTier = loyaltyTier;
            if (this.LoyaltyTier != null)
            {
                this._flagLoyaltyTier = true;
            }
            this._Redemption = redemption;
            if (this.Redemption != null)
            {
                this._flagRedemption = true;
            }
            this._Rollback = rollback;
            if (this.Rollback != null)
            {
                this._flagRollback = true;
            }
            this._CustomEvent = customEvent;
            if (this.CustomEvent != null)
            {
                this._flagCustomEvent = true;
            }
            this._EventSchema = eventSchema;
            if (this.EventSchema != null)
            {
                this._flagEventSchema = true;
            }
            this._HolderLoyaltyTier = holderLoyaltyTier;
            if (this.HolderLoyaltyTier != null)
            {
                this._flagHolderLoyaltyTier = true;
            }
            this._PendingPoints = pendingPoints;
            if (this.PendingPoints != null)
            {
                this._flagPendingPoints = true;
            }
            this._Reward = reward;
            if (this.Reward != null)
            {
                this._flagReward = true;
            }
            this._SourceVoucher = sourceVoucher;
            if (this.SourceVoucher != null)
            {
                this._flagSourceVoucher = true;
            }
            this._DestinationVoucher = destinationVoucher;
            if (this.DestinationVoucher != null)
            {
                this._flagDestinationVoucher = true;
            }
        }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public VoucherBalance Balance
        {
            get{ return _Balance;}
            set
            {
                _Balance = value;
                _flagBalance = true;
            }
        }
        private VoucherBalance _Balance;
        private bool _flagBalance;

        /// <summary>
        /// Returns false as Balance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBalance()
        {
            return _flagBalance;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsOrder Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private LoyaltyCardTransactionDetailsOrder _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsEvent Event
        {
            get{ return _Event;}
            set
            {
                _Event = value;
                _flagEvent = true;
            }
        }
        private LoyaltyCardTransactionDetailsEvent _Event;
        private bool _flagEvent;

        /// <summary>
        /// Returns false as Event should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvent()
        {
            return _flagEvent;
        }
        /// <summary>
        /// Gets or Sets EarningRule
        /// </summary>
        [DataMember(Name = "earning_rule", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsEarningRule EarningRule
        {
            get{ return _EarningRule;}
            set
            {
                _EarningRule = value;
                _flagEarningRule = true;
            }
        }
        private LoyaltyCardTransactionDetailsEarningRule _EarningRule;
        private bool _flagEarningRule;

        /// <summary>
        /// Returns false as EarningRule should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEarningRule()
        {
            return _flagEarningRule;
        }
        /// <summary>
        /// Gets or Sets Segment
        /// </summary>
        [DataMember(Name = "segment", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsSegment Segment
        {
            get{ return _Segment;}
            set
            {
                _Segment = value;
                _flagSegment = true;
            }
        }
        private LoyaltyCardTransactionDetailsSegment _Segment;
        private bool _flagSegment;

        /// <summary>
        /// Returns false as Segment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSegment()
        {
            return _flagSegment;
        }
        /// <summary>
        /// Gets or Sets LoyaltyTier
        /// </summary>
        [DataMember(Name = "loyalty_tier", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsLoyaltyTier LoyaltyTier
        {
            get{ return _LoyaltyTier;}
            set
            {
                _LoyaltyTier = value;
                _flagLoyaltyTier = true;
            }
        }
        private LoyaltyCardTransactionDetailsLoyaltyTier _LoyaltyTier;
        private bool _flagLoyaltyTier;

        /// <summary>
        /// Returns false as LoyaltyTier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTier()
        {
            return _flagLoyaltyTier;
        }
        /// <summary>
        /// Gets or Sets Redemption
        /// </summary>
        [DataMember(Name = "redemption", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsRedemption Redemption
        {
            get{ return _Redemption;}
            set
            {
                _Redemption = value;
                _flagRedemption = true;
            }
        }
        private LoyaltyCardTransactionDetailsRedemption _Redemption;
        private bool _flagRedemption;

        /// <summary>
        /// Returns false as Redemption should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemption()
        {
            return _flagRedemption;
        }
        /// <summary>
        /// Gets or Sets Rollback
        /// </summary>
        [DataMember(Name = "rollback", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsRollback Rollback
        {
            get{ return _Rollback;}
            set
            {
                _Rollback = value;
                _flagRollback = true;
            }
        }
        private LoyaltyCardTransactionDetailsRollback _Rollback;
        private bool _flagRollback;

        /// <summary>
        /// Returns false as Rollback should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRollback()
        {
            return _flagRollback;
        }
        /// <summary>
        /// Gets or Sets CustomEvent
        /// </summary>
        [DataMember(Name = "custom_event", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsCustomEvent CustomEvent
        {
            get{ return _CustomEvent;}
            set
            {
                _CustomEvent = value;
                _flagCustomEvent = true;
            }
        }
        private LoyaltyCardTransactionDetailsCustomEvent _CustomEvent;
        private bool _flagCustomEvent;

        /// <summary>
        /// Returns false as CustomEvent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomEvent()
        {
            return _flagCustomEvent;
        }
        /// <summary>
        /// Gets or Sets EventSchema
        /// </summary>
        [DataMember(Name = "event_schema", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsEventSchema EventSchema
        {
            get{ return _EventSchema;}
            set
            {
                _EventSchema = value;
                _flagEventSchema = true;
            }
        }
        private LoyaltyCardTransactionDetailsEventSchema _EventSchema;
        private bool _flagEventSchema;

        /// <summary>
        /// Returns false as EventSchema should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEventSchema()
        {
            return _flagEventSchema;
        }
        /// <summary>
        /// Gets or Sets HolderLoyaltyTier
        /// </summary>
        [DataMember(Name = "holder_loyalty_tier", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsHolderLoyaltyTier HolderLoyaltyTier
        {
            get{ return _HolderLoyaltyTier;}
            set
            {
                _HolderLoyaltyTier = value;
                _flagHolderLoyaltyTier = true;
            }
        }
        private LoyaltyCardTransactionDetailsHolderLoyaltyTier _HolderLoyaltyTier;
        private bool _flagHolderLoyaltyTier;

        /// <summary>
        /// Returns false as HolderLoyaltyTier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHolderLoyaltyTier()
        {
            return _flagHolderLoyaltyTier;
        }
        /// <summary>
        /// Gets or Sets PendingPoints
        /// </summary>
        [DataMember(Name = "pending_points", EmitDefaultValue = true)]
        public LoyaltyPendingPoints PendingPoints
        {
            get{ return _PendingPoints;}
            set
            {
                _PendingPoints = value;
                _flagPendingPoints = true;
            }
        }
        private LoyaltyPendingPoints _PendingPoints;
        private bool _flagPendingPoints;

        /// <summary>
        /// Returns false as PendingPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPoints()
        {
            return _flagPendingPoints;
        }
        /// <summary>
        /// Gets or Sets Reward
        /// </summary>
        [DataMember(Name = "reward", EmitDefaultValue = true)]
        public LoyaltyCardTransactionDetailsReward Reward
        {
            get{ return _Reward;}
            set
            {
                _Reward = value;
                _flagReward = true;
            }
        }
        private LoyaltyCardTransactionDetailsReward _Reward;
        private bool _flagReward;

        /// <summary>
        /// Returns false as Reward should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReward()
        {
            return _flagReward;
        }
        /// <summary>
        /// Gets or Sets SourceVoucher
        /// </summary>
        [DataMember(Name = "source_voucher", EmitDefaultValue = true)]
        public SimpleVoucher SourceVoucher
        {
            get{ return _SourceVoucher;}
            set
            {
                _SourceVoucher = value;
                _flagSourceVoucher = true;
            }
        }
        private SimpleVoucher _SourceVoucher;
        private bool _flagSourceVoucher;

        /// <summary>
        /// Returns false as SourceVoucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceVoucher()
        {
            return _flagSourceVoucher;
        }
        /// <summary>
        /// Gets or Sets DestinationVoucher
        /// </summary>
        [DataMember(Name = "destination_voucher", EmitDefaultValue = true)]
        public SimpleVoucher DestinationVoucher
        {
            get{ return _DestinationVoucher;}
            set
            {
                _DestinationVoucher = value;
                _flagDestinationVoucher = true;
            }
        }
        private SimpleVoucher _DestinationVoucher;
        private bool _flagDestinationVoucher;

        /// <summary>
        /// Returns false as DestinationVoucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDestinationVoucher()
        {
            return _flagDestinationVoucher;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyCardTransactionDetails {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  EarningRule: ").Append(EarningRule).Append("\n");
            sb.Append("  Segment: ").Append(Segment).Append("\n");
            sb.Append("  LoyaltyTier: ").Append(LoyaltyTier).Append("\n");
            sb.Append("  Redemption: ").Append(Redemption).Append("\n");
            sb.Append("  Rollback: ").Append(Rollback).Append("\n");
            sb.Append("  CustomEvent: ").Append(CustomEvent).Append("\n");
            sb.Append("  EventSchema: ").Append(EventSchema).Append("\n");
            sb.Append("  HolderLoyaltyTier: ").Append(HolderLoyaltyTier).Append("\n");
            sb.Append("  PendingPoints: ").Append(PendingPoints).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  SourceVoucher: ").Append(SourceVoucher).Append("\n");
            sb.Append("  DestinationVoucher: ").Append(DestinationVoucher).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
