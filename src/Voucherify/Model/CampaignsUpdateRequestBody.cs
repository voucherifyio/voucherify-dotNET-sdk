/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// CampaignsUpdateRequestBody
    /// </summary>
    [DataContract(Name = "CampaignsUpdateRequestBody")]
    public partial class CampaignsUpdateRequestBody : IValidatableObject
    {
        /// <summary>
        /// Defines ValidityDayOfWeek
        /// </summary>
        public enum ValidityDayOfWeekEnum
        {
            /// <summary>
            /// Enum NUMBER_0 for value: 0
            /// </summary>
            NUMBER_0 = 0,

            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6
        }

        /// <summary>
        /// Defines whether the campaign can be updated with new vouchers after campaign creation.  - &#x60;AUTO_UPDATE&#x60;: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method). -  &#x60;STATIC&#x60;: vouchers need to be manually published.  If the &#x60;type&#x60; of the campaign is &#x60;STANDALONE&#x60;, the type cannot be changed. Also, the &#x60;type&#x60; cannot be changed to &#x60;STANDALONE&#x60;.
        /// </summary>
        /// <value>Defines whether the campaign can be updated with new vouchers after campaign creation.  - &#x60;AUTO_UPDATE&#x60;: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method). -  &#x60;STATIC&#x60;: vouchers need to be manually published.  If the &#x60;type&#x60; of the campaign is &#x60;STANDALONE&#x60;, the type cannot be changed. Also, the &#x60;type&#x60; cannot be changed to &#x60;STANDALONE&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AUTOUPDATE for value: AUTO_UPDATE
            /// </summary>
            [EnumMember(Value = "AUTO_UPDATE")]
            AUTOUPDATE = 1,

            /// <summary>
            /// Enum STATIC for value: STATIC
            /// </summary>
            [EnumMember(Value = "STATIC")]
            STATIC = 2
        }


        /// <summary>
        /// Defines whether the campaign can be updated with new vouchers after campaign creation.  - &#x60;AUTO_UPDATE&#x60;: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method). -  &#x60;STATIC&#x60;: vouchers need to be manually published.  If the &#x60;type&#x60; of the campaign is &#x60;STANDALONE&#x60;, the type cannot be changed. Also, the &#x60;type&#x60; cannot be changed to &#x60;STANDALONE&#x60;.
        /// </summary>
        /// <value>Defines whether the campaign can be updated with new vouchers after campaign creation.  - &#x60;AUTO_UPDATE&#x60;: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method). -  &#x60;STATIC&#x60;: vouchers need to be manually published.  If the &#x60;type&#x60; of the campaign is &#x60;STANDALONE&#x60;, the type cannot be changed. Also, the &#x60;type&#x60; cannot be changed to &#x60;STANDALONE&#x60;.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsUpdateRequestBody" /> class.
        /// </summary>
        /// <param name="startDate">Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. .</param>
        /// <param name="expirationDate">Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date..</param>
        /// <param name="validityTimeframe">validityTimeframe.</param>
        /// <param name="validityDayOfWeek">Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday.</param>
        /// <param name="validityHours">validityHours.</param>
        /// <param name="description">An optional field to keep any extra textual information about the campaign such as a campaign description and details..</param>
        /// <param name="category">The category assigned to the campaign. Either pass this parameter OR the &#x60;category_id&#x60;..</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format..</param>
        /// <param name="unsetMetadataFields">Determine which metadata should be removed from campaign..</param>
        /// <param name="categoryId">Unique category ID that this campaign belongs to. Either pass this parameter OR the &#x60;category&#x60;..</param>
        /// <param name="accessSettings">accessSettings.</param>
        /// <param name="activityDurationAfterPublishing">Defines the amount of time the vouchers will be active after publishing. The value is shown in the ISO 8601 format. For example, a voucher with the value of P24D will be valid for a duration of 24 days..</param>
        /// <param name="joinOnce">If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once. It is always &#x60;false&#x60; for standalone voucher campaigns and it cannot be changed in them..</param>
        /// <param name="autoJoin">Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled..</param>
        /// <param name="type">Defines whether the campaign can be updated with new vouchers after campaign creation.  - &#x60;AUTO_UPDATE&#x60;: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method). -  &#x60;STATIC&#x60;: vouchers need to be manually published.  If the &#x60;type&#x60; of the campaign is &#x60;STANDALONE&#x60;, the type cannot be changed. Also, the &#x60;type&#x60; cannot be changed to &#x60;STANDALONE&#x60;..</param>
        /// <param name="discount">discount.</param>
        /// <param name="referralProgram">referralProgram.</param>
        /// <param name="gift">gift.</param>
        /// <param name="loyaltyTiersExpiration">loyaltyTiersExpiration.</param>
        /// <param name="options">options.</param>
        public CampaignsUpdateRequestBody(DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? expirationDate = default(DateTimeOffset?), ValidityTimeframe validityTimeframe = default(ValidityTimeframe), List<ValidityDayOfWeekEnum> validityDayOfWeek = default(List<ValidityDayOfWeekEnum>), ValidityHours validityHours = default(ValidityHours), string description = default(string), string category = default(string), Object metadata = default(Object), List<string> unsetMetadataFields = default(List<string>), string categoryId = default(string), AccessSettings accessSettings = default(AccessSettings), string activityDurationAfterPublishing = default(string), bool? joinOnce = default(bool?), bool? autoJoin = default(bool?), TypeEnum? type = default(TypeEnum?), Discount discount = default(Discount), ReferralProgram referralProgram = default(ReferralProgram), Gift gift = default(Gift), LoyaltyTiersExpirationAll loyaltyTiersExpiration = default(LoyaltyTiersExpirationAll), CampaignsUpdateRequestBodyOptions options = default(CampaignsUpdateRequestBodyOptions))
        {
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._ValidityTimeframe = validityTimeframe;
            if (this.ValidityTimeframe != null)
            {
                this._flagValidityTimeframe = true;
            }
            this._ValidityDayOfWeek = validityDayOfWeek;
            if (this.ValidityDayOfWeek != null)
            {
                this._flagValidityDayOfWeek = true;
            }
            this._ValidityHours = validityHours;
            if (this.ValidityHours != null)
            {
                this._flagValidityHours = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Category = category;
            if (this.Category != null)
            {
                this._flagCategory = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._UnsetMetadataFields = unsetMetadataFields;
            if (this.UnsetMetadataFields != null)
            {
                this._flagUnsetMetadataFields = true;
            }
            this._CategoryId = categoryId;
            if (this.CategoryId != null)
            {
                this._flagCategoryId = true;
            }
            this._AccessSettings = accessSettings;
            if (this.AccessSettings != null)
            {
                this._flagAccessSettings = true;
            }
            this._ActivityDurationAfterPublishing = activityDurationAfterPublishing;
            if (this.ActivityDurationAfterPublishing != null)
            {
                this._flagActivityDurationAfterPublishing = true;
            }
            this._JoinOnce = joinOnce;
            if (this.JoinOnce != null)
            {
                this._flagJoinOnce = true;
            }
            this._AutoJoin = autoJoin;
            if (this.AutoJoin != null)
            {
                this._flagAutoJoin = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Discount = discount;
            if (this.Discount != null)
            {
                this._flagDiscount = true;
            }
            this._ReferralProgram = referralProgram;
            if (this.ReferralProgram != null)
            {
                this._flagReferralProgram = true;
            }
            this._Gift = gift;
            if (this.Gift != null)
            {
                this._flagGift = true;
            }
            this._LoyaltyTiersExpiration = loyaltyTiersExpiration;
            if (this.LoyaltyTiersExpiration != null)
            {
                this._flagLoyaltyTiersExpiration = true;
            }
            this._Options = options;
            if (this.Options != null)
            {
                this._flagOptions = true;
            }
        }

        /// <summary>
        /// Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. 
        /// </summary>
        /// <value>Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. </value>
        /*
        <example>2022-09-20T00:00Z</example>
        */
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTimeOffset? StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private DateTimeOffset? _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.
        /// </summary>
        /// <value>Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.</value>
        /*
        <example>2022-09-30T00:00Z</example>
        */
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// Gets or Sets ValidityTimeframe
        /// </summary>
        [DataMember(Name = "validity_timeframe", EmitDefaultValue = true)]
        public ValidityTimeframe ValidityTimeframe
        {
            get{ return _ValidityTimeframe;}
            set
            {
                _ValidityTimeframe = value;
                _flagValidityTimeframe = true;
            }
        }
        private ValidityTimeframe _ValidityTimeframe;
        private bool _flagValidityTimeframe;

        /// <summary>
        /// Returns false as ValidityTimeframe should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityTimeframe()
        {
            return _flagValidityTimeframe;
        }
        /// <summary>
        /// Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday
        /// </summary>
        /// <value>Integer array corresponding to the particular days of the week in which the voucher is valid.  - &#x60;0&#x60; Sunday - &#x60;1&#x60; Monday - &#x60;2&#x60; Tuesday - &#x60;3&#x60; Wednesday - &#x60;4&#x60; Thursday - &#x60;5&#x60; Friday - &#x60;6&#x60; Saturday</value>
        [DataMember(Name = "validity_day_of_week", EmitDefaultValue = true)]
        public List<CampaignsUpdateRequestBody.ValidityDayOfWeekEnum> ValidityDayOfWeek
        {
            get{ return _ValidityDayOfWeek;}
            set
            {
                _ValidityDayOfWeek = value;
                _flagValidityDayOfWeek = true;
            }
        }
        private List<CampaignsUpdateRequestBody.ValidityDayOfWeekEnum> _ValidityDayOfWeek;
        private bool _flagValidityDayOfWeek;

        /// <summary>
        /// Returns false as ValidityDayOfWeek should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityDayOfWeek()
        {
            return _flagValidityDayOfWeek;
        }
        /// <summary>
        /// Gets or Sets ValidityHours
        /// </summary>
        [DataMember(Name = "validity_hours", EmitDefaultValue = true)]
        public ValidityHours ValidityHours
        {
            get{ return _ValidityHours;}
            set
            {
                _ValidityHours = value;
                _flagValidityHours = true;
            }
        }
        private ValidityHours _ValidityHours;
        private bool _flagValidityHours;

        /// <summary>
        /// Returns false as ValidityHours should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidityHours()
        {
            return _flagValidityHours;
        }
        /// <summary>
        /// An optional field to keep any extra textual information about the campaign such as a campaign description and details.
        /// </summary>
        /// <value>An optional field to keep any extra textual information about the campaign such as a campaign description and details.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// The category assigned to the campaign. Either pass this parameter OR the &#x60;category_id&#x60;.
        /// </summary>
        /// <value>The category assigned to the campaign. Either pass this parameter OR the &#x60;category_id&#x60;.</value>
        [DataMember(Name = "category", EmitDefaultValue = true)]
        public string Category
        {
            get{ return _Category;}
            set
            {
                _Category = value;
                _flagCategory = true;
            }
        }
        private string _Category;
        private bool _flagCategory;

        /// <summary>
        /// Returns false as Category should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategory()
        {
            return _flagCategory;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the campaign. A set of key/value pairs that you can attach to a campaign object. It can be useful for storing additional information about the campaign in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Determine which metadata should be removed from campaign.
        /// </summary>
        /// <value>Determine which metadata should be removed from campaign.</value>
        [DataMember(Name = "unset_metadata_fields", EmitDefaultValue = true)]
        public List<string> UnsetMetadataFields
        {
            get{ return _UnsetMetadataFields;}
            set
            {
                _UnsetMetadataFields = value;
                _flagUnsetMetadataFields = true;
            }
        }
        private List<string> _UnsetMetadataFields;
        private bool _flagUnsetMetadataFields;

        /// <summary>
        /// Returns false as UnsetMetadataFields should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnsetMetadataFields()
        {
            return _flagUnsetMetadataFields;
        }
        /// <summary>
        /// Unique category ID that this campaign belongs to. Either pass this parameter OR the &#x60;category&#x60;.
        /// </summary>
        /// <value>Unique category ID that this campaign belongs to. Either pass this parameter OR the &#x60;category&#x60;.</value>
        /*
        <example>cat_0b688929a2476386a7</example>
        */
        [DataMember(Name = "category_id", EmitDefaultValue = true)]
        public string CategoryId
        {
            get{ return _CategoryId;}
            set
            {
                _CategoryId = value;
                _flagCategoryId = true;
            }
        }
        private string _CategoryId;
        private bool _flagCategoryId;

        /// <summary>
        /// Returns false as CategoryId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategoryId()
        {
            return _flagCategoryId;
        }
        /// <summary>
        /// Gets or Sets AccessSettings
        /// </summary>
        [DataMember(Name = "access_settings", EmitDefaultValue = true)]
        public AccessSettings AccessSettings
        {
            get{ return _AccessSettings;}
            set
            {
                _AccessSettings = value;
                _flagAccessSettings = true;
            }
        }
        private AccessSettings _AccessSettings;
        private bool _flagAccessSettings;

        /// <summary>
        /// Returns false as AccessSettings should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccessSettings()
        {
            return _flagAccessSettings;
        }
        /// <summary>
        /// Defines the amount of time the vouchers will be active after publishing. The value is shown in the ISO 8601 format. For example, a voucher with the value of P24D will be valid for a duration of 24 days.
        /// </summary>
        /// <value>Defines the amount of time the vouchers will be active after publishing. The value is shown in the ISO 8601 format. For example, a voucher with the value of P24D will be valid for a duration of 24 days.</value>
        [DataMember(Name = "activity_duration_after_publishing", EmitDefaultValue = true)]
        public string ActivityDurationAfterPublishing
        {
            get{ return _ActivityDurationAfterPublishing;}
            set
            {
                _ActivityDurationAfterPublishing = value;
                _flagActivityDurationAfterPublishing = true;
            }
        }
        private string _ActivityDurationAfterPublishing;
        private bool _flagActivityDurationAfterPublishing;

        /// <summary>
        /// Returns false as ActivityDurationAfterPublishing should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActivityDurationAfterPublishing()
        {
            return _flagActivityDurationAfterPublishing;
        }
        /// <summary>
        /// If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once. It is always &#x60;false&#x60; for standalone voucher campaigns and it cannot be changed in them.
        /// </summary>
        /// <value>If this value is set to &#x60;true&#x60;, customers will be able to join the campaign only once. It is always &#x60;false&#x60; for standalone voucher campaigns and it cannot be changed in them.</value>
        [DataMember(Name = "join_once", EmitDefaultValue = true)]
        public bool? JoinOnce
        {
            get{ return _JoinOnce;}
            set
            {
                _JoinOnce = value;
                _flagJoinOnce = true;
            }
        }
        private bool? _JoinOnce;
        private bool _flagJoinOnce;

        /// <summary>
        /// Returns false as JoinOnce should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJoinOnce()
        {
            return _flagJoinOnce;
        }
        /// <summary>
        /// Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled.
        /// </summary>
        /// <value>Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled.</value>
        [DataMember(Name = "auto_join", EmitDefaultValue = true)]
        public bool? AutoJoin
        {
            get{ return _AutoJoin;}
            set
            {
                _AutoJoin = value;
                _flagAutoJoin = true;
            }
        }
        private bool? _AutoJoin;
        private bool _flagAutoJoin;

        /// <summary>
        /// Returns false as AutoJoin should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAutoJoin()
        {
            return _flagAutoJoin;
        }
        /// <summary>
        /// Gets or Sets Discount
        /// </summary>
        [DataMember(Name = "discount", EmitDefaultValue = true)]
        public Discount Discount
        {
            get{ return _Discount;}
            set
            {
                _Discount = value;
                _flagDiscount = true;
            }
        }
        private Discount _Discount;
        private bool _flagDiscount;

        /// <summary>
        /// Returns false as Discount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDiscount()
        {
            return _flagDiscount;
        }
        /// <summary>
        /// Gets or Sets ReferralProgram
        /// </summary>
        [DataMember(Name = "referral_program", EmitDefaultValue = true)]
        public ReferralProgram ReferralProgram
        {
            get{ return _ReferralProgram;}
            set
            {
                _ReferralProgram = value;
                _flagReferralProgram = true;
            }
        }
        private ReferralProgram _ReferralProgram;
        private bool _flagReferralProgram;

        /// <summary>
        /// Returns false as ReferralProgram should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferralProgram()
        {
            return _flagReferralProgram;
        }
        /// <summary>
        /// Gets or Sets Gift
        /// </summary>
        [DataMember(Name = "gift", EmitDefaultValue = true)]
        public Gift Gift
        {
            get{ return _Gift;}
            set
            {
                _Gift = value;
                _flagGift = true;
            }
        }
        private Gift _Gift;
        private bool _flagGift;

        /// <summary>
        /// Returns false as Gift should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGift()
        {
            return _flagGift;
        }
        /// <summary>
        /// Gets or Sets LoyaltyTiersExpiration
        /// </summary>
        [DataMember(Name = "loyalty_tiers_expiration", EmitDefaultValue = true)]
        public LoyaltyTiersExpirationAll LoyaltyTiersExpiration
        {
            get{ return _LoyaltyTiersExpiration;}
            set
            {
                _LoyaltyTiersExpiration = value;
                _flagLoyaltyTiersExpiration = true;
            }
        }
        private LoyaltyTiersExpirationAll _LoyaltyTiersExpiration;
        private bool _flagLoyaltyTiersExpiration;

        /// <summary>
        /// Returns false as LoyaltyTiersExpiration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTiersExpiration()
        {
            return _flagLoyaltyTiersExpiration;
        }
        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = true)]
        public CampaignsUpdateRequestBodyOptions Options
        {
            get{ return _Options;}
            set
            {
                _Options = value;
                _flagOptions = true;
            }
        }
        private CampaignsUpdateRequestBodyOptions _Options;
        private bool _flagOptions;

        /// <summary>
        /// Returns false as Options should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptions()
        {
            return _flagOptions;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignsUpdateRequestBody {\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ValidityTimeframe: ").Append(ValidityTimeframe).Append("\n");
            sb.Append("  ValidityDayOfWeek: ").Append(ValidityDayOfWeek).Append("\n");
            sb.Append("  ValidityHours: ").Append(ValidityHours).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  UnsetMetadataFields: ").Append(UnsetMetadataFields).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  AccessSettings: ").Append(AccessSettings).Append("\n");
            sb.Append("  ActivityDurationAfterPublishing: ").Append(ActivityDurationAfterPublishing).Append("\n");
            sb.Append("  JoinOnce: ").Append(JoinOnce).Append("\n");
            sb.Append("  AutoJoin: ").Append(AutoJoin).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  ReferralProgram: ").Append(ReferralProgram).Append("\n");
            sb.Append("  Gift: ").Append(Gift).Append("\n");
            sb.Append("  LoyaltyTiersExpiration: ").Append(LoyaltyTiersExpiration).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
