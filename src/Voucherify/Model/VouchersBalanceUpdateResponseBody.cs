/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for &#x60;vouchers/{code}/balance.&#x60;
    /// </summary>
    [DataContract(Name = "VouchersBalanceUpdateResponseBody")]
    public partial class VouchersBalanceUpdateResponseBody : IValidatableObject
    {
        /// <summary>
        /// The type of voucher being modified.
        /// </summary>
        /// <value>The type of voucher being modified.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum GiftVoucher for value: gift_voucher
            /// </summary>
            [EnumMember(Value = "gift_voucher")]
            GiftVoucher = 1,

            /// <summary>
            /// Enum LoyaltyCard for value: loyalty_card
            /// </summary>
            [EnumMember(Value = "loyalty_card")]
            LoyaltyCard = 2
        }


        /// <summary>
        /// The type of voucher being modified.
        /// </summary>
        /// <value>The type of voucher being modified.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// The type of the operation being performed.
        /// </summary>
        /// <value>The type of the operation being performed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationTypeEnum
        {
            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 1
        }


        /// <summary>
        /// The type of the operation being performed.
        /// </summary>
        /// <value>The type of the operation being performed.</value>

        [DataMember(Name = "operation_type", EmitDefaultValue = true)]
        public OperationTypeEnum? OperationType
        {
            get{ return _OperationType;}
            set
            {
                _OperationType = value;
                _flagOperationType = true;
            }
        }
        private OperationTypeEnum? _OperationType;
        private bool _flagOperationType;

        /// <summary>
        /// Returns false as OperationType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOperationType()
        {
            return _flagOperationType;
        }
        /// <summary>
        /// The type of the object represented by JSON. Default is &#x60;balance&#x60;.
        /// </summary>
        /// <value>The type of the object represented by JSON. Default is &#x60;balance&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Balance for value: balance
            /// </summary>
            [EnumMember(Value = "balance")]
            Balance = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. Default is &#x60;balance&#x60;.
        /// </summary>
        /// <value>The type of the object represented by JSON. Default is &#x60;balance&#x60;.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="VouchersBalanceUpdateResponseBody" /> class.
        /// </summary>
        /// <param name="amount">The incremental amount added (positive integer) or subtracted (negative integer) to the current balance on the gift card or loyalty card. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="total">Total income incurred over the lifespan of the gift card or loyalty card..</param>
        /// <param name="balance">The balance after adding or subtracting a specified amount. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;..</param>
        /// <param name="type">The type of voucher being modified..</param>
        /// <param name="operationType">The type of the operation being performed..</param>
        /// <param name="varObject">The type of the object represented by JSON. Default is &#x60;balance&#x60;..</param>
        /// <param name="relatedObject">relatedObject.</param>
        public VouchersBalanceUpdateResponseBody(int? amount = default(int?), int? total = default(int?), int? balance = default(int?), TypeEnum? type = default(TypeEnum?), OperationTypeEnum? operationType = default(OperationTypeEnum?), ObjectEnum? varObject = default(ObjectEnum?), VouchersBalanceUpdateResponseBodyRelatedObject relatedObject = default(VouchersBalanceUpdateResponseBodyRelatedObject))
        {
            this._Amount = amount;
            if (this.Amount != null)
            {
                this._flagAmount = true;
            }
            this._Total = total;
            if (this.Total != null)
            {
                this._flagTotal = true;
            }
            this._Balance = balance;
            if (this.Balance != null)
            {
                this._flagBalance = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._OperationType = operationType;
            if (this.OperationType != null)
            {
                this._flagOperationType = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._RelatedObject = relatedObject;
            if (this.RelatedObject != null)
            {
                this._flagRelatedObject = true;
            }
        }

        /// <summary>
        /// The incremental amount added (positive integer) or subtracted (negative integer) to the current balance on the gift card or loyalty card. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>The incremental amount added (positive integer) or subtracted (negative integer) to the current balance on the gift card or loyalty card. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public int? Amount
        {
            get{ return _Amount;}
            set
            {
                _Amount = value;
                _flagAmount = true;
            }
        }
        private int? _Amount;
        private bool _flagAmount;

        /// <summary>
        /// Returns false as Amount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAmount()
        {
            return _flagAmount;
        }
        /// <summary>
        /// Total income incurred over the lifespan of the gift card or loyalty card.
        /// </summary>
        /// <value>Total income incurred over the lifespan of the gift card or loyalty card.</value>
        [DataMember(Name = "total", EmitDefaultValue = true)]
        public int? Total
        {
            get{ return _Total;}
            set
            {
                _Total = value;
                _flagTotal = true;
            }
        }
        private int? _Total;
        private bool _flagTotal;

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return _flagTotal;
        }
        /// <summary>
        /// The balance after adding or subtracting a specified amount. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.
        /// </summary>
        /// <value>The balance after adding or subtracting a specified amount. The value is multiplied by 100 to represent 2 decimal places. For example &#x60;10000 cents&#x60; for &#x60;$100.00&#x60;.</value>
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public int? Balance
        {
            get{ return _Balance;}
            set
            {
                _Balance = value;
                _flagBalance = true;
            }
        }
        private int? _Balance;
        private bool _flagBalance;

        /// <summary>
        /// Returns false as Balance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBalance()
        {
            return _flagBalance;
        }
        /// <summary>
        /// Gets or Sets RelatedObject
        /// </summary>
        [DataMember(Name = "related_object", EmitDefaultValue = true)]
        public VouchersBalanceUpdateResponseBodyRelatedObject RelatedObject
        {
            get{ return _RelatedObject;}
            set
            {
                _RelatedObject = value;
                _flagRelatedObject = true;
            }
        }
        private VouchersBalanceUpdateResponseBodyRelatedObject _RelatedObject;
        private bool _flagRelatedObject;

        /// <summary>
        /// Returns false as RelatedObject should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObject()
        {
            return _flagRelatedObject;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VouchersBalanceUpdateResponseBody {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  RelatedObject: ").Append(RelatedObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
