/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// LoyaltyTierBase
    /// </summary>
    [DataContract(Name = "LoyaltyTierBase")]
    public partial class LoyaltyTierBase : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTierBase" /> class.
        /// </summary>
        /// <param name="name">Loyalty Tier name..</param>
        /// <param name="earningRules">Contains a list of earning rule IDs and their points mapping for the given earning rule..</param>
        /// <param name="rewards">Contains a list of reward IDs and their points mapping for the given reward..</param>
        /// <param name="points">points.</param>
        public LoyaltyTierBase(string name = default(string), Dictionary<string, MappingPoints> earningRules = default(Dictionary<string, MappingPoints>), Dictionary<string, MappingPoints> rewards = default(Dictionary<string, MappingPoints>), LoyaltyTierBasePoints points = default(LoyaltyTierBasePoints))
        {
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._EarningRules = earningRules;
            if (this.EarningRules != null)
            {
                this._flagEarningRules = true;
            }
            this._Rewards = rewards;
            if (this.Rewards != null)
            {
                this._flagRewards = true;
            }
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
        }

        /// <summary>
        /// Loyalty Tier name.
        /// </summary>
        /// <value>Loyalty Tier name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Contains a list of earning rule IDs and their points mapping for the given earning rule.
        /// </summary>
        /// <value>Contains a list of earning rule IDs and their points mapping for the given earning rule.</value>
        [DataMember(Name = "earning_rules", EmitDefaultValue = true)]
        public Dictionary<string, MappingPoints> EarningRules
        {
            get{ return _EarningRules;}
            set
            {
                _EarningRules = value;
                _flagEarningRules = true;
            }
        }
        private Dictionary<string, MappingPoints> _EarningRules;
        private bool _flagEarningRules;

        /// <summary>
        /// Returns false as EarningRules should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEarningRules()
        {
            return _flagEarningRules;
        }
        /// <summary>
        /// Contains a list of reward IDs and their points mapping for the given reward.
        /// </summary>
        /// <value>Contains a list of reward IDs and their points mapping for the given reward.</value>
        [DataMember(Name = "rewards", EmitDefaultValue = true)]
        public Dictionary<string, MappingPoints> Rewards
        {
            get{ return _Rewards;}
            set
            {
                _Rewards = value;
                _flagRewards = true;
            }
        }
        private Dictionary<string, MappingPoints> _Rewards;
        private bool _flagRewards;

        /// <summary>
        /// Returns false as Rewards should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRewards()
        {
            return _flagRewards;
        }
        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public LoyaltyTierBasePoints Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private LoyaltyTierBasePoints _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyTierBase {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EarningRules: ").Append(EarningRules).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
