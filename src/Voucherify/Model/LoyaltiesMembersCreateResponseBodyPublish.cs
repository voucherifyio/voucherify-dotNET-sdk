/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or &lt;!- - [publish voucher](OpenAPI.json/paths/~1publications/post) - -&gt;[publish voucher](ref:create-publication) API method.   &lt;!- - title: My Table Title - -&gt;  | Required | Optional | | - -- -- -- - | :- -- -- -: | | &#x60;type&#x60;:&#x60;LOYALTY_CARD&#x60; |  &#x60;type&#x60;:&#x60;DISCOUNT_VOUCHER&#x60;   |  | &#x60;is_referral_code&#x60;:&#x60;true&#x60;      |    &#x60;type&#x60;:&#x60;GIFT_VOUCHER&#x60;   | 
    /// </summary>
    [DataContract(Name = "LoyaltiesMembersCreateResponseBodyPublish")]
    public partial class LoyaltiesMembersCreateResponseBodyPublish : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesMembersCreateResponseBodyPublish" /> class.
        /// </summary>
        /// <param name="varObject">The type of the object represented is by default &#x60;list&#x60;. To get this list, you need to make a call to the endpoint returned in the &#x60;url&#x60; attribute. (default to &quot;list&quot;).</param>
        /// <param name="count">Publication event counter..</param>
        /// <param name="url">The endpoint where this list of publications can be accessed using a **GET** method. &#x60;/v1/vouchers/{voucher_code}/publications&#x60;.</param>
        public LoyaltiesMembersCreateResponseBodyPublish(string varObject = @"list", int? count = default(int?), string url = default(string))
        {
            this._Count = count;
            if (this.Count != null)
            {
                this._flagCount = true;
            }
            this._Url = url;
            if (this.Url != null)
            {
                this._flagUrl = true;
            }
        }

        /// <summary>
        /// The type of the object represented is by default &#x60;list&#x60;. To get this list, you need to make a call to the endpoint returned in the &#x60;url&#x60; attribute.
        /// </summary>
        /// <value>The type of the object represented is by default &#x60;list&#x60;. To get this list, you need to make a call to the endpoint returned in the &#x60;url&#x60; attribute.</value>
        [DataMember(Name = "object", EmitDefaultValue = true)]
        public string Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private string _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Publication event counter.
        /// </summary>
        /// <value>Publication event counter.</value>
        /*
        <example>0</example>
        */
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public int? Count
        {
            get{ return _Count;}
            set
            {
                _Count = value;
                _flagCount = true;
            }
        }
        private int? _Count;
        private bool _flagCount;

        /// <summary>
        /// Returns false as Count should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCount()
        {
            return _flagCount;
        }
        /// <summary>
        /// The endpoint where this list of publications can be accessed using a **GET** method. &#x60;/v1/vouchers/{voucher_code}/publications&#x60;
        /// </summary>
        /// <value>The endpoint where this list of publications can be accessed using a **GET** method. &#x60;/v1/vouchers/{voucher_code}/publications&#x60;</value>
        /*
        <example>/v1/vouchers/WVPblOYX/publications?page&#x3D;1&amp;limit&#x3D;10</example>
        */
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url
        {
            get{ return _Url;}
            set
            {
                _Url = value;
                _flagUrl = true;
            }
        }
        private string _Url;
        private bool _flagUrl;

        /// <summary>
        /// Returns false as Url should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUrl()
        {
            return _flagUrl;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltiesMembersCreateResponseBodyPublish {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
