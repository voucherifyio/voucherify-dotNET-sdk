/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **POST** &#x60;v1/qualifications&#x60;.
    /// </summary>
    [DataContract(Name = "QualificationsCheckEligibilityResponseBody")]
    public partial class QualificationsCheckEligibilityResponseBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QualificationsCheckEligibilityResponseBody" /> class.
        /// </summary>
        /// <param name="redeemables">redeemables.</param>
        /// <param name="trackingId">This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID..</param>
        /// <param name="order">order.</param>
        /// <param name="stackingRules">stackingRules.</param>
        public QualificationsCheckEligibilityResponseBody(QualificationsRedeemables redeemables = default(QualificationsRedeemables), string trackingId = default(string), QualificationsCheckEligibilityResponseBodyOrder order = default(QualificationsCheckEligibilityResponseBodyOrder), StackingRules stackingRules = default(StackingRules))
        {
            this._Redeemables = redeemables;
            if (this.Redeemables != null)
            {
                this._flagRedeemables = true;
            }
            this._TrackingId = trackingId;
            if (this.TrackingId != null)
            {
                this._flagTrackingId = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._StackingRules = stackingRules;
            if (this.StackingRules != null)
            {
                this._flagStackingRules = true;
            }
        }

        /// <summary>
        /// Gets or Sets Redeemables
        /// </summary>
        [DataMember(Name = "redeemables", EmitDefaultValue = true)]
        public QualificationsRedeemables Redeemables
        {
            get{ return _Redeemables;}
            set
            {
                _Redeemables = value;
                _flagRedeemables = true;
            }
        }
        private QualificationsRedeemables _Redeemables;
        private bool _flagRedeemables;

        /// <summary>
        /// Returns false as Redeemables should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemables()
        {
            return _flagRedeemables;
        }
        /// <summary>
        /// This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID.
        /// </summary>
        /// <value>This identifier is generated during voucher qualification based on your internal id (e.g., email, database ID). This is a hashed customer source ID.</value>
        [DataMember(Name = "tracking_id", EmitDefaultValue = true)]
        public string TrackingId
        {
            get{ return _TrackingId;}
            set
            {
                _TrackingId = value;
                _flagTrackingId = true;
            }
        }
        private string _TrackingId;
        private bool _flagTrackingId;

        /// <summary>
        /// Returns false as TrackingId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTrackingId()
        {
            return _flagTrackingId;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public QualificationsCheckEligibilityResponseBodyOrder Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private QualificationsCheckEligibilityResponseBodyOrder _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets StackingRules
        /// </summary>
        [DataMember(Name = "stacking_rules", EmitDefaultValue = true)]
        public StackingRules StackingRules
        {
            get{ return _StackingRules;}
            set
            {
                _StackingRules = value;
                _flagStackingRules = true;
            }
        }
        private StackingRules _StackingRules;
        private bool _flagStackingRules;

        /// <summary>
        /// Returns false as StackingRules should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStackingRules()
        {
            return _flagStackingRules;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QualificationsCheckEligibilityResponseBody {\n");
            sb.Append("  Redeemables: ").Append(Redeemables).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  StackingRules: ").Append(StackingRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
