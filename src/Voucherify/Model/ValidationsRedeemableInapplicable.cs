/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ValidationsRedeemableInapplicable
    /// </summary>
    [DataContract(Name = "ValidationsRedeemableInapplicable")]
    public partial class ValidationsRedeemableInapplicable : IValidatableObject
    {
        /// <summary>
        /// Indicates whether the redeemable can be applied or not applied based on the validation rules.
        /// </summary>
        /// <value>Indicates whether the redeemable can be applied or not applied based on the validation rules.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum INAPPLICABLE for value: INAPPLICABLE
            /// </summary>
            [EnumMember(Value = "INAPPLICABLE")]
            INAPPLICABLE = 1
        }


        /// <summary>
        /// Indicates whether the redeemable can be applied or not applied based on the validation rules.
        /// </summary>
        /// <value>Indicates whether the redeemable can be applied or not applied based on the validation rules.</value>

        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private StatusEnum? _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// Redeemable&#39;s object type.
        /// </summary>
        /// <value>Redeemable&#39;s object type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Voucher for value: voucher
            /// </summary>
            [EnumMember(Value = "voucher")]
            Voucher = 1,

            /// <summary>
            /// Enum PromotionTier for value: promotion_tier
            /// </summary>
            [EnumMember(Value = "promotion_tier")]
            PromotionTier = 2
        }


        /// <summary>
        /// Redeemable&#39;s object type.
        /// </summary>
        /// <value>Redeemable&#39;s object type.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationsRedeemableInapplicable" /> class.
        /// </summary>
        /// <param name="status">Indicates whether the redeemable can be applied or not applied based on the validation rules. (default to StatusEnum.INAPPLICABLE).</param>
        /// <param name="id">Redeemable ID, i.e. the voucher code..</param>
        /// <param name="varObject">Redeemable&#39;s object type..</param>
        /// <param name="result">result.</param>
        /// <param name="metadata">The metadata object stores all custom attributes in the form of key/value pairs assigned to the redeemable..</param>
        /// <param name="categories">categories.</param>
        /// <param name="campaignName">Campaign name. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body..</param>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body..</param>
        /// <param name="name">Name of the promotion tier. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body..</param>
        public ValidationsRedeemableInapplicable(StatusEnum? status = StatusEnum.INAPPLICABLE, string id = default(string), ObjectEnum? varObject = default(ObjectEnum?), ValidationsRedeemableInapplicableResult result = default(ValidationsRedeemableInapplicableResult), Object metadata = default(Object), List<CategoryWithStackingRulesType> categories = default(List<CategoryWithStackingRulesType>), string campaignName = default(string), string campaignId = default(string), string name = default(string))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._Result = result;
            if (this.Result != null)
            {
                this._flagResult = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._Categories = categories;
            if (this.Categories != null)
            {
                this._flagCategories = true;
            }
            this._CampaignName = campaignName;
            if (this.CampaignName != null)
            {
                this._flagCampaignName = true;
            }
            this._CampaignId = campaignId;
            if (this.CampaignId != null)
            {
                this._flagCampaignId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
        }

        /// <summary>
        /// Redeemable ID, i.e. the voucher code.
        /// </summary>
        /// <value>Redeemable ID, i.e. the voucher code.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public ValidationsRedeemableInapplicableResult Result
        {
            get{ return _Result;}
            set
            {
                _Result = value;
                _flagResult = true;
            }
        }
        private ValidationsRedeemableInapplicableResult _Result;
        private bool _flagResult;

        /// <summary>
        /// Returns false as Result should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeResult()
        {
            return _flagResult;
        }
        /// <summary>
        /// The metadata object stores all custom attributes in the form of key/value pairs assigned to the redeemable.
        /// </summary>
        /// <value>The metadata object stores all custom attributes in the form of key/value pairs assigned to the redeemable.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", EmitDefaultValue = true)]
        public List<CategoryWithStackingRulesType> Categories
        {
            get{ return _Categories;}
            set
            {
                _Categories = value;
                _flagCategories = true;
            }
        }
        private List<CategoryWithStackingRulesType> _Categories;
        private bool _flagCategories;

        /// <summary>
        /// Returns false as Categories should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCategories()
        {
            return _flagCategories;
        }
        /// <summary>
        /// Campaign name. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body.
        /// </summary>
        /// <value>Campaign name. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body.</value>
        [DataMember(Name = "campaign_name", EmitDefaultValue = true)]
        public string CampaignName
        {
            get{ return _CampaignName;}
            set
            {
                _CampaignName = value;
                _flagCampaignName = true;
            }
        }
        private string _CampaignName;
        private bool _flagCampaignName;

        /// <summary>
        /// Returns false as CampaignName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignName()
        {
            return _flagCampaignName;
        }
        /// <summary>
        /// Unique campaign ID assigned by Voucherify. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body.
        /// </summary>
        /// <value>Unique campaign ID assigned by Voucherify. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body.</value>
        /*
        <example>camp_pqZjuhG6Mgtp4GD0zD7b8hA3</example>
        */
        [DataMember(Name = "campaign_id", EmitDefaultValue = true)]
        public string CampaignId
        {
            get{ return _CampaignId;}
            set
            {
                _CampaignId = value;
                _flagCampaignId = true;
            }
        }
        private string _CampaignId;
        private bool _flagCampaignId;

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return _flagCampaignId;
        }
        /// <summary>
        /// Name of the promotion tier. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body.
        /// </summary>
        /// <value>Name of the promotion tier. Displayed only if the &#x60;options.expand&#x60; is passed with a &#x60;redeemable&#x60; value in the validation request body.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationsRedeemableInapplicable {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
