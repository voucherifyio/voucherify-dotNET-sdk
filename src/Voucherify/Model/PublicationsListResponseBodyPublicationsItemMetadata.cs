/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// PublicationsListResponseBodyPublicationsItemMetadata
    /// </summary>
    [DataContract(Name = "PublicationsListResponseBodyPublicationsItemMetadata")]
    public partial class PublicationsListResponseBodyPublicationsItemMetadata : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicationsListResponseBodyPublicationsItemMetadata" /> class.
        /// </summary>
        /// <param name="sourceType">Defines the type of the distribution source..</param>
        /// <param name="sourceId">Unique identifier of the distribution source..</param>
        /// <param name="distributionId">Unique identifier of the distribution..</param>
        public PublicationsListResponseBodyPublicationsItemMetadata(string sourceType = default(string), string sourceId = default(string), string distributionId = default(string))
        {
            this._SourceType = sourceType;
            if (this.SourceType != null)
            {
                this._flagSourceType = true;
            }
            this._SourceId = sourceId;
            if (this.SourceId != null)
            {
                this._flagSourceId = true;
            }
            this._DistributionId = distributionId;
            if (this.DistributionId != null)
            {
                this._flagDistributionId = true;
            }
        }

        /// <summary>
        /// Defines the type of the distribution source.
        /// </summary>
        /// <value>Defines the type of the distribution source.</value>
        [DataMember(Name = "source_type", EmitDefaultValue = true)]
        public string SourceType
        {
            get{ return _SourceType;}
            set
            {
                _SourceType = value;
                _flagSourceType = true;
            }
        }
        private string _SourceType;
        private bool _flagSourceType;

        /// <summary>
        /// Returns false as SourceType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceType()
        {
            return _flagSourceType;
        }
        /// <summary>
        /// Unique identifier of the distribution source.
        /// </summary>
        /// <value>Unique identifier of the distribution source.</value>
        [DataMember(Name = "source_id", EmitDefaultValue = true)]
        public string SourceId
        {
            get{ return _SourceId;}
            set
            {
                _SourceId = value;
                _flagSourceId = true;
            }
        }
        private string _SourceId;
        private bool _flagSourceId;

        /// <summary>
        /// Returns false as SourceId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceId()
        {
            return _flagSourceId;
        }
        /// <summary>
        /// Unique identifier of the distribution.
        /// </summary>
        /// <value>Unique identifier of the distribution.</value>
        [DataMember(Name = "distribution_id", EmitDefaultValue = true)]
        public string DistributionId
        {
            get{ return _DistributionId;}
            set
            {
                _DistributionId = value;
                _flagDistributionId = true;
            }
        }
        private string _DistributionId;
        private bool _flagDistributionId;

        /// <summary>
        /// Returns false as DistributionId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDistributionId()
        {
            return _flagDistributionId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PublicationsListResponseBodyPublicationsItemMetadata {\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  DistributionId: ").Append(DistributionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
