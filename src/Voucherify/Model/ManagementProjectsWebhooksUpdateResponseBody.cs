/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **PUT** &#x60;/management/v1/projects/{projectId}/webhooks/{webhookId}&#x60;.
    /// </summary>
    [DataContract(Name = "ManagementProjectsWebhooksUpdateResponseBody")]
    public partial class ManagementProjectsWebhooksUpdateResponseBody : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by JSON.
        /// </summary>
        /// <value>The type of the object represented by JSON.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Webhook for value: webhook
            /// </summary>
            [EnumMember(Value = "webhook")]
            Webhook = 1
        }


        /// <summary>
        /// The type of the object represented by JSON.
        /// </summary>
        /// <value>The type of the object represented by JSON.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Defines Events
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventsEnum
        {
            /// <summary>
            /// Enum BusinessValidationRuleAssignmentCreated for value: business_validation_rule.assignment.created
            /// </summary>
            [EnumMember(Value = "business_validation_rule.assignment.created")]
            BusinessValidationRuleAssignmentCreated = 1,

            /// <summary>
            /// Enum BusinessValidationRuleAssignmentDeleted for value: business_validation_rule.assignment.deleted
            /// </summary>
            [EnumMember(Value = "business_validation_rule.assignment.deleted")]
            BusinessValidationRuleAssignmentDeleted = 2,

            /// <summary>
            /// Enum BusinessValidationRuleCreated for value: business_validation_rule.created
            /// </summary>
            [EnumMember(Value = "business_validation_rule.created")]
            BusinessValidationRuleCreated = 3,

            /// <summary>
            /// Enum BusinessValidationRuleDeleted for value: business_validation_rule.deleted
            /// </summary>
            [EnumMember(Value = "business_validation_rule.deleted")]
            BusinessValidationRuleDeleted = 4,

            /// <summary>
            /// Enum BusinessValidationRuleUpdated for value: business_validation_rule.updated
            /// </summary>
            [EnumMember(Value = "business_validation_rule.updated")]
            BusinessValidationRuleUpdated = 5,

            /// <summary>
            /// Enum CampaignCreated for value: campaign.created
            /// </summary>
            [EnumMember(Value = "campaign.created")]
            CampaignCreated = 6,

            /// <summary>
            /// Enum CampaignDeleted for value: campaign.deleted
            /// </summary>
            [EnumMember(Value = "campaign.deleted")]
            CampaignDeleted = 7,

            /// <summary>
            /// Enum CampaignDisabled for value: campaign.disabled
            /// </summary>
            [EnumMember(Value = "campaign.disabled")]
            CampaignDisabled = 8,

            /// <summary>
            /// Enum CampaignEnabled for value: campaign.enabled
            /// </summary>
            [EnumMember(Value = "campaign.enabled")]
            CampaignEnabled = 9,

            /// <summary>
            /// Enum CampaignEarningRuleAssigned for value: campaign.earning_rule.assigned
            /// </summary>
            [EnumMember(Value = "campaign.earning_rule.assigned")]
            CampaignEarningRuleAssigned = 10,

            /// <summary>
            /// Enum CampaignEarningRuleDeleted for value: campaign.earning_rule.deleted
            /// </summary>
            [EnumMember(Value = "campaign.earning_rule.deleted")]
            CampaignEarningRuleDeleted = 11,

            /// <summary>
            /// Enum CampaignEarningRuleDisabled for value: campaign.earning_rule.disabled
            /// </summary>
            [EnumMember(Value = "campaign.earning_rule.disabled")]
            CampaignEarningRuleDisabled = 12,

            /// <summary>
            /// Enum CampaignEarningRuleEnabled for value: campaign.earning_rule.enabled
            /// </summary>
            [EnumMember(Value = "campaign.earning_rule.enabled")]
            CampaignEarningRuleEnabled = 13,

            /// <summary>
            /// Enum CampaignEarningRuleUpdated for value: campaign.earning_rule.updated
            /// </summary>
            [EnumMember(Value = "campaign.earning_rule.updated")]
            CampaignEarningRuleUpdated = 14,

            /// <summary>
            /// Enum CampaignLoyaltyTierCreated for value: campaign.loyalty_tier.created
            /// </summary>
            [EnumMember(Value = "campaign.loyalty_tier.created")]
            CampaignLoyaltyTierCreated = 15,

            /// <summary>
            /// Enum CampaignLoyaltyTierDeleted for value: campaign.loyalty_tier.deleted
            /// </summary>
            [EnumMember(Value = "campaign.loyalty_tier.deleted")]
            CampaignLoyaltyTierDeleted = 16,

            /// <summary>
            /// Enum CampaignLoyaltyTierUpdated for value: campaign.loyalty_tier.updated
            /// </summary>
            [EnumMember(Value = "campaign.loyalty_tier.updated")]
            CampaignLoyaltyTierUpdated = 17,

            /// <summary>
            /// Enum CampaignPromotionStackCreated for value: campaign.promotion_stack.created
            /// </summary>
            [EnumMember(Value = "campaign.promotion_stack.created")]
            CampaignPromotionStackCreated = 18,

            /// <summary>
            /// Enum CampaignPromotionStackUpdated for value: campaign.promotion_stack.updated
            /// </summary>
            [EnumMember(Value = "campaign.promotion_stack.updated")]
            CampaignPromotionStackUpdated = 19,

            /// <summary>
            /// Enum CampaignPromotionTierCreated for value: campaign.promotion_tier.created
            /// </summary>
            [EnumMember(Value = "campaign.promotion_tier.created")]
            CampaignPromotionTierCreated = 20,

            /// <summary>
            /// Enum CampaignPromotionTierDeleted for value: campaign.promotion_tier.deleted
            /// </summary>
            [EnumMember(Value = "campaign.promotion_tier.deleted")]
            CampaignPromotionTierDeleted = 21,

            /// <summary>
            /// Enum CampaignPromotionTierDisabled for value: campaign.promotion_tier.disabled
            /// </summary>
            [EnumMember(Value = "campaign.promotion_tier.disabled")]
            CampaignPromotionTierDisabled = 22,

            /// <summary>
            /// Enum CampaignPromotionTierEnabled for value: campaign.promotion_tier.enabled
            /// </summary>
            [EnumMember(Value = "campaign.promotion_tier.enabled")]
            CampaignPromotionTierEnabled = 23,

            /// <summary>
            /// Enum CampaignPromotionTierUpdated for value: campaign.promotion_tier.updated
            /// </summary>
            [EnumMember(Value = "campaign.promotion_tier.updated")]
            CampaignPromotionTierUpdated = 24,

            /// <summary>
            /// Enum CampaignReferralTierCreated for value: campaign.referral_tier.created
            /// </summary>
            [EnumMember(Value = "campaign.referral_tier.created")]
            CampaignReferralTierCreated = 25,

            /// <summary>
            /// Enum CampaignReferralTierDeleted for value: campaign.referral_tier.deleted
            /// </summary>
            [EnumMember(Value = "campaign.referral_tier.deleted")]
            CampaignReferralTierDeleted = 26,

            /// <summary>
            /// Enum CampaignReferralTierUpdated for value: campaign.referral_tier.updated
            /// </summary>
            [EnumMember(Value = "campaign.referral_tier.updated")]
            CampaignReferralTierUpdated = 27,

            /// <summary>
            /// Enum CampaignRewardAssignmentCreated for value: campaign.reward.assignment.created
            /// </summary>
            [EnumMember(Value = "campaign.reward.assignment.created")]
            CampaignRewardAssignmentCreated = 28,

            /// <summary>
            /// Enum CampaignRewardAssignmentDeleted for value: campaign.reward.assignment.deleted
            /// </summary>
            [EnumMember(Value = "campaign.reward.assignment.deleted")]
            CampaignRewardAssignmentDeleted = 29,

            /// <summary>
            /// Enum CampaignRewardAssignmentUpdated for value: campaign.reward.assignment.updated
            /// </summary>
            [EnumMember(Value = "campaign.reward.assignment.updated")]
            CampaignRewardAssignmentUpdated = 30,

            /// <summary>
            /// Enum CampaignUpdated for value: campaign.updated
            /// </summary>
            [EnumMember(Value = "campaign.updated")]
            CampaignUpdated = 31,

            /// <summary>
            /// Enum CampaignVouchersAded for value: campaign.vouchers.aded
            /// </summary>
            [EnumMember(Value = "campaign.vouchers.aded")]
            CampaignVouchersAded = 32,

            /// <summary>
            /// Enum CampaignVouchersGenerationCompleted for value: campaign.vouchers.generation.completed
            /// </summary>
            [EnumMember(Value = "campaign.vouchers.generation.completed")]
            CampaignVouchersGenerationCompleted = 33,

            /// <summary>
            /// Enum CampaignVouchersGenerationFailed for value: campaign.vouchers.generation.failed
            /// </summary>
            [EnumMember(Value = "campaign.vouchers.generation.failed")]
            CampaignVouchersGenerationFailed = 34,

            /// <summary>
            /// Enum CampaignVouchersGenerationStarted for value: campaign.vouchers.generation.started
            /// </summary>
            [EnumMember(Value = "campaign.vouchers.generation.started")]
            CampaignVouchersGenerationStarted = 35,

            /// <summary>
            /// Enum CustomerConfirmed for value: customer.confirmed
            /// </summary>
            [EnumMember(Value = "customer.confirmed")]
            CustomerConfirmed = 36,

            /// <summary>
            /// Enum CustomerCreated for value: customer.created
            /// </summary>
            [EnumMember(Value = "customer.created")]
            CustomerCreated = 37,

            /// <summary>
            /// Enum CustomerDeleted for value: customer.deleted
            /// </summary>
            [EnumMember(Value = "customer.deleted")]
            CustomerDeleted = 38,

            /// <summary>
            /// Enum CustomerRewarded for value: customer.rewarded
            /// </summary>
            [EnumMember(Value = "customer.rewarded")]
            CustomerRewarded = 39,

            /// <summary>
            /// Enum CustomerRewardedLoyaltyPoints for value: customer.rewarded.loyalty_points
            /// </summary>
            [EnumMember(Value = "customer.rewarded.loyalty_points")]
            CustomerRewardedLoyaltyPoints = 40,

            /// <summary>
            /// Enum PublicationSucceeded for value: publication.succeeded
            /// </summary>
            [EnumMember(Value = "publication.succeeded")]
            PublicationSucceeded = 41,

            /// <summary>
            /// Enum RedemptionFailed for value: redemption.failed
            /// </summary>
            [EnumMember(Value = "redemption.failed")]
            RedemptionFailed = 42,

            /// <summary>
            /// Enum RedemptionRollbackFailed for value: redemption.rollback.failed
            /// </summary>
            [EnumMember(Value = "redemption.rollback.failed")]
            RedemptionRollbackFailed = 43,

            /// <summary>
            /// Enum RedemptionRollbackSucceeded for value: redemption.rollback.succeeded
            /// </summary>
            [EnumMember(Value = "redemption.rollback.succeeded")]
            RedemptionRollbackSucceeded = 44,

            /// <summary>
            /// Enum RedemptionSucceeded for value: redemption.succeeded
            /// </summary>
            [EnumMember(Value = "redemption.succeeded")]
            RedemptionSucceeded = 45,

            /// <summary>
            /// Enum VoucherCreated for value: voucher.created
            /// </summary>
            [EnumMember(Value = "voucher.created")]
            VoucherCreated = 46,

            /// <summary>
            /// Enum VoucherDeleted for value: voucher.deleted
            /// </summary>
            [EnumMember(Value = "voucher.deleted")]
            VoucherDeleted = 47,

            /// <summary>
            /// Enum VoucherDisabled for value: voucher.disabled
            /// </summary>
            [EnumMember(Value = "voucher.disabled")]
            VoucherDisabled = 48,

            /// <summary>
            /// Enum VoucherEnabled for value: voucher.enabled
            /// </summary>
            [EnumMember(Value = "voucher.enabled")]
            VoucherEnabled = 49,

            /// <summary>
            /// Enum VoucherGiftBalanceAded for value: voucher.gift.balance_aded
            /// </summary>
            [EnumMember(Value = "voucher.gift.balance_aded")]
            VoucherGiftBalanceAded = 50,

            /// <summary>
            /// Enum VoucherGiftTransactionCreated for value: voucher.gift.transaction.created
            /// </summary>
            [EnumMember(Value = "voucher.gift.transaction.created")]
            VoucherGiftTransactionCreated = 51,

            /// <summary>
            /// Enum VoucherLoyaltyCardPendingPointsActivated for value: voucher.loyalty_card.pending_points.activated
            /// </summary>
            [EnumMember(Value = "voucher.loyalty_card.pending_points.activated")]
            VoucherLoyaltyCardPendingPointsActivated = 52,

            /// <summary>
            /// Enum VoucherLoyaltyCardPendingPointsAded for value: voucher.loyalty_card.pending_points.aded
            /// </summary>
            [EnumMember(Value = "voucher.loyalty_card.pending_points.aded")]
            VoucherLoyaltyCardPendingPointsAded = 53,

            /// <summary>
            /// Enum VoucherLoyaltyCardPendingPointsCanceled for value: voucher.loyalty_card.pending_points.canceled
            /// </summary>
            [EnumMember(Value = "voucher.loyalty_card.pending_points.canceled")]
            VoucherLoyaltyCardPendingPointsCanceled = 54,

            /// <summary>
            /// Enum VoucherLoyaltyCardPendingPointsUpdated for value: voucher.loyalty_card.pending_points.updated
            /// </summary>
            [EnumMember(Value = "voucher.loyalty_card.pending_points.updated")]
            VoucherLoyaltyCardPendingPointsUpdated = 55,

            /// <summary>
            /// Enum VoucherLoyaltyCardPointsAded for value: voucher.loyalty_card.points_aded
            /// </summary>
            [EnumMember(Value = "voucher.loyalty_card.points_aded")]
            VoucherLoyaltyCardPointsAded = 56,

            /// <summary>
            /// Enum VoucherLoyaltyCardPointsExpired for value: voucher.loyalty_card.points_expired
            /// </summary>
            [EnumMember(Value = "voucher.loyalty_card.points_expired")]
            VoucherLoyaltyCardPointsExpired = 57,

            /// <summary>
            /// Enum VoucherLoyaltyCardTransactionCreated for value: voucher.loyalty_card.transaction.created
            /// </summary>
            [EnumMember(Value = "voucher.loyalty_card.transaction.created")]
            VoucherLoyaltyCardTransactionCreated = 58,

            /// <summary>
            /// Enum VoucherPublished for value: voucher.published
            /// </summary>
            [EnumMember(Value = "voucher.published")]
            VoucherPublished = 59,

            /// <summary>
            /// Enum VoucherUpdated for value: voucher.updated
            /// </summary>
            [EnumMember(Value = "voucher.updated")]
            VoucherUpdated = 60
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsWebhooksUpdateResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the webhook..</param>
        /// <param name="varObject">The type of the object represented by JSON..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the webhook configuration was created. The value for this parameter is shown in the ISO 8601 format..</param>
        /// <param name="targetUrl">URL address that receives webhooks..</param>
        /// <param name="events">Lists the events that trigger webhook sendout..</param>
        /// <param name="active">Determines if the webhook configuration is active..</param>
        public ManagementProjectsWebhooksUpdateResponseBody(string id = default(string), ObjectEnum? varObject = default(ObjectEnum?), DateTimeOffset? createdAt = default(DateTimeOffset?), string targetUrl = default(string), List<EventsEnum> events = default(List<EventsEnum>), bool? active = default(bool?))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._TargetUrl = targetUrl;
            if (this.TargetUrl != null)
            {
                this._flagTargetUrl = true;
            }
            this._Events = events;
            if (this.Events != null)
            {
                this._flagEvents = true;
            }
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
        }

        /// <summary>
        /// Unique identifier of the webhook.
        /// </summary>
        /// <value>Unique identifier of the webhook.</value>
        /*
        <example>wh_i45Uez36Uz8XNW6PXC0eyGmb</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the webhook configuration was created. The value for this parameter is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the webhook configuration was created. The value for this parameter is shown in the ISO 8601 format.</value>
        /*
        <example>2024-01-02T08:31:46.562Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// URL address that receives webhooks.
        /// </summary>
        /// <value>URL address that receives webhooks.</value>
        [DataMember(Name = "target_url", EmitDefaultValue = true)]
        public string TargetUrl
        {
            get{ return _TargetUrl;}
            set
            {
                _TargetUrl = value;
                _flagTargetUrl = true;
            }
        }
        private string _TargetUrl;
        private bool _flagTargetUrl;

        /// <summary>
        /// Returns false as TargetUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTargetUrl()
        {
            return _flagTargetUrl;
        }
        /// <summary>
        /// Lists the events that trigger webhook sendout.
        /// </summary>
        /// <value>Lists the events that trigger webhook sendout.</value>
        [DataMember(Name = "events", EmitDefaultValue = true)]
        public List<ManagementProjectsWebhooksUpdateResponseBody.EventsEnum> Events
        {
            get{ return _Events;}
            set
            {
                _Events = value;
                _flagEvents = true;
            }
        }
        private List<ManagementProjectsWebhooksUpdateResponseBody.EventsEnum> _Events;
        private bool _flagEvents;

        /// <summary>
        /// Returns false as Events should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvents()
        {
            return _flagEvents;
        }
        /// <summary>
        /// Determines if the webhook configuration is active.
        /// </summary>
        /// <value>Determines if the webhook configuration is active.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private bool? _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsWebhooksUpdateResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  TargetUrl: ").Append(TargetUrl).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
