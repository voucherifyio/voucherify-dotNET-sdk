/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the Loyalty Tiers Expiration.
    /// </summary>
    [DataContract(Name = "LoyaltyTiersExpirationAll")]
    public partial class LoyaltyTiersExpirationAll : IValidatableObject
    {
        /// <summary>
        /// Tier qualification.     &#x60;BALANCE&#x60;: Points balance is based on the customer&#39;s current points balance. Customers qualify for the tier if their points balance is in the points range of the tier.   &#x60;POINTS_IN_PERIOD&#x60;: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold.
        /// </summary>
        /// <value>Tier qualification.     &#x60;BALANCE&#x60;: Points balance is based on the customer&#39;s current points balance. Customers qualify for the tier if their points balance is in the points range of the tier.   &#x60;POINTS_IN_PERIOD&#x60;: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualificationTypeEnum
        {
            /// <summary>
            /// Enum BALANCE for value: BALANCE
            /// </summary>
            [EnumMember(Value = "BALANCE")]
            BALANCE = 1,

            /// <summary>
            /// Enum POINTSINPERIOD for value: POINTS_IN_PERIOD
            /// </summary>
            [EnumMember(Value = "POINTS_IN_PERIOD")]
            POINTSINPERIOD = 2
        }


        /// <summary>
        /// Tier qualification.     &#x60;BALANCE&#x60;: Points balance is based on the customer&#39;s current points balance. Customers qualify for the tier if their points balance is in the points range of the tier.   &#x60;POINTS_IN_PERIOD&#x60;: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold.
        /// </summary>
        /// <value>Tier qualification.     &#x60;BALANCE&#x60;: Points balance is based on the customer&#39;s current points balance. Customers qualify for the tier if their points balance is in the points range of the tier.   &#x60;POINTS_IN_PERIOD&#x60;: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold.</value>

        [DataMember(Name = "qualification_type", EmitDefaultValue = true)]
        public QualificationTypeEnum? QualificationType
        {
            get{ return _QualificationType;}
            set
            {
                _QualificationType = value;
                _flagQualificationType = true;
            }
        }
        private QualificationTypeEnum? _QualificationType;
        private bool _flagQualificationType;

        /// <summary>
        /// Returns false as QualificationType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQualificationType()
        {
            return _flagQualificationType;
        }
        /// <summary>
        /// Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.      | **Period** | **Definition** | |:- --|:- --| | **Calendar Month** | Points collected in one calendar month&lt;br&gt;January, February, March, etc. | | **Calendar Quarter** | Points collected in the quarter&lt;br&gt;- January - March&lt;br&gt;- April - June&lt;br&gt;- July - September&lt;br&gt;- October - December | | **Calendar Half-year** | Points collected in the half-year&lt;br&gt;- January - June&lt;br&gt;- July - December | | **Calendar Year** | Points collected in one calendar year&lt;br&gt;January - December |
        /// </summary>
        /// <value>Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.      | **Period** | **Definition** | |:- --|:- --| | **Calendar Month** | Points collected in one calendar month&lt;br&gt;January, February, March, etc. | | **Calendar Quarter** | Points collected in the quarter&lt;br&gt;- January - March&lt;br&gt;- April - June&lt;br&gt;- July - September&lt;br&gt;- October - December | | **Calendar Half-year** | Points collected in the half-year&lt;br&gt;- January - June&lt;br&gt;- July - December | | **Calendar Year** | Points collected in one calendar year&lt;br&gt;January - December |</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum QualificationPeriodEnum
        {
            /// <summary>
            /// Enum MONTH for value: MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTH = 1,

            /// <summary>
            /// Enum QUARTER for value: QUARTER
            /// </summary>
            [EnumMember(Value = "QUARTER")]
            QUARTER = 2,

            /// <summary>
            /// Enum HALFYEAR for value: HALF_YEAR
            /// </summary>
            [EnumMember(Value = "HALF_YEAR")]
            HALFYEAR = 3,

            /// <summary>
            /// Enum YEAR for value: YEAR
            /// </summary>
            [EnumMember(Value = "YEAR")]
            YEAR = 4
        }


        /// <summary>
        /// Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.      | **Period** | **Definition** | |:- --|:- --| | **Calendar Month** | Points collected in one calendar month&lt;br&gt;January, February, March, etc. | | **Calendar Quarter** | Points collected in the quarter&lt;br&gt;- January - March&lt;br&gt;- April - June&lt;br&gt;- July - September&lt;br&gt;- October - December | | **Calendar Half-year** | Points collected in the half-year&lt;br&gt;- January - June&lt;br&gt;- July - December | | **Calendar Year** | Points collected in one calendar year&lt;br&gt;January - December |
        /// </summary>
        /// <value>Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.      | **Period** | **Definition** | |:- --|:- --| | **Calendar Month** | Points collected in one calendar month&lt;br&gt;January, February, March, etc. | | **Calendar Quarter** | Points collected in the quarter&lt;br&gt;- January - March&lt;br&gt;- April - June&lt;br&gt;- July - September&lt;br&gt;- October - December | | **Calendar Half-year** | Points collected in the half-year&lt;br&gt;- January - June&lt;br&gt;- July - December | | **Calendar Year** | Points collected in one calendar year&lt;br&gt;January - December |</value>

        [DataMember(Name = "qualification_period", EmitDefaultValue = true)]
        public QualificationPeriodEnum? QualificationPeriod
        {
            get{ return _QualificationPeriod;}
            set
            {
                _QualificationPeriod = value;
                _flagQualificationPeriod = true;
            }
        }
        private QualificationPeriodEnum? _QualificationPeriod;
        private bool _flagQualificationPeriod;

        /// <summary>
        /// Returns false as QualificationPeriod should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQualificationPeriod()
        {
            return _flagQualificationPeriod;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTiersExpirationAll" /> class.
        /// </summary>
        /// <param name="qualificationType">Tier qualification.     &#x60;BALANCE&#x60;: Points balance is based on the customer&#39;s current points balance. Customers qualify for the tier if their points balance is in the points range of the tier.   &#x60;POINTS_IN_PERIOD&#x60;: A customer qualifies for the tier only if the sum of the accumulated points in a **defined time interval** reaches the tier threshold..</param>
        /// <param name="qualificationPeriod">Customers can qualify for the tier if they collected enough points in a given time period. So, in addition to the customer having to reach a points range, they also need to have collected the points within a set time period.      | **Period** | **Definition** | |:- --|:- --| | **Calendar Month** | Points collected in one calendar month&lt;br&gt;January, February, March, etc. | | **Calendar Quarter** | Points collected in the quarter&lt;br&gt;- January - March&lt;br&gt;- April - June&lt;br&gt;- July - September&lt;br&gt;- October - December | | **Calendar Half-year** | Points collected in the half-year&lt;br&gt;- January - June&lt;br&gt;- July - December | | **Calendar Year** | Points collected in one calendar year&lt;br&gt;January - December |.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="expirationDate">expirationDate.</param>
        public LoyaltyTiersExpirationAll(QualificationTypeEnum? qualificationType = default(QualificationTypeEnum?), QualificationPeriodEnum? qualificationPeriod = default(QualificationPeriodEnum?), LoyaltyTiersExpirationAllStartDate startDate = default(LoyaltyTiersExpirationAllStartDate), LoyaltyTiersExpirationAllExpirationDate expirationDate = default(LoyaltyTiersExpirationAllExpirationDate))
        {
            this._QualificationType = qualificationType;
            if (this.QualificationType != null)
            {
                this._flagQualificationType = true;
            }
            this._QualificationPeriod = qualificationPeriod;
            if (this.QualificationPeriod != null)
            {
                this._flagQualificationPeriod = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
        }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public LoyaltyTiersExpirationAllStartDate StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private LoyaltyTiersExpirationAllStartDate _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public LoyaltyTiersExpirationAllExpirationDate ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private LoyaltyTiersExpirationAllExpirationDate _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyTiersExpirationAll {\n");
            sb.Append("  QualificationType: ").Append(QualificationType).Append("\n");
            sb.Append("  QualificationPeriod: ").Append(QualificationPeriod).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
