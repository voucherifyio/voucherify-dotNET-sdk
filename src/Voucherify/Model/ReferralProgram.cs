/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the referee reward and the way a referral is triggered. Context: &#x60;REFERRAL_PROGRAM&#x60;.
    /// </summary>
    [DataContract(Name = "ReferralProgram")]
    public partial class ReferralProgram : IValidatableObject
    {
        /// <summary>
        /// Define how a referral is triggered.
        /// </summary>
        /// <value>Define how a referral is triggered.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ConversionEventTypeEnum
        {
            /// <summary>
            /// Enum Redemption for value: redemption
            /// </summary>
            [EnumMember(Value = "redemption")]
            Redemption = 1,

            /// <summary>
            /// Enum CustomEvent for value: custom_event
            /// </summary>
            [EnumMember(Value = "custom_event")]
            CustomEvent = 2
        }


        /// <summary>
        /// Define how a referral is triggered.
        /// </summary>
        /// <value>Define how a referral is triggered.</value>

        [DataMember(Name = "conversion_event_type", EmitDefaultValue = true)]
        public ConversionEventTypeEnum? ConversionEventType
        {
            get{ return _ConversionEventType;}
            set
            {
                _ConversionEventType = value;
                _flagConversionEventType = true;
            }
        }
        private ConversionEventTypeEnum? _ConversionEventType;
        private bool _flagConversionEventType;

        /// <summary>
        /// Returns false as ConversionEventType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConversionEventType()
        {
            return _flagConversionEventType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferralProgram" /> class.
        /// </summary>
        /// <param name="conversionEventType">Define how a referral is triggered..</param>
        /// <param name="customEvent">customEvent.</param>
        /// <param name="refereeReward">refereeReward.</param>
        public ReferralProgram(ConversionEventTypeEnum? conversionEventType = default(ConversionEventTypeEnum?), ReferralProgramCustomEvent customEvent = default(ReferralProgramCustomEvent), ReferralProgramRefereeReward refereeReward = default(ReferralProgramRefereeReward))
        {
            this._ConversionEventType = conversionEventType;
            if (this.ConversionEventType != null)
            {
                this._flagConversionEventType = true;
            }
            this._CustomEvent = customEvent;
            if (this.CustomEvent != null)
            {
                this._flagCustomEvent = true;
            }
            this._RefereeReward = refereeReward;
            if (this.RefereeReward != null)
            {
                this._flagRefereeReward = true;
            }
        }

        /// <summary>
        /// Gets or Sets CustomEvent
        /// </summary>
        [DataMember(Name = "custom_event", EmitDefaultValue = true)]
        public ReferralProgramCustomEvent CustomEvent
        {
            get{ return _CustomEvent;}
            set
            {
                _CustomEvent = value;
                _flagCustomEvent = true;
            }
        }
        private ReferralProgramCustomEvent _CustomEvent;
        private bool _flagCustomEvent;

        /// <summary>
        /// Returns false as CustomEvent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomEvent()
        {
            return _flagCustomEvent;
        }
        /// <summary>
        /// Gets or Sets RefereeReward
        /// </summary>
        [DataMember(Name = "referee_reward", EmitDefaultValue = true)]
        public ReferralProgramRefereeReward RefereeReward
        {
            get{ return _RefereeReward;}
            set
            {
                _RefereeReward = value;
                _flagRefereeReward = true;
            }
        }
        private ReferralProgramRefereeReward _RefereeReward;
        private bool _flagRefereeReward;

        /// <summary>
        /// Returns false as RefereeReward should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRefereeReward()
        {
            return _flagRefereeReward;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReferralProgram {\n");
            sb.Append("  ConversionEventType: ").Append(ConversionEventType).Append("\n");
            sb.Append("  CustomEvent: ").Append(CustomEvent).Append("\n");
            sb.Append("  RefereeReward: ").Append(RefereeReward).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
