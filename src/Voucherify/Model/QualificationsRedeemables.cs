/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// List of redeemables for examine qualification.
    /// </summary>
    [DataContract(Name = "QualificationsRedeemables")]
    public partial class QualificationsRedeemables : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by JSON. Default is &#x60;list&#x60;.
        /// </summary>
        /// <value>The type of the object represented by JSON. Default is &#x60;list&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum List for value: list
            /// </summary>
            [EnumMember(Value = "list")]
            List = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. Default is &#x60;list&#x60;.
        /// </summary>
        /// <value>The type of the object represented by JSON. Default is &#x60;list&#x60;.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Identifies the name of the attribute that contains the array of qualified redeemables.
        /// </summary>
        /// <value>Identifies the name of the attribute that contains the array of qualified redeemables.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataRefEnum
        {
            /// <summary>
            /// Enum Data for value: data
            /// </summary>
            [EnumMember(Value = "data")]
            Data = 1
        }


        /// <summary>
        /// Identifies the name of the attribute that contains the array of qualified redeemables.
        /// </summary>
        /// <value>Identifies the name of the attribute that contains the array of qualified redeemables.</value>

        [DataMember(Name = "data_ref", EmitDefaultValue = true)]
        public DataRefEnum? DataRef
        {
            get{ return _DataRef;}
            set
            {
                _DataRef = value;
                _flagDataRef = true;
            }
        }
        private DataRefEnum? _DataRef;
        private bool _flagDataRef;

        /// <summary>
        /// Returns false as DataRef should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDataRef()
        {
            return _flagDataRef;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="QualificationsRedeemables" /> class.
        /// </summary>
        /// <param name="varObject">The type of the object represented by JSON. Default is &#x60;list&#x60;. (default to ObjectEnum.List).</param>
        /// <param name="dataRef">Identifies the name of the attribute that contains the array of qualified redeemables. (default to DataRefEnum.Data).</param>
        /// <param name="data">Array of qualified redeemables..</param>
        /// <param name="total">The number of redeemables returned in the API request..</param>
        /// <param name="hasMore">As results are always limited, the &#x60;has_more&#x60; flag indicates if there are more records for given parameters. This lets you know if you can run another request (with different options) to get more records returned in the results..</param>
        /// <param name="moreStartingAfter">Timestamp representing the date and time to use in &#x60;starting_after&#x60; cursor to get more redeemables..</param>
        public QualificationsRedeemables(ObjectEnum? varObject = ObjectEnum.List, DataRefEnum? dataRef = DataRefEnum.Data, List<QualificationsRedeemable> data = default(List<QualificationsRedeemable>), int? total = default(int?), bool? hasMore = default(bool?), DateTimeOffset? moreStartingAfter = default(DateTimeOffset?))
        {
            this._Data = data;
            if (this.Data != null)
            {
                this._flagData = true;
            }
            this._Total = total;
            if (this.Total != null)
            {
                this._flagTotal = true;
            }
            this._HasMore = hasMore;
            if (this.HasMore != null)
            {
                this._flagHasMore = true;
            }
            this._MoreStartingAfter = moreStartingAfter;
            if (this.MoreStartingAfter != null)
            {
                this._flagMoreStartingAfter = true;
            }
        }

        /// <summary>
        /// Array of qualified redeemables.
        /// </summary>
        /// <value>Array of qualified redeemables.</value>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public List<QualificationsRedeemable> Data
        {
            get{ return _Data;}
            set
            {
                _Data = value;
                _flagData = true;
            }
        }
        private List<QualificationsRedeemable> _Data;
        private bool _flagData;

        /// <summary>
        /// Returns false as Data should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeData()
        {
            return _flagData;
        }
        /// <summary>
        /// The number of redeemables returned in the API request.
        /// </summary>
        /// <value>The number of redeemables returned in the API request.</value>
        /*
        <example>5</example>
        */
        [DataMember(Name = "total", EmitDefaultValue = true)]
        public int? Total
        {
            get{ return _Total;}
            set
            {
                _Total = value;
                _flagTotal = true;
            }
        }
        private int? _Total;
        private bool _flagTotal;

        /// <summary>
        /// Returns false as Total should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotal()
        {
            return _flagTotal;
        }
        /// <summary>
        /// As results are always limited, the &#x60;has_more&#x60; flag indicates if there are more records for given parameters. This lets you know if you can run another request (with different options) to get more records returned in the results.
        /// </summary>
        /// <value>As results are always limited, the &#x60;has_more&#x60; flag indicates if there are more records for given parameters. This lets you know if you can run another request (with different options) to get more records returned in the results.</value>
        [DataMember(Name = "has_more", EmitDefaultValue = true)]
        public bool? HasMore
        {
            get{ return _HasMore;}
            set
            {
                _HasMore = value;
                _flagHasMore = true;
            }
        }
        private bool? _HasMore;
        private bool _flagHasMore;

        /// <summary>
        /// Returns false as HasMore should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasMore()
        {
            return _flagHasMore;
        }
        /// <summary>
        /// Timestamp representing the date and time to use in &#x60;starting_after&#x60; cursor to get more redeemables.
        /// </summary>
        /// <value>Timestamp representing the date and time to use in &#x60;starting_after&#x60; cursor to get more redeemables.</value>
        /*
        <example>2023-10-31T12:13:16.374Z</example>
        */
        [DataMember(Name = "more_starting_after", EmitDefaultValue = true)]
        public DateTimeOffset? MoreStartingAfter
        {
            get{ return _MoreStartingAfter;}
            set
            {
                _MoreStartingAfter = value;
                _flagMoreStartingAfter = true;
            }
        }
        private DateTimeOffset? _MoreStartingAfter;
        private bool _flagMoreStartingAfter;

        /// <summary>
        /// Returns false as MoreStartingAfter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMoreStartingAfter()
        {
            return _flagMoreStartingAfter;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QualificationsRedeemables {\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  DataRef: ").Append(DataRef).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  HasMore: ").Append(HasMore).Append("\n");
            sb.Append("  MoreStartingAfter: ").Append(MoreStartingAfter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
