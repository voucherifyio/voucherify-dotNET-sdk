/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ManagementProjectsMetadataSchemasUpdateRequestBody
    /// </summary>
    [DataContract(Name = "ManagementProjectsMetadataSchemasUpdateRequestBody")]
    public partial class ManagementProjectsMetadataSchemasUpdateRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsMetadataSchemasUpdateRequestBody" /> class.
        /// </summary>
        /// <param name="allowDefinedOnly">Restricts the creation of metadata fields when set to &#x60;true&#x60;. In other words, it indicates whether or not you are allowed to create new metadata definitions; for example, in the campaign manager or publication manager. If it is set to true, then only the defined fields will be available for assigning values. .</param>
        /// <param name="properties">Contains metadata definitions. There can be many properties within this object.  Only the properties sent in the request will be updated. However, if you send a property, all its key-value pairs must be provided - otherwise, they will be overwritten to new values.  You cannot change the &#x60;\&quot;type\&quot;&#x60; property. However, it is required, so you need to add it to the request..</param>
        public ManagementProjectsMetadataSchemasUpdateRequestBody(bool? allowDefinedOnly = default(bool?), Dictionary<string, ManagementProjectsMetadataSchemaDefinition> properties = default(Dictionary<string, ManagementProjectsMetadataSchemaDefinition>))
        {
            this._AllowDefinedOnly = allowDefinedOnly;
            if (this.AllowDefinedOnly != null)
            {
                this._flagAllowDefinedOnly = true;
            }
            this._Properties = properties;
            if (this.Properties != null)
            {
                this._flagProperties = true;
            }
        }

        /// <summary>
        /// Restricts the creation of metadata fields when set to &#x60;true&#x60;. In other words, it indicates whether or not you are allowed to create new metadata definitions; for example, in the campaign manager or publication manager. If it is set to true, then only the defined fields will be available for assigning values. 
        /// </summary>
        /// <value>Restricts the creation of metadata fields when set to &#x60;true&#x60;. In other words, it indicates whether or not you are allowed to create new metadata definitions; for example, in the campaign manager or publication manager. If it is set to true, then only the defined fields will be available for assigning values. </value>
        [DataMember(Name = "allow_defined_only", EmitDefaultValue = true)]
        public bool? AllowDefinedOnly
        {
            get{ return _AllowDefinedOnly;}
            set
            {
                _AllowDefinedOnly = value;
                _flagAllowDefinedOnly = true;
            }
        }
        private bool? _AllowDefinedOnly;
        private bool _flagAllowDefinedOnly;

        /// <summary>
        /// Returns false as AllowDefinedOnly should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAllowDefinedOnly()
        {
            return _flagAllowDefinedOnly;
        }
        /// <summary>
        /// Contains metadata definitions. There can be many properties within this object.  Only the properties sent in the request will be updated. However, if you send a property, all its key-value pairs must be provided - otherwise, they will be overwritten to new values.  You cannot change the &#x60;\&quot;type\&quot;&#x60; property. However, it is required, so you need to add it to the request.
        /// </summary>
        /// <value>Contains metadata definitions. There can be many properties within this object.  Only the properties sent in the request will be updated. However, if you send a property, all its key-value pairs must be provided - otherwise, they will be overwritten to new values.  You cannot change the &#x60;\&quot;type\&quot;&#x60; property. However, it is required, so you need to add it to the request.</value>
        [DataMember(Name = "properties", EmitDefaultValue = true)]
        public Dictionary<string, ManagementProjectsMetadataSchemaDefinition> Properties
        {
            get{ return _Properties;}
            set
            {
                _Properties = value;
                _flagProperties = true;
            }
        }
        private Dictionary<string, ManagementProjectsMetadataSchemaDefinition> _Properties;
        private bool _flagProperties;

        /// <summary>
        /// Returns false as Properties should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperties()
        {
            return _flagProperties;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsMetadataSchemasUpdateRequestBody {\n");
            sb.Append("  AllowDefinedOnly: ").Append(AllowDefinedOnly).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
