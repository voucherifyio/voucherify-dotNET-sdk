/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Details about the user assigned to the project.
    /// </summary>
    [DataContract(Name = "ManagementProjectsUsersUpdateRoleResponseBody")]
    public partial class ManagementProjectsUsersUpdateRoleResponseBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsUsersUpdateRoleResponseBody" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the user who has been assigned to the project..</param>
        /// <param name="login">The login data of the user who has been assigned to the project..</param>
        /// <param name="email">The email address of the user who has been assigned to the project..</param>
        /// <param name="firstName">The first name of the user who has been assigned to the project..</param>
        /// <param name="lastName">The last name of the user who has been assigned to the project..</param>
        /// <param name="projects">Lists key-value pairs, where the key is the project to which the user is assigned. The value is the role assigned in a given project. The predefined Voucherify roles are: &#x60;ADMIN&#x60;, &#x60;USER&#x60;, &#x60;VIEWER&#x60;, &#x60;MERCHANT&#x60;, &#x60;USER_RESTRICTED&#x60; (for the Areas and Stores, an Enterprise feature)..</param>
        /// <param name="isOwner">Determines if the user is the owner for the organization in Voucherify..</param>
        public ManagementProjectsUsersUpdateRoleResponseBody(string id = default(string), string login = default(string), string email = default(string), string firstName = default(string), string lastName = default(string), Dictionary<string, string> projects = default(Dictionary<string, string>), bool? isOwner = default(bool?))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Login = login;
            if (this.Login != null)
            {
                this._flagLogin = true;
            }
            this._Email = email;
            if (this.Email != null)
            {
                this._flagEmail = true;
            }
            this._FirstName = firstName;
            if (this.FirstName != null)
            {
                this._flagFirstName = true;
            }
            this._LastName = lastName;
            if (this.LastName != null)
            {
                this._flagLastName = true;
            }
            this._Projects = projects;
            if (this.Projects != null)
            {
                this._flagProjects = true;
            }
            this._IsOwner = isOwner;
            if (this.IsOwner != null)
            {
                this._flagIsOwner = true;
            }
        }

        /// <summary>
        /// The unique identifier of the user who has been assigned to the project.
        /// </summary>
        /// <value>The unique identifier of the user who has been assigned to the project.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The login data of the user who has been assigned to the project.
        /// </summary>
        /// <value>The login data of the user who has been assigned to the project.</value>
        [DataMember(Name = "login", EmitDefaultValue = true)]
        public string Login
        {
            get{ return _Login;}
            set
            {
                _Login = value;
                _flagLogin = true;
            }
        }
        private string _Login;
        private bool _flagLogin;

        /// <summary>
        /// Returns false as Login should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLogin()
        {
            return _flagLogin;
        }
        /// <summary>
        /// The email address of the user who has been assigned to the project.
        /// </summary>
        /// <value>The email address of the user who has been assigned to the project.</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email
        {
            get{ return _Email;}
            set
            {
                _Email = value;
                _flagEmail = true;
            }
        }
        private string _Email;
        private bool _flagEmail;

        /// <summary>
        /// Returns false as Email should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmail()
        {
            return _flagEmail;
        }
        /// <summary>
        /// The first name of the user who has been assigned to the project.
        /// </summary>
        /// <value>The first name of the user who has been assigned to the project.</value>
        [DataMember(Name = "first_name", EmitDefaultValue = true)]
        public string FirstName
        {
            get{ return _FirstName;}
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }
        private string _FirstName;
        private bool _flagFirstName;

        /// <summary>
        /// Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }
        /// <summary>
        /// The last name of the user who has been assigned to the project.
        /// </summary>
        /// <value>The last name of the user who has been assigned to the project.</value>
        [DataMember(Name = "last_name", EmitDefaultValue = true)]
        public string LastName
        {
            get{ return _LastName;}
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }
        private string _LastName;
        private bool _flagLastName;

        /// <summary>
        /// Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }
        /// <summary>
        /// Lists key-value pairs, where the key is the project to which the user is assigned. The value is the role assigned in a given project. The predefined Voucherify roles are: &#x60;ADMIN&#x60;, &#x60;USER&#x60;, &#x60;VIEWER&#x60;, &#x60;MERCHANT&#x60;, &#x60;USER_RESTRICTED&#x60; (for the Areas and Stores, an Enterprise feature).
        /// </summary>
        /// <value>Lists key-value pairs, where the key is the project to which the user is assigned. The value is the role assigned in a given project. The predefined Voucherify roles are: &#x60;ADMIN&#x60;, &#x60;USER&#x60;, &#x60;VIEWER&#x60;, &#x60;MERCHANT&#x60;, &#x60;USER_RESTRICTED&#x60; (for the Areas and Stores, an Enterprise feature).</value>
        [DataMember(Name = "projects", EmitDefaultValue = true)]
        public Dictionary<string, string> Projects
        {
            get{ return _Projects;}
            set
            {
                _Projects = value;
                _flagProjects = true;
            }
        }
        private Dictionary<string, string> _Projects;
        private bool _flagProjects;

        /// <summary>
        /// Returns false as Projects should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProjects()
        {
            return _flagProjects;
        }
        /// <summary>
        /// Determines if the user is the owner for the organization in Voucherify.
        /// </summary>
        /// <value>Determines if the user is the owner for the organization in Voucherify.</value>
        [DataMember(Name = "is_owner", EmitDefaultValue = true)]
        public bool? IsOwner
        {
            get{ return _IsOwner;}
            set
            {
                _IsOwner = value;
                _flagIsOwner = true;
            }
        }
        private bool? _IsOwner;
        private bool _flagIsOwner;

        /// <summary>
        /// Returns false as IsOwner should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsOwner()
        {
            return _flagIsOwner;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsUsersUpdateRoleResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  IsOwner: ").Append(IsOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
