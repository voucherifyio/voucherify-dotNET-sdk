/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// FiltersCondition
    /// </summary>
    [DataContract(Name = "FiltersCondition")]
    public partial class FiltersCondition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersCondition" /> class.
        /// </summary>
        /// <param name="varIn">varIn.</param>
        /// <param name="notIn">notIn.</param>
        /// <param name="varIs">varIs.</param>
        /// <param name="isDaysAgo">isDaysAgo.</param>
        /// <param name="isDaysInFuture">isDaysInFuture.</param>
        /// <param name="isNot">isNot.</param>
        /// <param name="hasValue">hasValue.</param>
        /// <param name="isUnknown">isUnknown.</param>
        /// <param name="contains">contains.</param>
        /// <param name="notContain">notContain.</param>
        /// <param name="startsWith">startsWith.</param>
        /// <param name="endsWith">endsWith.</param>
        /// <param name="moreThan">moreThan.</param>
        /// <param name="lessThan">lessThan.</param>
        /// <param name="moreThanAgo">moreThanAgo.</param>
        /// <param name="lessThanAgo">lessThanAgo.</param>
        /// <param name="moreThanFuture">moreThanFuture.</param>
        /// <param name="lessThanFuture">lessThanFuture.</param>
        /// <param name="moreThanEqual">moreThanEqual.</param>
        /// <param name="lessThanEqual">lessThanEqual.</param>
        /// <param name="after">after.</param>
        /// <param name="before">before.</param>
        /// <param name="count">count.</param>
        /// <param name="countLess">countLess.</param>
        /// <param name="countMore">countMore.</param>
        public FiltersCondition(Object varIn = default(Object), Object notIn = default(Object), Object varIs = default(Object), Object isDaysAgo = default(Object), Object isDaysInFuture = default(Object), Object isNot = default(Object), Object hasValue = default(Object), Object isUnknown = default(Object), Object contains = default(Object), Object notContain = default(Object), Object startsWith = default(Object), Object endsWith = default(Object), Object moreThan = default(Object), Object lessThan = default(Object), Object moreThanAgo = default(Object), Object lessThanAgo = default(Object), Object moreThanFuture = default(Object), Object lessThanFuture = default(Object), Object moreThanEqual = default(Object), Object lessThanEqual = default(Object), Object after = default(Object), Object before = default(Object), Object count = default(Object), Object countLess = default(Object), Object countMore = default(Object))
        {
            this._In = varIn;
            if (this.In != null)
            {
                this._flagIn = true;
            }
            this._NotIn = notIn;
            if (this.NotIn != null)
            {
                this._flagNotIn = true;
            }
            this._Is = varIs;
            if (this.Is != null)
            {
                this._flagIs = true;
            }
            this._IsDaysAgo = isDaysAgo;
            if (this.IsDaysAgo != null)
            {
                this._flagIsDaysAgo = true;
            }
            this._IsDaysInFuture = isDaysInFuture;
            if (this.IsDaysInFuture != null)
            {
                this._flagIsDaysInFuture = true;
            }
            this._IsNot = isNot;
            if (this.IsNot != null)
            {
                this._flagIsNot = true;
            }
            this._HasValue = hasValue;
            if (this.HasValue != null)
            {
                this._flagHasValue = true;
            }
            this._IsUnknown = isUnknown;
            if (this.IsUnknown != null)
            {
                this._flagIsUnknown = true;
            }
            this._Contains = contains;
            if (this.Contains != null)
            {
                this._flagContains = true;
            }
            this._NotContain = notContain;
            if (this.NotContain != null)
            {
                this._flagNotContain = true;
            }
            this._StartsWith = startsWith;
            if (this.StartsWith != null)
            {
                this._flagStartsWith = true;
            }
            this._EndsWith = endsWith;
            if (this.EndsWith != null)
            {
                this._flagEndsWith = true;
            }
            this._MoreThan = moreThan;
            if (this.MoreThan != null)
            {
                this._flagMoreThan = true;
            }
            this._LessThan = lessThan;
            if (this.LessThan != null)
            {
                this._flagLessThan = true;
            }
            this._MoreThanAgo = moreThanAgo;
            if (this.MoreThanAgo != null)
            {
                this._flagMoreThanAgo = true;
            }
            this._LessThanAgo = lessThanAgo;
            if (this.LessThanAgo != null)
            {
                this._flagLessThanAgo = true;
            }
            this._MoreThanFuture = moreThanFuture;
            if (this.MoreThanFuture != null)
            {
                this._flagMoreThanFuture = true;
            }
            this._LessThanFuture = lessThanFuture;
            if (this.LessThanFuture != null)
            {
                this._flagLessThanFuture = true;
            }
            this._MoreThanEqual = moreThanEqual;
            if (this.MoreThanEqual != null)
            {
                this._flagMoreThanEqual = true;
            }
            this._LessThanEqual = lessThanEqual;
            if (this.LessThanEqual != null)
            {
                this._flagLessThanEqual = true;
            }
            this._After = after;
            if (this.After != null)
            {
                this._flagAfter = true;
            }
            this._Before = before;
            if (this.Before != null)
            {
                this._flagBefore = true;
            }
            this._Count = count;
            if (this.Count != null)
            {
                this._flagCount = true;
            }
            this._CountLess = countLess;
            if (this.CountLess != null)
            {
                this._flagCountLess = true;
            }
            this._CountMore = countMore;
            if (this.CountMore != null)
            {
                this._flagCountMore = true;
            }
        }

        /// <summary>
        /// Gets or Sets In
        /// </summary>
        [DataMember(Name = "$in", EmitDefaultValue = true)]
        public Object In
        {
            get{ return _In;}
            set
            {
                _In = value;
                _flagIn = true;
            }
        }
        private Object _In;
        private bool _flagIn;

        /// <summary>
        /// Returns false as In should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIn()
        {
            return _flagIn;
        }
        /// <summary>
        /// Gets or Sets NotIn
        /// </summary>
        [DataMember(Name = "$not_in", EmitDefaultValue = true)]
        public Object NotIn
        {
            get{ return _NotIn;}
            set
            {
                _NotIn = value;
                _flagNotIn = true;
            }
        }
        private Object _NotIn;
        private bool _flagNotIn;

        /// <summary>
        /// Returns false as NotIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotIn()
        {
            return _flagNotIn;
        }
        /// <summary>
        /// Gets or Sets Is
        /// </summary>
        [DataMember(Name = "$is", EmitDefaultValue = true)]
        public Object Is
        {
            get{ return _Is;}
            set
            {
                _Is = value;
                _flagIs = true;
            }
        }
        private Object _Is;
        private bool _flagIs;

        /// <summary>
        /// Returns false as Is should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIs()
        {
            return _flagIs;
        }
        /// <summary>
        /// Gets or Sets IsDaysAgo
        /// </summary>
        [DataMember(Name = "$is_days_ago", EmitDefaultValue = true)]
        public Object IsDaysAgo
        {
            get{ return _IsDaysAgo;}
            set
            {
                _IsDaysAgo = value;
                _flagIsDaysAgo = true;
            }
        }
        private Object _IsDaysAgo;
        private bool _flagIsDaysAgo;

        /// <summary>
        /// Returns false as IsDaysAgo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDaysAgo()
        {
            return _flagIsDaysAgo;
        }
        /// <summary>
        /// Gets or Sets IsDaysInFuture
        /// </summary>
        [DataMember(Name = "$is_days_in_future", EmitDefaultValue = true)]
        public Object IsDaysInFuture
        {
            get{ return _IsDaysInFuture;}
            set
            {
                _IsDaysInFuture = value;
                _flagIsDaysInFuture = true;
            }
        }
        private Object _IsDaysInFuture;
        private bool _flagIsDaysInFuture;

        /// <summary>
        /// Returns false as IsDaysInFuture should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsDaysInFuture()
        {
            return _flagIsDaysInFuture;
        }
        /// <summary>
        /// Gets or Sets IsNot
        /// </summary>
        [DataMember(Name = "$is_not", EmitDefaultValue = true)]
        public Object IsNot
        {
            get{ return _IsNot;}
            set
            {
                _IsNot = value;
                _flagIsNot = true;
            }
        }
        private Object _IsNot;
        private bool _flagIsNot;

        /// <summary>
        /// Returns false as IsNot should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsNot()
        {
            return _flagIsNot;
        }
        /// <summary>
        /// Gets or Sets HasValue
        /// </summary>
        [DataMember(Name = "$has_value", EmitDefaultValue = true)]
        public Object HasValue
        {
            get{ return _HasValue;}
            set
            {
                _HasValue = value;
                _flagHasValue = true;
            }
        }
        private Object _HasValue;
        private bool _flagHasValue;

        /// <summary>
        /// Returns false as HasValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHasValue()
        {
            return _flagHasValue;
        }
        /// <summary>
        /// Gets or Sets IsUnknown
        /// </summary>
        [DataMember(Name = "$is_unknown", EmitDefaultValue = true)]
        public Object IsUnknown
        {
            get{ return _IsUnknown;}
            set
            {
                _IsUnknown = value;
                _flagIsUnknown = true;
            }
        }
        private Object _IsUnknown;
        private bool _flagIsUnknown;

        /// <summary>
        /// Returns false as IsUnknown should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsUnknown()
        {
            return _flagIsUnknown;
        }
        /// <summary>
        /// Gets or Sets Contains
        /// </summary>
        [DataMember(Name = "$contains", EmitDefaultValue = true)]
        public Object Contains
        {
            get{ return _Contains;}
            set
            {
                _Contains = value;
                _flagContains = true;
            }
        }
        private Object _Contains;
        private bool _flagContains;

        /// <summary>
        /// Returns false as Contains should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContains()
        {
            return _flagContains;
        }
        /// <summary>
        /// Gets or Sets NotContain
        /// </summary>
        [DataMember(Name = "$not_contain", EmitDefaultValue = true)]
        public Object NotContain
        {
            get{ return _NotContain;}
            set
            {
                _NotContain = value;
                _flagNotContain = true;
            }
        }
        private Object _NotContain;
        private bool _flagNotContain;

        /// <summary>
        /// Returns false as NotContain should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNotContain()
        {
            return _flagNotContain;
        }
        /// <summary>
        /// Gets or Sets StartsWith
        /// </summary>
        [DataMember(Name = "$starts_with", EmitDefaultValue = true)]
        public Object StartsWith
        {
            get{ return _StartsWith;}
            set
            {
                _StartsWith = value;
                _flagStartsWith = true;
            }
        }
        private Object _StartsWith;
        private bool _flagStartsWith;

        /// <summary>
        /// Returns false as StartsWith should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartsWith()
        {
            return _flagStartsWith;
        }
        /// <summary>
        /// Gets or Sets EndsWith
        /// </summary>
        [DataMember(Name = "$ends_with", EmitDefaultValue = true)]
        public Object EndsWith
        {
            get{ return _EndsWith;}
            set
            {
                _EndsWith = value;
                _flagEndsWith = true;
            }
        }
        private Object _EndsWith;
        private bool _flagEndsWith;

        /// <summary>
        /// Returns false as EndsWith should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndsWith()
        {
            return _flagEndsWith;
        }
        /// <summary>
        /// Gets or Sets MoreThan
        /// </summary>
        [DataMember(Name = "$more_than", EmitDefaultValue = true)]
        public Object MoreThan
        {
            get{ return _MoreThan;}
            set
            {
                _MoreThan = value;
                _flagMoreThan = true;
            }
        }
        private Object _MoreThan;
        private bool _flagMoreThan;

        /// <summary>
        /// Returns false as MoreThan should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMoreThan()
        {
            return _flagMoreThan;
        }
        /// <summary>
        /// Gets or Sets LessThan
        /// </summary>
        [DataMember(Name = "$less_than", EmitDefaultValue = true)]
        public Object LessThan
        {
            get{ return _LessThan;}
            set
            {
                _LessThan = value;
                _flagLessThan = true;
            }
        }
        private Object _LessThan;
        private bool _flagLessThan;

        /// <summary>
        /// Returns false as LessThan should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLessThan()
        {
            return _flagLessThan;
        }
        /// <summary>
        /// Gets or Sets MoreThanAgo
        /// </summary>
        [DataMember(Name = "$more_than_ago", EmitDefaultValue = true)]
        public Object MoreThanAgo
        {
            get{ return _MoreThanAgo;}
            set
            {
                _MoreThanAgo = value;
                _flagMoreThanAgo = true;
            }
        }
        private Object _MoreThanAgo;
        private bool _flagMoreThanAgo;

        /// <summary>
        /// Returns false as MoreThanAgo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMoreThanAgo()
        {
            return _flagMoreThanAgo;
        }
        /// <summary>
        /// Gets or Sets LessThanAgo
        /// </summary>
        [DataMember(Name = "$less_than_ago", EmitDefaultValue = true)]
        public Object LessThanAgo
        {
            get{ return _LessThanAgo;}
            set
            {
                _LessThanAgo = value;
                _flagLessThanAgo = true;
            }
        }
        private Object _LessThanAgo;
        private bool _flagLessThanAgo;

        /// <summary>
        /// Returns false as LessThanAgo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLessThanAgo()
        {
            return _flagLessThanAgo;
        }
        /// <summary>
        /// Gets or Sets MoreThanFuture
        /// </summary>
        [DataMember(Name = "$more_than_future", EmitDefaultValue = true)]
        public Object MoreThanFuture
        {
            get{ return _MoreThanFuture;}
            set
            {
                _MoreThanFuture = value;
                _flagMoreThanFuture = true;
            }
        }
        private Object _MoreThanFuture;
        private bool _flagMoreThanFuture;

        /// <summary>
        /// Returns false as MoreThanFuture should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMoreThanFuture()
        {
            return _flagMoreThanFuture;
        }
        /// <summary>
        /// Gets or Sets LessThanFuture
        /// </summary>
        [DataMember(Name = "$less_than_future", EmitDefaultValue = true)]
        public Object LessThanFuture
        {
            get{ return _LessThanFuture;}
            set
            {
                _LessThanFuture = value;
                _flagLessThanFuture = true;
            }
        }
        private Object _LessThanFuture;
        private bool _flagLessThanFuture;

        /// <summary>
        /// Returns false as LessThanFuture should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLessThanFuture()
        {
            return _flagLessThanFuture;
        }
        /// <summary>
        /// Gets or Sets MoreThanEqual
        /// </summary>
        [DataMember(Name = "$more_than_equal", EmitDefaultValue = true)]
        public Object MoreThanEqual
        {
            get{ return _MoreThanEqual;}
            set
            {
                _MoreThanEqual = value;
                _flagMoreThanEqual = true;
            }
        }
        private Object _MoreThanEqual;
        private bool _flagMoreThanEqual;

        /// <summary>
        /// Returns false as MoreThanEqual should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMoreThanEqual()
        {
            return _flagMoreThanEqual;
        }
        /// <summary>
        /// Gets or Sets LessThanEqual
        /// </summary>
        [DataMember(Name = "$less_than_equal", EmitDefaultValue = true)]
        public Object LessThanEqual
        {
            get{ return _LessThanEqual;}
            set
            {
                _LessThanEqual = value;
                _flagLessThanEqual = true;
            }
        }
        private Object _LessThanEqual;
        private bool _flagLessThanEqual;

        /// <summary>
        /// Returns false as LessThanEqual should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLessThanEqual()
        {
            return _flagLessThanEqual;
        }
        /// <summary>
        /// Gets or Sets After
        /// </summary>
        [DataMember(Name = "$after", EmitDefaultValue = true)]
        public Object After
        {
            get{ return _After;}
            set
            {
                _After = value;
                _flagAfter = true;
            }
        }
        private Object _After;
        private bool _flagAfter;

        /// <summary>
        /// Returns false as After should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAfter()
        {
            return _flagAfter;
        }
        /// <summary>
        /// Gets or Sets Before
        /// </summary>
        [DataMember(Name = "$before", EmitDefaultValue = true)]
        public Object Before
        {
            get{ return _Before;}
            set
            {
                _Before = value;
                _flagBefore = true;
            }
        }
        private Object _Before;
        private bool _flagBefore;

        /// <summary>
        /// Returns false as Before should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBefore()
        {
            return _flagBefore;
        }
        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "$count", EmitDefaultValue = true)]
        public Object Count
        {
            get{ return _Count;}
            set
            {
                _Count = value;
                _flagCount = true;
            }
        }
        private Object _Count;
        private bool _flagCount;

        /// <summary>
        /// Returns false as Count should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCount()
        {
            return _flagCount;
        }
        /// <summary>
        /// Gets or Sets CountLess
        /// </summary>
        [DataMember(Name = "$count_less", EmitDefaultValue = true)]
        public Object CountLess
        {
            get{ return _CountLess;}
            set
            {
                _CountLess = value;
                _flagCountLess = true;
            }
        }
        private Object _CountLess;
        private bool _flagCountLess;

        /// <summary>
        /// Returns false as CountLess should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountLess()
        {
            return _flagCountLess;
        }
        /// <summary>
        /// Gets or Sets CountMore
        /// </summary>
        [DataMember(Name = "$count_more", EmitDefaultValue = true)]
        public Object CountMore
        {
            get{ return _CountMore;}
            set
            {
                _CountMore = value;
                _flagCountMore = true;
            }
        }
        private Object _CountMore;
        private bool _flagCountMore;

        /// <summary>
        /// Returns false as CountMore should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountMore()
        {
            return _flagCountMore;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FiltersCondition {\n");
            sb.Append("  In: ").Append(In).Append("\n");
            sb.Append("  NotIn: ").Append(NotIn).Append("\n");
            sb.Append("  Is: ").Append(Is).Append("\n");
            sb.Append("  IsDaysAgo: ").Append(IsDaysAgo).Append("\n");
            sb.Append("  IsDaysInFuture: ").Append(IsDaysInFuture).Append("\n");
            sb.Append("  IsNot: ").Append(IsNot).Append("\n");
            sb.Append("  HasValue: ").Append(HasValue).Append("\n");
            sb.Append("  IsUnknown: ").Append(IsUnknown).Append("\n");
            sb.Append("  Contains: ").Append(Contains).Append("\n");
            sb.Append("  NotContain: ").Append(NotContain).Append("\n");
            sb.Append("  StartsWith: ").Append(StartsWith).Append("\n");
            sb.Append("  EndsWith: ").Append(EndsWith).Append("\n");
            sb.Append("  MoreThan: ").Append(MoreThan).Append("\n");
            sb.Append("  LessThan: ").Append(LessThan).Append("\n");
            sb.Append("  MoreThanAgo: ").Append(MoreThanAgo).Append("\n");
            sb.Append("  LessThanAgo: ").Append(LessThanAgo).Append("\n");
            sb.Append("  MoreThanFuture: ").Append(MoreThanFuture).Append("\n");
            sb.Append("  LessThanFuture: ").Append(LessThanFuture).Append("\n");
            sb.Append("  MoreThanEqual: ").Append(MoreThanEqual).Append("\n");
            sb.Append("  LessThanEqual: ").Append(LessThanEqual).Append("\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CountLess: ").Append(CountLess).Append("\n");
            sb.Append("  CountMore: ").Append(CountMore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
