/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Custom definition name. This is also shown in **Project Settings** &gt; **Metadata Schema** in the Voucherify Dashboard.
    /// </summary>
    [DataContract(Name = "ManagementProjectsMetadataSchemaDefinition")]
    public partial class ManagementProjectsMetadataSchemaDefinition : IValidatableObject
    {
        /// <summary>
        /// Indicates the type of metadata. Note that &#x60;\&quot;geopoint\&quot;&#x60; type is a paid feature.
        /// </summary>
        /// <value>Indicates the type of metadata. Note that &#x60;\&quot;geopoint\&quot;&#x60; type is a paid feature.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum String for value: string
            /// </summary>
            [EnumMember(Value = "string")]
            String = 1,

            /// <summary>
            /// Enum Number for value: number
            /// </summary>
            [EnumMember(Value = "number")]
            Number = 2,

            /// <summary>
            /// Enum Object for value: object
            /// </summary>
            [EnumMember(Value = "object")]
            Object = 3,

            /// <summary>
            /// Enum Date for value: date
            /// </summary>
            [EnumMember(Value = "date")]
            Date = 4,

            /// <summary>
            /// Enum Datetime for value: datetime
            /// </summary>
            [EnumMember(Value = "datetime")]
            Datetime = 5,

            /// <summary>
            /// Enum Geopoint for value: geopoint
            /// </summary>
            [EnumMember(Value = "geopoint")]
            Geopoint = 6,

            /// <summary>
            /// Enum Boolean for value: boolean
            /// </summary>
            [EnumMember(Value = "boolean")]
            Boolean = 7,

            /// <summary>
            /// Enum ImageUrl for value: image_url
            /// </summary>
            [EnumMember(Value = "image_url")]
            ImageUrl = 8
        }


        /// <summary>
        /// Indicates the type of metadata. Note that &#x60;\&quot;geopoint\&quot;&#x60; type is a paid feature.
        /// </summary>
        /// <value>Indicates the type of metadata. Note that &#x60;\&quot;geopoint\&quot;&#x60; type is a paid feature.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsMetadataSchemaDefinition" /> class.
        /// </summary>
        /// <param name="type">Indicates the type of metadata. Note that &#x60;\&quot;geopoint\&quot;&#x60; type is a paid feature..</param>
        /// <param name="optional">Indicates if this definition is optional or not for the resource..</param>
        /// <param name="array">Indicates if the definition is an array..</param>
        /// <param name="deleted">Indicates if the definition has been deleted from the schema..</param>
        /// <param name="objectType">The name of the custom resource (i.e. a nested object) if the resource has been previously defined. Otherwise, it is &#x60;null&#x60; for other types..</param>
        /// <param name="minLength">Value indicating the minimum length. Available only for the &#x60;string&#x60; type..</param>
        /// <param name="maxLength">Value indicating the maximum length. Available only for the &#x60;string&#x60; type..</param>
        /// <param name="exactLength">Value indicating the exact length. Available only for the &#x60;string&#x60; type..</param>
        /// <param name="eq">eq.</param>
        /// <param name="ne">Array of values that are not allowed. Available only for the &#x60;number&#x60; type..</param>
        /// <param name="lt">A property of the &#x60;number&#x60; type must have &#x60;less than&#x60; this value. The value should be up to two decimal places..</param>
        /// <param name="lte">A property of the &#x60;number&#x60; type must be &#x60;less than or equal&#x60; to this value. The value should be up to two decimal places..</param>
        /// <param name="gt">A property of &#x60;number&#x60; type must be &#x60;greater than&#x60; this value. The value should be up to two decimal places..</param>
        /// <param name="gte">A property of &#x60;number&#x60; type must be &#x60;greater than or equal&#x60; to this value. The value should be up to two decimal places..</param>
        public ManagementProjectsMetadataSchemaDefinition(TypeEnum? type = default(TypeEnum?), bool? optional = default(bool?), bool? array = default(bool?), bool? deleted = default(bool?), string objectType = default(string), int? minLength = default(int?), int? maxLength = default(int?), int? exactLength = default(int?), List<Object> eq = default(List<Object>), List<decimal> ne = default(List<decimal>), decimal? lt = default(decimal?), decimal? lte = default(decimal?), decimal? gt = default(decimal?), decimal? gte = default(decimal?))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Optional = optional;
            if (this.Optional != null)
            {
                this._flagOptional = true;
            }
            this._Array = array;
            if (this.Array != null)
            {
                this._flagArray = true;
            }
            this._Deleted = deleted;
            if (this.Deleted != null)
            {
                this._flagDeleted = true;
            }
            this._ObjectType = objectType;
            if (this.ObjectType != null)
            {
                this._flagObjectType = true;
            }
            this._MinLength = minLength;
            if (this.MinLength != null)
            {
                this._flagMinLength = true;
            }
            this._MaxLength = maxLength;
            if (this.MaxLength != null)
            {
                this._flagMaxLength = true;
            }
            this._ExactLength = exactLength;
            if (this.ExactLength != null)
            {
                this._flagExactLength = true;
            }
            this._Eq = eq;
            if (this.Eq != null)
            {
                this._flagEq = true;
            }
            this._Ne = ne;
            if (this.Ne != null)
            {
                this._flagNe = true;
            }
            this._Lt = lt;
            if (this.Lt != null)
            {
                this._flagLt = true;
            }
            this._Lte = lte;
            if (this.Lte != null)
            {
                this._flagLte = true;
            }
            this._Gt = gt;
            if (this.Gt != null)
            {
                this._flagGt = true;
            }
            this._Gte = gte;
            if (this.Gte != null)
            {
                this._flagGte = true;
            }
        }

        /// <summary>
        /// Indicates if this definition is optional or not for the resource.
        /// </summary>
        /// <value>Indicates if this definition is optional or not for the resource.</value>
        [DataMember(Name = "optional", EmitDefaultValue = true)]
        public bool? Optional
        {
            get{ return _Optional;}
            set
            {
                _Optional = value;
                _flagOptional = true;
            }
        }
        private bool? _Optional;
        private bool _flagOptional;

        /// <summary>
        /// Returns false as Optional should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptional()
        {
            return _flagOptional;
        }
        /// <summary>
        /// Indicates if the definition is an array.
        /// </summary>
        /// <value>Indicates if the definition is an array.</value>
        [DataMember(Name = "array", EmitDefaultValue = true)]
        public bool? Array
        {
            get{ return _Array;}
            set
            {
                _Array = value;
                _flagArray = true;
            }
        }
        private bool? _Array;
        private bool _flagArray;

        /// <summary>
        /// Returns false as Array should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeArray()
        {
            return _flagArray;
        }
        /// <summary>
        /// Indicates if the definition has been deleted from the schema.
        /// </summary>
        /// <value>Indicates if the definition has been deleted from the schema.</value>
        [DataMember(Name = "deleted", EmitDefaultValue = true)]
        public bool? Deleted
        {
            get{ return _Deleted;}
            set
            {
                _Deleted = value;
                _flagDeleted = true;
            }
        }
        private bool? _Deleted;
        private bool _flagDeleted;

        /// <summary>
        /// Returns false as Deleted should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeleted()
        {
            return _flagDeleted;
        }
        /// <summary>
        /// The name of the custom resource (i.e. a nested object) if the resource has been previously defined. Otherwise, it is &#x60;null&#x60; for other types.
        /// </summary>
        /// <value>The name of the custom resource (i.e. a nested object) if the resource has been previously defined. Otherwise, it is &#x60;null&#x60; for other types.</value>
        [DataMember(Name = "object_type", EmitDefaultValue = true)]
        public string ObjectType
        {
            get{ return _ObjectType;}
            set
            {
                _ObjectType = value;
                _flagObjectType = true;
            }
        }
        private string _ObjectType;
        private bool _flagObjectType;

        /// <summary>
        /// Returns false as ObjectType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObjectType()
        {
            return _flagObjectType;
        }
        /// <summary>
        /// Value indicating the minimum length. Available only for the &#x60;string&#x60; type.
        /// </summary>
        /// <value>Value indicating the minimum length. Available only for the &#x60;string&#x60; type.</value>
        [DataMember(Name = "min_length", EmitDefaultValue = true)]
        public int? MinLength
        {
            get{ return _MinLength;}
            set
            {
                _MinLength = value;
                _flagMinLength = true;
            }
        }
        private int? _MinLength;
        private bool _flagMinLength;

        /// <summary>
        /// Returns false as MinLength should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMinLength()
        {
            return _flagMinLength;
        }
        /// <summary>
        /// Value indicating the maximum length. Available only for the &#x60;string&#x60; type.
        /// </summary>
        /// <value>Value indicating the maximum length. Available only for the &#x60;string&#x60; type.</value>
        [DataMember(Name = "max_length", EmitDefaultValue = true)]
        public int? MaxLength
        {
            get{ return _MaxLength;}
            set
            {
                _MaxLength = value;
                _flagMaxLength = true;
            }
        }
        private int? _MaxLength;
        private bool _flagMaxLength;

        /// <summary>
        /// Returns false as MaxLength should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMaxLength()
        {
            return _flagMaxLength;
        }
        /// <summary>
        /// Value indicating the exact length. Available only for the &#x60;string&#x60; type.
        /// </summary>
        /// <value>Value indicating the exact length. Available only for the &#x60;string&#x60; type.</value>
        [DataMember(Name = "exact_length", EmitDefaultValue = true)]
        public int? ExactLength
        {
            get{ return _ExactLength;}
            set
            {
                _ExactLength = value;
                _flagExactLength = true;
            }
        }
        private int? _ExactLength;
        private bool _flagExactLength;

        /// <summary>
        /// Returns false as ExactLength should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExactLength()
        {
            return _flagExactLength;
        }
        /// <summary>
        /// Gets or Sets Eq
        /// </summary>
        [DataMember(Name = "eq", EmitDefaultValue = true)]
        public List<Object> Eq
        {
            get{ return _Eq;}
            set
            {
                _Eq = value;
                _flagEq = true;
            }
        }
        private List<Object> _Eq;
        private bool _flagEq;

        /// <summary>
        /// Returns false as Eq should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEq()
        {
            return _flagEq;
        }
        /// <summary>
        /// Array of values that are not allowed. Available only for the &#x60;number&#x60; type.
        /// </summary>
        /// <value>Array of values that are not allowed. Available only for the &#x60;number&#x60; type.</value>
        [DataMember(Name = "ne", EmitDefaultValue = true)]
        public List<decimal> Ne
        {
            get{ return _Ne;}
            set
            {
                _Ne = value;
                _flagNe = true;
            }
        }
        private List<decimal> _Ne;
        private bool _flagNe;

        /// <summary>
        /// Returns false as Ne should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNe()
        {
            return _flagNe;
        }
        /// <summary>
        /// A property of the &#x60;number&#x60; type must have &#x60;less than&#x60; this value. The value should be up to two decimal places.
        /// </summary>
        /// <value>A property of the &#x60;number&#x60; type must have &#x60;less than&#x60; this value. The value should be up to two decimal places.</value>
        [DataMember(Name = "lt", EmitDefaultValue = true)]
        public decimal? Lt
        {
            get{ return _Lt;}
            set
            {
                _Lt = value;
                _flagLt = true;
            }
        }
        private decimal? _Lt;
        private bool _flagLt;

        /// <summary>
        /// Returns false as Lt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLt()
        {
            return _flagLt;
        }
        /// <summary>
        /// A property of the &#x60;number&#x60; type must be &#x60;less than or equal&#x60; to this value. The value should be up to two decimal places.
        /// </summary>
        /// <value>A property of the &#x60;number&#x60; type must be &#x60;less than or equal&#x60; to this value. The value should be up to two decimal places.</value>
        [DataMember(Name = "lte", EmitDefaultValue = true)]
        public decimal? Lte
        {
            get{ return _Lte;}
            set
            {
                _Lte = value;
                _flagLte = true;
            }
        }
        private decimal? _Lte;
        private bool _flagLte;

        /// <summary>
        /// Returns false as Lte should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLte()
        {
            return _flagLte;
        }
        /// <summary>
        /// A property of &#x60;number&#x60; type must be &#x60;greater than&#x60; this value. The value should be up to two decimal places.
        /// </summary>
        /// <value>A property of &#x60;number&#x60; type must be &#x60;greater than&#x60; this value. The value should be up to two decimal places.</value>
        [DataMember(Name = "gt", EmitDefaultValue = true)]
        public decimal? Gt
        {
            get{ return _Gt;}
            set
            {
                _Gt = value;
                _flagGt = true;
            }
        }
        private decimal? _Gt;
        private bool _flagGt;

        /// <summary>
        /// Returns false as Gt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGt()
        {
            return _flagGt;
        }
        /// <summary>
        /// A property of &#x60;number&#x60; type must be &#x60;greater than or equal&#x60; to this value. The value should be up to two decimal places.
        /// </summary>
        /// <value>A property of &#x60;number&#x60; type must be &#x60;greater than or equal&#x60; to this value. The value should be up to two decimal places.</value>
        [DataMember(Name = "gte", EmitDefaultValue = true)]
        public decimal? Gte
        {
            get{ return _Gte;}
            set
            {
                _Gte = value;
                _flagGte = true;
            }
        }
        private decimal? _Gte;
        private bool _flagGte;

        /// <summary>
        /// Returns false as Gte should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGte()
        {
            return _flagGte;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsMetadataSchemaDefinition {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  Array: ").Append(Array).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  ExactLength: ").Append(ExactLength).Append("\n");
            sb.Append("  Eq: ").Append(Eq).Append("\n");
            sb.Append("  Ne: ").Append(Ne).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("  Lte: ").Append(Lte).Append("\n");
            sb.Append("  Gt: ").Append(Gt).Append("\n");
            sb.Append("  Gte: ").Append(Gte).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
