/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines basic brand details.
    /// </summary>
    [DataContract(Name = "ManagementProjectsBrandingGetResponseBodyBrand")]
    public partial class ManagementProjectsBrandingGetResponseBodyBrand : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsBrandingGetResponseBodyBrand" /> class.
        /// </summary>
        /// <param name="name">Defines brand name..</param>
        /// <param name="privacyPolicyUrl">Defines the URL to the brand&#39;s privacy policy. It must be a valid URL format..</param>
        /// <param name="termsOfUseUrl">Defines the URL to the brand&#39;s terms of use.  It must be a valid URL format..</param>
        /// <param name="permissionReminder">Defines the message that is displayed to customers who opted in an email newsletter..</param>
        /// <param name="websiteUrl">Defines the URL to the brand&#39;s website. It must be a valid URL format..</param>
        public ManagementProjectsBrandingGetResponseBodyBrand(string name = default(string), string privacyPolicyUrl = default(string), string termsOfUseUrl = default(string), string permissionReminder = default(string), string websiteUrl = default(string))
        {
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._PrivacyPolicyUrl = privacyPolicyUrl;
            if (this.PrivacyPolicyUrl != null)
            {
                this._flagPrivacyPolicyUrl = true;
            }
            this._TermsOfUseUrl = termsOfUseUrl;
            if (this.TermsOfUseUrl != null)
            {
                this._flagTermsOfUseUrl = true;
            }
            this._PermissionReminder = permissionReminder;
            if (this.PermissionReminder != null)
            {
                this._flagPermissionReminder = true;
            }
            this._WebsiteUrl = websiteUrl;
            if (this.WebsiteUrl != null)
            {
                this._flagWebsiteUrl = true;
            }
        }

        /// <summary>
        /// Defines brand name.
        /// </summary>
        /// <value>Defines brand name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Defines the URL to the brand&#39;s privacy policy. It must be a valid URL format.
        /// </summary>
        /// <value>Defines the URL to the brand&#39;s privacy policy. It must be a valid URL format.</value>
        [DataMember(Name = "privacy_policy_url", EmitDefaultValue = true)]
        public string PrivacyPolicyUrl
        {
            get{ return _PrivacyPolicyUrl;}
            set
            {
                _PrivacyPolicyUrl = value;
                _flagPrivacyPolicyUrl = true;
            }
        }
        private string _PrivacyPolicyUrl;
        private bool _flagPrivacyPolicyUrl;

        /// <summary>
        /// Returns false as PrivacyPolicyUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrivacyPolicyUrl()
        {
            return _flagPrivacyPolicyUrl;
        }
        /// <summary>
        /// Defines the URL to the brand&#39;s terms of use.  It must be a valid URL format.
        /// </summary>
        /// <value>Defines the URL to the brand&#39;s terms of use.  It must be a valid URL format.</value>
        [DataMember(Name = "terms_of_use_url", EmitDefaultValue = true)]
        public string TermsOfUseUrl
        {
            get{ return _TermsOfUseUrl;}
            set
            {
                _TermsOfUseUrl = value;
                _flagTermsOfUseUrl = true;
            }
        }
        private string _TermsOfUseUrl;
        private bool _flagTermsOfUseUrl;

        /// <summary>
        /// Returns false as TermsOfUseUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTermsOfUseUrl()
        {
            return _flagTermsOfUseUrl;
        }
        /// <summary>
        /// Defines the message that is displayed to customers who opted in an email newsletter.
        /// </summary>
        /// <value>Defines the message that is displayed to customers who opted in an email newsletter.</value>
        [DataMember(Name = "permission_reminder", EmitDefaultValue = true)]
        public string PermissionReminder
        {
            get{ return _PermissionReminder;}
            set
            {
                _PermissionReminder = value;
                _flagPermissionReminder = true;
            }
        }
        private string _PermissionReminder;
        private bool _flagPermissionReminder;

        /// <summary>
        /// Returns false as PermissionReminder should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePermissionReminder()
        {
            return _flagPermissionReminder;
        }
        /// <summary>
        /// Defines the URL to the brand&#39;s website. It must be a valid URL format.
        /// </summary>
        /// <value>Defines the URL to the brand&#39;s website. It must be a valid URL format.</value>
        [DataMember(Name = "website_url", EmitDefaultValue = true)]
        public string WebsiteUrl
        {
            get{ return _WebsiteUrl;}
            set
            {
                _WebsiteUrl = value;
                _flagWebsiteUrl = true;
            }
        }
        private string _WebsiteUrl;
        private bool _flagWebsiteUrl;

        /// <summary>
        /// Returns false as WebsiteUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeWebsiteUrl()
        {
            return _flagWebsiteUrl;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsBrandingGetResponseBodyBrand {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PrivacyPolicyUrl: ").Append(PrivacyPolicyUrl).Append("\n");
            sb.Append("  TermsOfUseUrl: ").Append(TermsOfUseUrl).Append("\n");
            sb.Append("  PermissionReminder: ").Append(PermissionReminder).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
