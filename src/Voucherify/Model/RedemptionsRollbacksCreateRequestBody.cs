/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Request body schema for **POST** &#x60;v1/redemptions/{parentRedemptionId}/rollbacks&#x60;.
    /// </summary>
    [DataContract(Name = "RedemptionsRollbacksCreateRequestBody")]
    public partial class RedemptionsRollbacksCreateRequestBody : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsRollbacksCreateRequestBody" /> class.
        /// </summary>
        /// <param name="reason">Reason for the rollback..</param>
        /// <param name="trackingId">Customer&#39;s &#x60;source_id&#x60;..</param>
        /// <param name="customer">customer.</param>
        /// <param name="order">order.</param>
        /// <param name="metadata">A set of key/value pairs that you can send in the request body to update **redemption** metadata..</param>
        public RedemptionsRollbacksCreateRequestBody(string reason = default(string), string trackingId = default(string), Customer customer = default(Customer), Order order = default(Order), Object metadata = default(Object))
        {
            this._Reason = reason;
            if (this.Reason != null)
            {
                this._flagReason = true;
            }
            this._TrackingId = trackingId;
            if (this.TrackingId != null)
            {
                this._flagTrackingId = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
        }

        /// <summary>
        /// Reason for the rollback.
        /// </summary>
        /// <value>Reason for the rollback.</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public string Reason
        {
            get{ return _Reason;}
            set
            {
                _Reason = value;
                _flagReason = true;
            }
        }
        private string _Reason;
        private bool _flagReason;

        /// <summary>
        /// Returns false as Reason should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReason()
        {
            return _flagReason;
        }
        /// <summary>
        /// Customer&#39;s &#x60;source_id&#x60;.
        /// </summary>
        /// <value>Customer&#39;s &#x60;source_id&#x60;.</value>
        [DataMember(Name = "tracking_id", EmitDefaultValue = true)]
        public string TrackingId
        {
            get{ return _TrackingId;}
            set
            {
                _TrackingId = value;
                _flagTrackingId = true;
            }
        }
        private string _TrackingId;
        private bool _flagTrackingId;

        /// <summary>
        /// Returns false as TrackingId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTrackingId()
        {
            return _flagTrackingId;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public Customer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private Customer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public Order Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private Order _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// A set of key/value pairs that you can send in the request body to update **redemption** metadata.
        /// </summary>
        /// <value>A set of key/value pairs that you can send in the request body to update **redemption** metadata.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RedemptionsRollbacksCreateRequestBody {\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
