/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Detailed information about the customer&#39;s redeemable item
    /// </summary>
    [DataContract(Name = "CustomerRedeemableRedeemable")]
    public partial class CustomerRedeemableRedeemable : IValidatableObject
    {
        /// <summary>
        /// Status of the redeemable.
        /// </summary>
        /// <value>Status of the redeemable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum USED for value: USED
            /// </summary>
            [EnumMember(Value = "USED")]
            USED = 2,

            /// <summary>
            /// Enum DISABLED for value: DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLED = 3,

            /// <summary>
            /// Enum NOTACTIVEYET for value: NOT_ACTIVE_YET
            /// </summary>
            [EnumMember(Value = "NOT_ACTIVE_YET")]
            NOTACTIVEYET = 4,

            /// <summary>
            /// Enum EXPIRED for value: EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED = 5,

            /// <summary>
            /// Enum NOBALANCE for value: NO_BALANCE
            /// </summary>
            [EnumMember(Value = "NO_BALANCE")]
            NOBALANCE = 6
        }


        /// <summary>
        /// Status of the redeemable.
        /// </summary>
        /// <value>Status of the redeemable.</value>
        /*
        <example>ACTIVE</example>
        */

        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status
        {
            get{ return _Status;}
            set
            {
                _Status = value;
                _flagStatus = true;
            }
        }
        private StatusEnum? _Status;
        private bool _flagStatus;

        /// <summary>
        /// Returns false as Status should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatus()
        {
            return _flagStatus;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRedeemableRedeemable" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerRedeemableRedeemable() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerRedeemableRedeemable" /> class.
        /// </summary>
        /// <param name="type">Type of the redeemable..</param>
        /// <param name="voucher">voucher (required).</param>
        /// <param name="status">Status of the redeemable..</param>
        public CustomerRedeemableRedeemable(string type = default(string), RedeemableVoucher voucher = default(RedeemableVoucher), StatusEnum? status = default(StatusEnum?))
        {
            // to ensure "voucher" is required (not null)
            if (voucher == null)
            {
                throw new ArgumentNullException("voucher is a required property for CustomerRedeemableRedeemable and cannot be null");
            }
            this._Voucher = voucher;
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Status = status;
            if (this.Status != null)
            {
                this._flagStatus = true;
            }
        }

        /// <summary>
        /// Type of the redeemable.
        /// </summary>
        /// <value>Type of the redeemable.</value>
        /*
        <example>voucher</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private string _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", IsRequired = true, EmitDefaultValue = true)]
        public RedeemableVoucher Voucher
        {
            get{ return _Voucher;}
            set
            {
                _Voucher = value;
                _flagVoucher = true;
            }
        }
        private RedeemableVoucher _Voucher;
        private bool _flagVoucher;

        /// <summary>
        /// Returns false as Voucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucher()
        {
            return _flagVoucher;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerRedeemableRedeemable {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
