/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Contains details about the users who will be assigned to the project. Only the &#x60;id&#x60; and &#x60;role&#x60; or &#x60;login&#x60; and &#x60;role&#x60; should be provided in the request.
    /// </summary>
    [DataContract(Name = "ManagementProjectsCreateRequestBodyUsersItem")]
    public partial class ManagementProjectsCreateRequestBodyUsersItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsCreateRequestBodyUsersItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManagementProjectsCreateRequestBodyUsersItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementProjectsCreateRequestBodyUsersItem" /> class.
        /// </summary>
        /// <param name="id">The unique identifier of the user who will be assigned to the project. It can be found in Team Settings &gt; Team &gt; Edit member. **Required** with the &#x60;role&#x60; string.  Do **not** use with the &#x60;login&#x60; string..</param>
        /// <param name="login">The login data of the user who will be assigned to the project. **Required** with the &#x60;role&#x60; string.  Do **not** use with the &#x60;id&#x60; string..</param>
        /// <param name="role">The role of the user to be added. It can be one of the following predefined roles: &#x60;ADMIN&#x60;, &#x60;USER&#x60;, &#x60;VIEWER&#x60;, &#x60;MERCHANT&#x60; or an ID of a custom role. (required).</param>
        public ManagementProjectsCreateRequestBodyUsersItem(string id = default(string), string login = default(string), string role = default(string))
        {
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new ArgumentNullException("role is a required property for ManagementProjectsCreateRequestBodyUsersItem and cannot be null");
            }
            this._Role = role;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Login = login;
            if (this.Login != null)
            {
                this._flagLogin = true;
            }
        }

        /// <summary>
        /// The unique identifier of the user who will be assigned to the project. It can be found in Team Settings &gt; Team &gt; Edit member. **Required** with the &#x60;role&#x60; string.  Do **not** use with the &#x60;login&#x60; string.
        /// </summary>
        /// <value>The unique identifier of the user who will be assigned to the project. It can be found in Team Settings &gt; Team &gt; Edit member. **Required** with the &#x60;role&#x60; string.  Do **not** use with the &#x60;login&#x60; string.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The login data of the user who will be assigned to the project. **Required** with the &#x60;role&#x60; string.  Do **not** use with the &#x60;id&#x60; string.
        /// </summary>
        /// <value>The login data of the user who will be assigned to the project. **Required** with the &#x60;role&#x60; string.  Do **not** use with the &#x60;id&#x60; string.</value>
        [DataMember(Name = "login", EmitDefaultValue = true)]
        public string Login
        {
            get{ return _Login;}
            set
            {
                _Login = value;
                _flagLogin = true;
            }
        }
        private string _Login;
        private bool _flagLogin;

        /// <summary>
        /// Returns false as Login should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLogin()
        {
            return _flagLogin;
        }
        /// <summary>
        /// The role of the user to be added. It can be one of the following predefined roles: &#x60;ADMIN&#x60;, &#x60;USER&#x60;, &#x60;VIEWER&#x60;, &#x60;MERCHANT&#x60; or an ID of a custom role.
        /// </summary>
        /// <value>The role of the user to be added. It can be one of the following predefined roles: &#x60;ADMIN&#x60;, &#x60;USER&#x60;, &#x60;VIEWER&#x60;, &#x60;MERCHANT&#x60; or an ID of a custom role.</value>
        [DataMember(Name = "role", IsRequired = true, EmitDefaultValue = true)]
        public string Role
        {
            get{ return _Role;}
            set
            {
                _Role = value;
                _flagRole = true;
            }
        }
        private string _Role;
        private bool _flagRole;

        /// <summary>
        /// Returns false as Role should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRole()
        {
            return _flagRole;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManagementProjectsCreateRequestBodyUsersItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
