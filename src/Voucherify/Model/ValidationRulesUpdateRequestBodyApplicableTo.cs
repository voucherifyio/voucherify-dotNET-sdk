/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ValidationRulesUpdateRequestBodyApplicableTo
    /// </summary>
    [DataContract(Name = "ValidationRulesUpdateRequestBodyApplicableTo")]
    public partial class ValidationRulesUpdateRequestBodyApplicableTo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationRulesUpdateRequestBodyApplicableTo" /> class.
        /// </summary>
        /// <param name="excluded">Defines which items are excluded from a discount..</param>
        /// <param name="included">Defines which items are included in a discount..</param>
        /// <param name="includedAll">Indicates whether all items are included in the discount..</param>
        public ValidationRulesUpdateRequestBodyApplicableTo(List<ApplicableTo> excluded = default(List<ApplicableTo>), List<ApplicableTo> included = default(List<ApplicableTo>), bool? includedAll = default(bool?))
        {
            this._Excluded = excluded;
            if (this.Excluded != null)
            {
                this._flagExcluded = true;
            }
            this._Included = included;
            if (this.Included != null)
            {
                this._flagIncluded = true;
            }
            this._IncludedAll = includedAll;
            if (this.IncludedAll != null)
            {
                this._flagIncludedAll = true;
            }
        }

        /// <summary>
        /// Defines which items are excluded from a discount.
        /// </summary>
        /// <value>Defines which items are excluded from a discount.</value>
        [DataMember(Name = "excluded", EmitDefaultValue = true)]
        public List<ApplicableTo> Excluded
        {
            get{ return _Excluded;}
            set
            {
                _Excluded = value;
                _flagExcluded = true;
            }
        }
        private List<ApplicableTo> _Excluded;
        private bool _flagExcluded;

        /// <summary>
        /// Returns false as Excluded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExcluded()
        {
            return _flagExcluded;
        }
        /// <summary>
        /// Defines which items are included in a discount.
        /// </summary>
        /// <value>Defines which items are included in a discount.</value>
        [DataMember(Name = "included", EmitDefaultValue = true)]
        public List<ApplicableTo> Included
        {
            get{ return _Included;}
            set
            {
                _Included = value;
                _flagIncluded = true;
            }
        }
        private List<ApplicableTo> _Included;
        private bool _flagIncluded;

        /// <summary>
        /// Returns false as Included should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIncluded()
        {
            return _flagIncluded;
        }
        /// <summary>
        /// Indicates whether all items are included in the discount.
        /// </summary>
        /// <value>Indicates whether all items are included in the discount.</value>
        [DataMember(Name = "included_all", EmitDefaultValue = true)]
        public bool? IncludedAll
        {
            get{ return _IncludedAll;}
            set
            {
                _IncludedAll = value;
                _flagIncludedAll = true;
            }
        }
        private bool? _IncludedAll;
        private bool _flagIncludedAll;

        /// <summary>
        /// Returns false as IncludedAll should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIncludedAll()
        {
            return _flagIncludedAll;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidationRulesUpdateRequestBodyApplicableTo {\n");
            sb.Append("  Excluded: ").Append(Excluded).Append("\n");
            sb.Append("  Included: ").Append(Included).Append("\n");
            sb.Append("  IncludedAll: ").Append(IncludedAll).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
