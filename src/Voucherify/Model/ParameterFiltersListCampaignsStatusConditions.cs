/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Data conditions used to narrow down the data records to be returned in the result.
    /// </summary>
    [DataContract(Name = "ParameterFiltersListCampaignsStatusConditions")]
    public partial class ParameterFiltersListCampaignsStatusConditions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterFiltersListCampaignsStatusConditions" /> class.
        /// </summary>
        /// <param name="active">Campaigns finished generation codes. This also returns campaigns regardless of their &#x60;expiration_date&#x60; and &#x60;start_date&#x60;..</param>
        /// <param name="failed">Campaigs failed to generated codes..</param>
        /// <param name="inProgress">Campaigns are generating codes or they are updating..</param>
        /// <param name="expired">Campaigns generated codes, but their &#x60;expiration_date&#x60; is in the past..</param>
        /// <param name="beforeStart">Campaigns generated codes, but their &#x60;start_date&#x60; is in the future..</param>
        public ParameterFiltersListCampaignsStatusConditions(Object active = default(Object), Object failed = default(Object), Object inProgress = default(Object), Object expired = default(Object), Object beforeStart = default(Object))
        {
            this._Active = active;
            if (this.Active != null)
            {
                this._flagActive = true;
            }
            this._Failed = failed;
            if (this.Failed != null)
            {
                this._flagFailed = true;
            }
            this._InProgress = inProgress;
            if (this.InProgress != null)
            {
                this._flagInProgress = true;
            }
            this._Expired = expired;
            if (this.Expired != null)
            {
                this._flagExpired = true;
            }
            this._BeforeStart = beforeStart;
            if (this.BeforeStart != null)
            {
                this._flagBeforeStart = true;
            }
        }

        /// <summary>
        /// Campaigns finished generation codes. This also returns campaigns regardless of their &#x60;expiration_date&#x60; and &#x60;start_date&#x60;.
        /// </summary>
        /// <value>Campaigns finished generation codes. This also returns campaigns regardless of their &#x60;expiration_date&#x60; and &#x60;start_date&#x60;.</value>
        [DataMember(Name = "$active", EmitDefaultValue = true)]
        public Object Active
        {
            get{ return _Active;}
            set
            {
                _Active = value;
                _flagActive = true;
            }
        }
        private Object _Active;
        private bool _flagActive;

        /// <summary>
        /// Returns false as Active should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActive()
        {
            return _flagActive;
        }
        /// <summary>
        /// Campaigs failed to generated codes.
        /// </summary>
        /// <value>Campaigs failed to generated codes.</value>
        [DataMember(Name = "$failed", EmitDefaultValue = true)]
        public Object Failed
        {
            get{ return _Failed;}
            set
            {
                _Failed = value;
                _flagFailed = true;
            }
        }
        private Object _Failed;
        private bool _flagFailed;

        /// <summary>
        /// Returns false as Failed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFailed()
        {
            return _flagFailed;
        }
        /// <summary>
        /// Campaigns are generating codes or they are updating.
        /// </summary>
        /// <value>Campaigns are generating codes or they are updating.</value>
        [DataMember(Name = "$in_progress", EmitDefaultValue = true)]
        public Object InProgress
        {
            get{ return _InProgress;}
            set
            {
                _InProgress = value;
                _flagInProgress = true;
            }
        }
        private Object _InProgress;
        private bool _flagInProgress;

        /// <summary>
        /// Returns false as InProgress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInProgress()
        {
            return _flagInProgress;
        }
        /// <summary>
        /// Campaigns generated codes, but their &#x60;expiration_date&#x60; is in the past.
        /// </summary>
        /// <value>Campaigns generated codes, but their &#x60;expiration_date&#x60; is in the past.</value>
        [DataMember(Name = "$expired", EmitDefaultValue = true)]
        public Object Expired
        {
            get{ return _Expired;}
            set
            {
                _Expired = value;
                _flagExpired = true;
            }
        }
        private Object _Expired;
        private bool _flagExpired;

        /// <summary>
        /// Returns false as Expired should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpired()
        {
            return _flagExpired;
        }
        /// <summary>
        /// Campaigns generated codes, but their &#x60;start_date&#x60; is in the future.
        /// </summary>
        /// <value>Campaigns generated codes, but their &#x60;start_date&#x60; is in the future.</value>
        [DataMember(Name = "before_start", EmitDefaultValue = true)]
        public Object BeforeStart
        {
            get{ return _BeforeStart;}
            set
            {
                _BeforeStart = value;
                _flagBeforeStart = true;
            }
        }
        private Object _BeforeStart;
        private bool _flagBeforeStart;

        /// <summary>
        /// Returns false as BeforeStart should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBeforeStart()
        {
            return _flagBeforeStart;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterFiltersListCampaignsStatusConditions {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  InProgress: ").Append(InProgress).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  BeforeStart: ").Append(BeforeStart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
