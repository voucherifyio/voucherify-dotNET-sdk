/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// This is an object representing member activity.    This is a general object which presents moments from members&#39; activity. There are all types of different events that members perform during their journey once they participate in a loyalty program. Events describe moments when the members redeem loyalty cards and earn points or rewards. The list of all types of activities is listed below.  The details describing the activity are collected in an array property named &#x60;data&#x60;. In this object, software integrators can find all further information explaining the event context.
    /// </summary>
    [DataContract(Name = "MemberActivity")]
    public partial class MemberActivity : IValidatableObject
    {
        /// <summary>
        /// Event type.
        /// </summary>
        /// <value>Event type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CustomerLoyaltyTierUpgraded for value: customer.loyalty.tier.upgraded
            /// </summary>
            [EnumMember(Value = "customer.loyalty.tier.upgraded")]
            CustomerLoyaltyTierUpgraded = 1,

            /// <summary>
            /// Enum CustomerLoyaltyTierDowngraded for value: customer.loyalty.tier.downgraded
            /// </summary>
            [EnumMember(Value = "customer.loyalty.tier.downgraded")]
            CustomerLoyaltyTierDowngraded = 2,

            /// <summary>
            /// Enum CustomerLoyaltyTierProlonged for value: customer.loyalty.tier.prolonged
            /// </summary>
            [EnumMember(Value = "customer.loyalty.tier.prolonged")]
            CustomerLoyaltyTierProlonged = 3,

            /// <summary>
            /// Enum CustomerLoyaltyTierExpirationChanged for value: customer.loyalty.tier.expiration.changed
            /// </summary>
            [EnumMember(Value = "customer.loyalty.tier.expiration.changed")]
            CustomerLoyaltyTierExpirationChanged = 4,

            /// <summary>
            /// Enum CustomerLoyaltyTierJoined for value: customer.loyalty.tier.joined
            /// </summary>
            [EnumMember(Value = "customer.loyalty.tier.joined")]
            CustomerLoyaltyTierJoined = 5,

            /// <summary>
            /// Enum CustomerLoyaltyTierLeft for value: customer.loyalty.tier.left
            /// </summary>
            [EnumMember(Value = "customer.loyalty.tier.left")]
            CustomerLoyaltyTierLeft = 6,

            /// <summary>
            /// Enum CustomerPublicationSucceeded for value: customer.publication.succeeded
            /// </summary>
            [EnumMember(Value = "customer.publication.succeeded")]
            CustomerPublicationSucceeded = 7,

            /// <summary>
            /// Enum CustomerPublicationFailed for value: customer.publication.failed
            /// </summary>
            [EnumMember(Value = "customer.publication.failed")]
            CustomerPublicationFailed = 8,

            /// <summary>
            /// Enum CustomerRedemptionFailed for value: customer.redemption.failed
            /// </summary>
            [EnumMember(Value = "customer.redemption.failed")]
            CustomerRedemptionFailed = 9,

            /// <summary>
            /// Enum CustomerRedemptionSuccceeded for value: customer.redemption.succceeded
            /// </summary>
            [EnumMember(Value = "customer.redemption.succceeded")]
            CustomerRedemptionSuccceeded = 10,

            /// <summary>
            /// Enum CustomerRedemptionRollbackFailed for value: customer.redemption.rollback.failed
            /// </summary>
            [EnumMember(Value = "customer.redemption.rollback.failed")]
            CustomerRedemptionRollbackFailed = 11,

            /// <summary>
            /// Enum CustomerRedemptionRollbackSuccceeded for value: customer.redemption.rollback.succceeded
            /// </summary>
            [EnumMember(Value = "customer.redemption.rollback.succceeded")]
            CustomerRedemptionRollbackSuccceeded = 12,

            /// <summary>
            /// Enum CustomerRewarded for value: customer.rewarded
            /// </summary>
            [EnumMember(Value = "customer.rewarded")]
            CustomerRewarded = 13,

            /// <summary>
            /// Enum CustomerRewardedLoyaltyPoints for value: customer.rewarded.loyalty_points
            /// </summary>
            [EnumMember(Value = "customer.rewarded.loyalty_points")]
            CustomerRewardedLoyaltyPoints = 14,

            /// <summary>
            /// Enum CustomerRewardRedemptionsCreated for value: customer.reward_redemptions.created
            /// </summary>
            [EnumMember(Value = "customer.reward_redemptions.created")]
            CustomerRewardRedemptionsCreated = 15,

            /// <summary>
            /// Enum CustomerRewardRedemptionsPending for value: customer.reward_redemptions.pending
            /// </summary>
            [EnumMember(Value = "customer.reward_redemptions.pending")]
            CustomerRewardRedemptionsPending = 16,

            /// <summary>
            /// Enum CustomerRewardRedemptionsCompleted for value: customer.reward_redemptions.completed
            /// </summary>
            [EnumMember(Value = "customer.reward_redemptions.completed")]
            CustomerRewardRedemptionsCompleted = 17,

            /// <summary>
            /// Enum CustomerRewardRedemptionsRolledback for value: customer.reward_redemptions.rolledback
            /// </summary>
            [EnumMember(Value = "customer.reward_redemptions.rolledback")]
            CustomerRewardRedemptionsRolledback = 18,

            /// <summary>
            /// Enum CustomerVoucherDeleted for value: customer.voucher.deleted
            /// </summary>
            [EnumMember(Value = "customer.voucher.deleted")]
            CustomerVoucherDeleted = 19,

            /// <summary>
            /// Enum CustomerVoucherLoyaltyCardPendingPointsActivated for value: customer.voucher.loyalty_card.pending_points.activated
            /// </summary>
            [EnumMember(Value = "customer.voucher.loyalty_card.pending_points.activated")]
            CustomerVoucherLoyaltyCardPendingPointsActivated = 20,

            /// <summary>
            /// Enum CustomerVoucherLoyaltyCardPendingPointsAdded for value: customer.voucher.loyalty_card.pending_points.added
            /// </summary>
            [EnumMember(Value = "customer.voucher.loyalty_card.pending_points.added")]
            CustomerVoucherLoyaltyCardPendingPointsAdded = 21,

            /// <summary>
            /// Enum CustomerVoucherLoyaltyCardPendingPointsCanceled for value: customer.voucher.loyalty_card.pending_points.canceled
            /// </summary>
            [EnumMember(Value = "customer.voucher.loyalty_card.pending_points.canceled")]
            CustomerVoucherLoyaltyCardPendingPointsCanceled = 22,

            /// <summary>
            /// Enum CustomerVoucherLoyaltyCardPendingPointsUpdated for value: customer.voucher.loyalty_card.pending_points.updated
            /// </summary>
            [EnumMember(Value = "customer.voucher.loyalty_card.pending_points.updated")]
            CustomerVoucherLoyaltyCardPendingPointsUpdated = 23,

            /// <summary>
            /// Enum CustomerVoucherLoyaltyCardPointsAdded for value: customer.voucher.loyalty_card.points_added
            /// </summary>
            [EnumMember(Value = "customer.voucher.loyalty_card.points_added")]
            CustomerVoucherLoyaltyCardPointsAdded = 24,

            /// <summary>
            /// Enum CustomerVoucherLoyaltyCardPointsTransferred for value: customer.voucher.loyalty_card.points_transferred
            /// </summary>
            [EnumMember(Value = "customer.voucher.loyalty_card.points_transferred")]
            CustomerVoucherLoyaltyCardPointsTransferred = 25,

            /// <summary>
            /// Enum CustomerVoucherLoyaltyCardPointsExpired for value: customer.voucher.loyalty_card.points_expired
            /// </summary>
            [EnumMember(Value = "customer.voucher.loyalty_card.points_expired")]
            CustomerVoucherLoyaltyCardPointsExpired = 26
        }


        /// <summary>
        /// Event type.
        /// </summary>
        /// <value>Event type.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberActivity" /> class.
        /// </summary>
        /// <param name="id">Unique event ID, assigned by Voucherify..</param>
        /// <param name="type">Event type..</param>
        /// <param name="data">data.</param>
        /// <param name="createdAt">Timestamp representing the date and time when the member activity occurred in ISO 8601 format..</param>
        /// <param name="groupId">Unique identifier of the request that caused the event..</param>
        public MemberActivity(string id = default(string), TypeEnum? type = default(TypeEnum?), MemberActivityData1 data = default(MemberActivityData1), DateTimeOffset? createdAt = default(DateTimeOffset?), string groupId = default(string))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Data = data;
            if (this.Data != null)
            {
                this._flagData = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._GroupId = groupId;
            if (this.GroupId != null)
            {
                this._flagGroupId = true;
            }
        }

        /// <summary>
        /// Unique event ID, assigned by Voucherify.
        /// </summary>
        /// <value>Unique event ID, assigned by Voucherify.</value>
        /*
        <example>evcus_0c150c51730c6b60b1</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = true)]
        public MemberActivityData1 Data
        {
            get{ return _Data;}
            set
            {
                _Data = value;
                _flagData = true;
            }
        }
        private MemberActivityData1 _Data;
        private bool _flagData;

        /// <summary>
        /// Returns false as Data should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeData()
        {
            return _flagData;
        }
        /// <summary>
        /// Timestamp representing the date and time when the member activity occurred in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the member activity occurred in ISO 8601 format.</value>
        /*
        <example>2022-08-30T09:14:07.660Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Unique identifier of the request that caused the event.
        /// </summary>
        /// <value>Unique identifier of the request that caused the event.</value>
        /*
        <example>w-0e30613abc1f044513</example>
        */
        [DataMember(Name = "group_id", EmitDefaultValue = true)]
        public string GroupId
        {
            get{ return _GroupId;}
            set
            {
                _GroupId = value;
                _flagGroupId = true;
            }
        }
        private string _GroupId;
        private bool _flagGroupId;

        /// <summary>
        /// Returns false as GroupId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGroupId()
        {
            return _flagGroupId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemberActivity {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
