/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines range of loyalty tier in points.
    /// </summary>
    [DataContract(Name = "LoyaltyTierConfigPoints")]
    public partial class LoyaltyTierConfigPoints : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTierConfigPoints" /> class.
        /// </summary>
        /// <param name="from">Bottom points threshold value..</param>
        /// <param name="to">Top points threshold value..</param>
        public LoyaltyTierConfigPoints(int? from = default(int?), int? to = default(int?))
        {
            this._From = from;
            if (this.From != null)
            {
                this._flagFrom = true;
            }
            this._To = to;
            if (this.To != null)
            {
                this._flagTo = true;
            }
        }

        /// <summary>
        /// Bottom points threshold value.
        /// </summary>
        /// <value>Bottom points threshold value.</value>
        [DataMember(Name = "from", EmitDefaultValue = true)]
        public int? From
        {
            get{ return _From;}
            set
            {
                _From = value;
                _flagFrom = true;
            }
        }
        private int? _From;
        private bool _flagFrom;

        /// <summary>
        /// Returns false as From should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFrom()
        {
            return _flagFrom;
        }
        /// <summary>
        /// Top points threshold value.
        /// </summary>
        /// <value>Top points threshold value.</value>
        [DataMember(Name = "to", EmitDefaultValue = true)]
        public int? To
        {
            get{ return _To;}
            set
            {
                _To = value;
                _flagTo = true;
            }
        }
        private int? _To;
        private bool _flagTo;

        /// <summary>
        /// Returns false as To should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTo()
        {
            return _flagTo;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyTierConfigPoints {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
