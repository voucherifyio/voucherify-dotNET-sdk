/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// DiscountUnitMultipleOneUnit
    /// </summary>
    [DataContract(Name = "DiscountUnitMultipleOneUnit")]
    public partial class DiscountUnitMultipleOneUnit : IValidatableObject
    {
        /// <summary>
        /// Defines how the unit is added to the customer&#39;s order.  
        /// </summary>
        /// <value>Defines how the unit is added to the customer&#39;s order.  </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EffectEnum
        {
            /// <summary>
            /// Enum ADDNEWITEMS for value: ADD_NEW_ITEMS
            /// </summary>
            [EnumMember(Value = "ADD_NEW_ITEMS")]
            ADDNEWITEMS = 1,

            /// <summary>
            /// Enum ADDMISSINGITEMS for value: ADD_MISSING_ITEMS
            /// </summary>
            [EnumMember(Value = "ADD_MISSING_ITEMS")]
            ADDMISSINGITEMS = 2
        }


        /// <summary>
        /// Defines how the unit is added to the customer&#39;s order.  
        /// </summary>
        /// <value>Defines how the unit is added to the customer&#39;s order.  </value>

        [DataMember(Name = "effect", EmitDefaultValue = true)]
        public EffectEnum? Effect
        {
            get{ return _Effect;}
            set
            {
                _Effect = value;
                _flagEffect = true;
            }
        }
        private EffectEnum? _Effect;
        private bool _flagEffect;

        /// <summary>
        /// Returns false as Effect should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEffect()
        {
            return _flagEffect;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountUnitMultipleOneUnit" /> class.
        /// </summary>
        /// <param name="unitOff">Number of units to be granted a full value discount..</param>
        /// <param name="unitOffFormula">Formula used to calculate the number of units..</param>
        /// <param name="effect">Defines how the unit is added to the customer&#39;s order.  .</param>
        /// <param name="unitType">The product deemed as free, chosen from product inventory (e.g. time, items)..</param>
        /// <param name="product">product.</param>
        /// <param name="sku">sku.</param>
        public DiscountUnitMultipleOneUnit(decimal? unitOff = default(decimal?), string unitOffFormula = default(string), EffectEnum? effect = default(EffectEnum?), string unitType = default(string), SimpleProductDiscountUnit product = default(SimpleProductDiscountUnit), SimpleSkuDiscountUnit sku = default(SimpleSkuDiscountUnit))
        {
            this._UnitOff = unitOff;
            if (this.UnitOff != null)
            {
                this._flagUnitOff = true;
            }
            this._UnitOffFormula = unitOffFormula;
            if (this.UnitOffFormula != null)
            {
                this._flagUnitOffFormula = true;
            }
            this._Effect = effect;
            if (this.Effect != null)
            {
                this._flagEffect = true;
            }
            this._UnitType = unitType;
            if (this.UnitType != null)
            {
                this._flagUnitType = true;
            }
            this._Product = product;
            if (this.Product != null)
            {
                this._flagProduct = true;
            }
            this._Sku = sku;
            if (this.Sku != null)
            {
                this._flagSku = true;
            }
        }

        /// <summary>
        /// Number of units to be granted a full value discount.
        /// </summary>
        /// <value>Number of units to be granted a full value discount.</value>
        [DataMember(Name = "unit_off", EmitDefaultValue = true)]
        public decimal? UnitOff
        {
            get{ return _UnitOff;}
            set
            {
                _UnitOff = value;
                _flagUnitOff = true;
            }
        }
        private decimal? _UnitOff;
        private bool _flagUnitOff;

        /// <summary>
        /// Returns false as UnitOff should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitOff()
        {
            return _flagUnitOff;
        }
        /// <summary>
        /// Formula used to calculate the number of units.
        /// </summary>
        /// <value>Formula used to calculate the number of units.</value>
        [DataMember(Name = "unit_off_formula", EmitDefaultValue = true)]
        public string UnitOffFormula
        {
            get{ return _UnitOffFormula;}
            set
            {
                _UnitOffFormula = value;
                _flagUnitOffFormula = true;
            }
        }
        private string _UnitOffFormula;
        private bool _flagUnitOffFormula;

        /// <summary>
        /// Returns false as UnitOffFormula should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitOffFormula()
        {
            return _flagUnitOffFormula;
        }
        /// <summary>
        /// The product deemed as free, chosen from product inventory (e.g. time, items).
        /// </summary>
        /// <value>The product deemed as free, chosen from product inventory (e.g. time, items).</value>
        [DataMember(Name = "unit_type", EmitDefaultValue = true)]
        public string UnitType
        {
            get{ return _UnitType;}
            set
            {
                _UnitType = value;
                _flagUnitType = true;
            }
        }
        private string _UnitType;
        private bool _flagUnitType;

        /// <summary>
        /// Returns false as UnitType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnitType()
        {
            return _flagUnitType;
        }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = true)]
        public SimpleProductDiscountUnit Product
        {
            get{ return _Product;}
            set
            {
                _Product = value;
                _flagProduct = true;
            }
        }
        private SimpleProductDiscountUnit _Product;
        private bool _flagProduct;

        /// <summary>
        /// Returns false as Product should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProduct()
        {
            return _flagProduct;
        }
        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = true)]
        public SimpleSkuDiscountUnit Sku
        {
            get{ return _Sku;}
            set
            {
                _Sku = value;
                _flagSku = true;
            }
        }
        private SimpleSkuDiscountUnit _Sku;
        private bool _flagSku;

        /// <summary>
        /// Returns false as Sku should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSku()
        {
            return _flagSku;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscountUnitMultipleOneUnit {\n");
            sb.Append("  UnitOff: ").Append(UnitOff).Append("\n");
            sb.Append("  UnitOffFormula: ").Append(UnitOffFormula).Append("\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
