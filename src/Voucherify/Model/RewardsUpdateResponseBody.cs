/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **PUT** &#x60;v1/rewards/{rewardId}&#x60;.
    /// </summary>
    [DataContract(Name = "RewardsUpdateResponseBody")]
    public partial class RewardsUpdateResponseBody : IValidatableObject
    {
        /// <summary>
        /// Reward type.
        /// </summary>
        /// <value>Reward type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CAMPAIGN for value: CAMPAIGN
            /// </summary>
            [EnumMember(Value = "CAMPAIGN")]
            CAMPAIGN = 1,

            /// <summary>
            /// Enum COIN for value: COIN
            /// </summary>
            [EnumMember(Value = "COIN")]
            COIN = 2,

            /// <summary>
            /// Enum MATERIAL for value: MATERIAL
            /// </summary>
            [EnumMember(Value = "MATERIAL")]
            MATERIAL = 3
        }


        /// <summary>
        /// Reward type.
        /// </summary>
        /// <value>Reward type.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// The type of the object represented by the JSON. This object stores information about the reward.
        /// </summary>
        /// <value>The type of the object represented by the JSON. This object stores information about the reward.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Reward for value: reward
            /// </summary>
            [EnumMember(Value = "reward")]
            Reward = 1
        }


        /// <summary>
        /// The type of the object represented by the JSON. This object stores information about the reward.
        /// </summary>
        /// <value>The type of the object represented by the JSON. This object stores information about the reward.</value>

        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsUpdateResponseBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RewardsUpdateResponseBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsUpdateResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique reward ID, assigned by Voucherify..</param>
        /// <param name="name">Reward name..</param>
        /// <param name="stock">Configurable for **material rewards**. The number of units of the product that you want to share as reward..</param>
        /// <param name="redeemed">Defines the number of already invoked (successful) reward redemptions. .</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="metadata">The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format..</param>
        /// <param name="type">Reward type..</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="createdAt">Timestamp representing the date and time when the reward was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the reward was updated. The value is shown in the ISO 8601 format..</param>
        /// <param name="varObject">The type of the object represented by the JSON. This object stores information about the reward. (required) (default to ObjectEnum.Reward).</param>
        public RewardsUpdateResponseBody(string id = default(string), string name = default(string), int? stock = default(int?), int? redeemed = default(int?), RewardsUpdateResponseBodyAttributes attributes = default(RewardsUpdateResponseBodyAttributes), Object metadata = default(Object), TypeEnum? type = default(TypeEnum?), RewardType parameters = default(RewardType), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), ObjectEnum varObject = ObjectEnum.Reward)
        {
            this._Object = varObject;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Stock = stock;
            if (this.Stock != null)
            {
                this._flagStock = true;
            }
            this._Redeemed = redeemed;
            if (this.Redeemed != null)
            {
                this._flagRedeemed = true;
            }
            this._Attributes = attributes;
            if (this.Attributes != null)
            {
                this._flagAttributes = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Parameters = parameters;
            if (this.Parameters != null)
            {
                this._flagParameters = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
        }

        /// <summary>
        /// Unique reward ID, assigned by Voucherify.
        /// </summary>
        /// <value>Unique reward ID, assigned by Voucherify.</value>
        /*
        <example>rew_nIy4gHpQHle2c3pNMwuj7G6j</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Reward name.
        /// </summary>
        /// <value>Reward name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Configurable for **material rewards**. The number of units of the product that you want to share as reward.
        /// </summary>
        /// <value>Configurable for **material rewards**. The number of units of the product that you want to share as reward.</value>
        [DataMember(Name = "stock", EmitDefaultValue = true)]
        public int? Stock
        {
            get{ return _Stock;}
            set
            {
                _Stock = value;
                _flagStock = true;
            }
        }
        private int? _Stock;
        private bool _flagStock;

        /// <summary>
        /// Returns false as Stock should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStock()
        {
            return _flagStock;
        }
        /// <summary>
        /// Defines the number of already invoked (successful) reward redemptions. 
        /// </summary>
        /// <value>Defines the number of already invoked (successful) reward redemptions. </value>
        [DataMember(Name = "redeemed", EmitDefaultValue = true)]
        public int? Redeemed
        {
            get{ return _Redeemed;}
            set
            {
                _Redeemed = value;
                _flagRedeemed = true;
            }
        }
        private int? _Redeemed;
        private bool _flagRedeemed;

        /// <summary>
        /// Returns false as Redeemed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedeemed()
        {
            return _flagRedeemed;
        }
        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = true)]
        public RewardsUpdateResponseBodyAttributes Attributes
        {
            get{ return _Attributes;}
            set
            {
                _Attributes = value;
                _flagAttributes = true;
            }
        }
        private RewardsUpdateResponseBodyAttributes _Attributes;
        private bool _flagAttributes;

        /// <summary>
        /// Returns false as Attributes should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAttributes()
        {
            return _flagAttributes;
        }
        /// <summary>
        /// The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format.
        /// </summary>
        /// <value>The metadata object stores all custom attributes assigned to the reward. A set of key/value pairs that you can attach to a reward object. It can be useful for storing additional information about the reward in a structured format.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public RewardType Parameters
        {
            get{ return _Parameters;}
            set
            {
                _Parameters = value;
                _flagParameters = true;
            }
        }
        private RewardType _Parameters;
        private bool _flagParameters;

        /// <summary>
        /// Returns false as Parameters should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParameters()
        {
            return _flagParameters;
        }
        /// <summary>
        /// Timestamp representing the date and time when the reward was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the reward was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-08-11T14:49:22.586Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the reward was updated. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the reward was updated. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-08-11T16:01:34.885Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RewardsUpdateResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  Redeemed: ").Append(Redeemed).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
