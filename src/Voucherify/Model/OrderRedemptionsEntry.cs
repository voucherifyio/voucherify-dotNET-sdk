/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// OrderRedemptionsEntry
    /// </summary>
    [DataContract(Name = "OrderRedemptionsEntry")]
    public partial class OrderRedemptionsEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OrderRedemptionsEntry" /> class.
        /// </summary>
        /// <param name="date">Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="rollbackId">Unique ID of the redemption rollback..</param>
        /// <param name="rollbackDate">Timestamp representing the date and time when the redemption rollback was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="relatedObjectType">The source of the incentive..</param>
        /// <param name="relatedObjectId">Unique ID of the parent redemption..</param>
        /// <param name="relatedObjectParentId">Represent&#39;s the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign. In case of a promotion tier, this represents the campaign ID of the promotion tier&#39;s parent campaign..</param>
        /// <param name="stacked">Contains a list of unique IDs of child redemptions, which belong to the stacked incentives..</param>
        /// <param name="rollbackStacked">Lists the rollback redemption IDs of the particular child redemptions..</param>
        public OrderRedemptionsEntry(DateTimeOffset? date = default(DateTimeOffset?), string rollbackId = default(string), DateTimeOffset? rollbackDate = default(DateTimeOffset?), string relatedObjectType = default(string), string relatedObjectId = default(string), string relatedObjectParentId = default(string), List<string> stacked = default(List<string>), List<string> rollbackStacked = default(List<string>))
        {
            this._Date = date;
            if (this.Date != null)
            {
                this._flagDate = true;
            }
            this._RollbackId = rollbackId;
            if (this.RollbackId != null)
            {
                this._flagRollbackId = true;
            }
            this._RollbackDate = rollbackDate;
            if (this.RollbackDate != null)
            {
                this._flagRollbackDate = true;
            }
            this._RelatedObjectType = relatedObjectType;
            if (this.RelatedObjectType != null)
            {
                this._flagRelatedObjectType = true;
            }
            this._RelatedObjectId = relatedObjectId;
            if (this.RelatedObjectId != null)
            {
                this._flagRelatedObjectId = true;
            }
            this._RelatedObjectParentId = relatedObjectParentId;
            if (this.RelatedObjectParentId != null)
            {
                this._flagRelatedObjectParentId = true;
            }
            this._Stacked = stacked;
            if (this.Stacked != null)
            {
                this._flagStacked = true;
            }
            this._RollbackStacked = rollbackStacked;
            if (this.RollbackStacked != null)
            {
                this._flagRollbackStacked = true;
            }
        }

        /// <summary>
        /// Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-09-02T17:06:56.649Z</example>
        */
        [DataMember(Name = "date", EmitDefaultValue = true)]
        public DateTimeOffset? Date
        {
            get{ return _Date;}
            set
            {
                _Date = value;
                _flagDate = true;
            }
        }
        private DateTimeOffset? _Date;
        private bool _flagDate;

        /// <summary>
        /// Returns false as Date should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDate()
        {
            return _flagDate;
        }
        /// <summary>
        /// Unique ID of the redemption rollback.
        /// </summary>
        /// <value>Unique ID of the redemption rollback.</value>
        /*
        <example>rr_0c63c84eb78ee0a6c0</example>
        */
        [DataMember(Name = "rollback_id", EmitDefaultValue = true)]
        public string RollbackId
        {
            get{ return _RollbackId;}
            set
            {
                _RollbackId = value;
                _flagRollbackId = true;
            }
        }
        private string _RollbackId;
        private bool _flagRollbackId;

        /// <summary>
        /// Returns false as RollbackId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRollbackId()
        {
            return _flagRollbackId;
        }
        /// <summary>
        /// Timestamp representing the date and time when the redemption rollback was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the redemption rollback was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2023-01-31T14:18:37.150Z</example>
        */
        [DataMember(Name = "rollback_date", EmitDefaultValue = true)]
        public DateTimeOffset? RollbackDate
        {
            get{ return _RollbackDate;}
            set
            {
                _RollbackDate = value;
                _flagRollbackDate = true;
            }
        }
        private DateTimeOffset? _RollbackDate;
        private bool _flagRollbackDate;

        /// <summary>
        /// Returns false as RollbackDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRollbackDate()
        {
            return _flagRollbackDate;
        }
        /// <summary>
        /// The source of the incentive.
        /// </summary>
        /// <value>The source of the incentive.</value>
        [DataMember(Name = "related_object_type", EmitDefaultValue = true)]
        public string RelatedObjectType
        {
            get{ return _RelatedObjectType;}
            set
            {
                _RelatedObjectType = value;
                _flagRelatedObjectType = true;
            }
        }
        private string _RelatedObjectType;
        private bool _flagRelatedObjectType;

        /// <summary>
        /// Returns false as RelatedObjectType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectType()
        {
            return _flagRelatedObjectType;
        }
        /// <summary>
        /// Unique ID of the parent redemption.
        /// </summary>
        /// <value>Unique ID of the parent redemption.</value>
        /*
        <example>r_0ba186c4824e4881e1</example>
        */
        [DataMember(Name = "related_object_id", EmitDefaultValue = true)]
        public string RelatedObjectId
        {
            get{ return _RelatedObjectId;}
            set
            {
                _RelatedObjectId = value;
                _flagRelatedObjectId = true;
            }
        }
        private string _RelatedObjectId;
        private bool _flagRelatedObjectId;

        /// <summary>
        /// Returns false as RelatedObjectId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectId()
        {
            return _flagRelatedObjectId;
        }
        /// <summary>
        /// Represent&#39;s the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign. In case of a promotion tier, this represents the campaign ID of the promotion tier&#39;s parent campaign.
        /// </summary>
        /// <value>Represent&#39;s the campaign ID of the voucher if the redemption was based on a voucher that was part of bulk codes generated within a campaign. In case of a promotion tier, this represents the campaign ID of the promotion tier&#39;s parent campaign.</value>
        [DataMember(Name = "related_object_parent_id", EmitDefaultValue = true)]
        public string RelatedObjectParentId
        {
            get{ return _RelatedObjectParentId;}
            set
            {
                _RelatedObjectParentId = value;
                _flagRelatedObjectParentId = true;
            }
        }
        private string _RelatedObjectParentId;
        private bool _flagRelatedObjectParentId;

        /// <summary>
        /// Returns false as RelatedObjectParentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectParentId()
        {
            return _flagRelatedObjectParentId;
        }
        /// <summary>
        /// Contains a list of unique IDs of child redemptions, which belong to the stacked incentives.
        /// </summary>
        /// <value>Contains a list of unique IDs of child redemptions, which belong to the stacked incentives.</value>
        [DataMember(Name = "stacked", EmitDefaultValue = true)]
        public List<string> Stacked
        {
            get{ return _Stacked;}
            set
            {
                _Stacked = value;
                _flagStacked = true;
            }
        }
        private List<string> _Stacked;
        private bool _flagStacked;

        /// <summary>
        /// Returns false as Stacked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStacked()
        {
            return _flagStacked;
        }
        /// <summary>
        /// Lists the rollback redemption IDs of the particular child redemptions.
        /// </summary>
        /// <value>Lists the rollback redemption IDs of the particular child redemptions.</value>
        [DataMember(Name = "rollback_stacked", EmitDefaultValue = true)]
        public List<string> RollbackStacked
        {
            get{ return _RollbackStacked;}
            set
            {
                _RollbackStacked = value;
                _flagRollbackStacked = true;
            }
        }
        private List<string> _RollbackStacked;
        private bool _flagRollbackStacked;

        /// <summary>
        /// Returns false as RollbackStacked should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRollbackStacked()
        {
            return _flagRollbackStacked;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OrderRedemptionsEntry {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  RollbackId: ").Append(RollbackId).Append("\n");
            sb.Append("  RollbackDate: ").Append(RollbackDate).Append("\n");
            sb.Append("  RelatedObjectType: ").Append(RelatedObjectType).Append("\n");
            sb.Append("  RelatedObjectId: ").Append(RelatedObjectId).Append("\n");
            sb.Append("  RelatedObjectParentId: ").Append(RelatedObjectParentId).Append("\n");
            sb.Append("  Stacked: ").Append(Stacked).Append("\n");
            sb.Append("  RollbackStacked: ").Append(RollbackStacked).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
