/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// CustomEvent
    /// </summary>
    [DataContract(Name = "CustomEvent")]
    public partial class CustomEvent : IValidatableObject
    {
        /// <summary>
        /// The object represented is an &#x60;event&#x60;.
        /// </summary>
        /// <value>The object represented is an &#x60;event&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Event for value: event
            /// </summary>
            [EnumMember(Value = "event")]
            Event = 1
        }


        /// <summary>
        /// The object represented is an &#x60;event&#x60;.
        /// </summary>
        /// <value>The object represented is an &#x60;event&#x60;.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomEvent" /> class.
        /// </summary>
        /// <param name="id">Unique custom event ID..</param>
        /// <param name="varObject">The object represented is an &#x60;event&#x60;..</param>
        /// <param name="type">The event name..</param>
        /// <param name="customer">customer (required).</param>
        /// <param name="referral">referral.</param>
        /// <param name="loyalty">loyalty.</param>
        /// <param name="metadata">A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer object..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the custom event was created. The value is shown in the ISO 8601 format..</param>
        public CustomEvent(string id = default(string), ObjectEnum? varObject = default(ObjectEnum?), string type = default(string), SimpleCustomerRequiredObjectType customer = default(SimpleCustomerRequiredObjectType), CustomEventReferral referral = default(CustomEventReferral), CustomEventLoyalty loyalty = default(CustomEventLoyalty), Object metadata = default(Object), DateTimeOffset? createdAt = default(DateTimeOffset?))
        {
            // to ensure "customer" is required (not null)
            if (customer == null)
            {
                throw new ArgumentNullException("customer is a required property for CustomEvent and cannot be null");
            }
            this._Customer = customer;
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Referral = referral;
            if (this.Referral != null)
            {
                this._flagReferral = true;
            }
            this._Loyalty = loyalty;
            if (this.Loyalty != null)
            {
                this._flagLoyalty = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
        }

        /// <summary>
        /// Unique custom event ID.
        /// </summary>
        /// <value>Unique custom event ID.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The event name.
        /// </summary>
        /// <value>The event name.</value>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private string _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", IsRequired = true, EmitDefaultValue = true)]
        public SimpleCustomerRequiredObjectType Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private SimpleCustomerRequiredObjectType _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets Referral
        /// </summary>
        [DataMember(Name = "referral", EmitDefaultValue = true)]
        public CustomEventReferral Referral
        {
            get{ return _Referral;}
            set
            {
                _Referral = value;
                _flagReferral = true;
            }
        }
        private CustomEventReferral _Referral;
        private bool _flagReferral;

        /// <summary>
        /// Returns false as Referral should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferral()
        {
            return _flagReferral;
        }
        /// <summary>
        /// Gets or Sets Loyalty
        /// </summary>
        [DataMember(Name = "loyalty", EmitDefaultValue = true)]
        public CustomEventLoyalty Loyalty
        {
            get{ return _Loyalty;}
            set
            {
                _Loyalty = value;
                _flagLoyalty = true;
            }
        }
        private CustomEventLoyalty _Loyalty;
        private bool _flagLoyalty;

        /// <summary>
        /// Returns false as Loyalty should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyalty()
        {
            return _flagLoyalty;
        }
        /// <summary>
        /// A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer object.
        /// </summary>
        /// <value>A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer object.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Timestamp representing the date and time when the custom event was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the custom event was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-22T10:13:06.487Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomEvent {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Referral: ").Append(Referral).Append("\n");
            sb.Append("  Loyalty: ").Append(Loyalty).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
