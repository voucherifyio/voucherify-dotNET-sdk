/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Contains information about the config used for the voucher code. Defines the code&#39;s pattern (prefix, postfix, length, charset, etc).
    /// </summary>
    [DataContract(Name = "CodeConfig")]
    public partial class CodeConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeConfig" /> class.
        /// </summary>
        /// <param name="length">Number of characters in a generated code (excluding prefix and postfix)..</param>
        /// <param name="charset">Characters that can appear in the code.    Examples:  - Alphanumeric: &#x60;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Alphabetic: &#x60;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Alphabetic Lowercase: &#x60;abcdefghijklmnopqrstuvwxyz&#x60;  - Alphabetic Uppercase: &#x60;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Numbers: &#x60;0123456789&#x60;   - Custom: a custom character set.</param>
        /// <param name="prefix">A text appended before the code..</param>
        /// <param name="postfix">A text appended after the code..</param>
        /// <param name="pattern">A pattern for codes where hashes (#) will be replaced with random characters. Overrides &#x60;length&#x60;..</param>
        /// <param name="initialCount">Internal value, does not change anything if provided..</param>
        public CodeConfig(decimal? length = default(decimal?), string charset = default(string), string prefix = default(string), string postfix = default(string), string pattern = default(string), int? initialCount = default(int?))
        {
            this._Length = length;
            if (this.Length != null)
            {
                this._flagLength = true;
            }
            this._Charset = charset;
            if (this.Charset != null)
            {
                this._flagCharset = true;
            }
            this._Prefix = prefix;
            if (this.Prefix != null)
            {
                this._flagPrefix = true;
            }
            this._Postfix = postfix;
            if (this.Postfix != null)
            {
                this._flagPostfix = true;
            }
            this._Pattern = pattern;
            if (this.Pattern != null)
            {
                this._flagPattern = true;
            }
            this._InitialCount = initialCount;
            if (this.InitialCount != null)
            {
                this._flagInitialCount = true;
            }
        }

        /// <summary>
        /// Number of characters in a generated code (excluding prefix and postfix).
        /// </summary>
        /// <value>Number of characters in a generated code (excluding prefix and postfix).</value>
        [DataMember(Name = "length", EmitDefaultValue = true)]
        public decimal? Length
        {
            get{ return _Length;}
            set
            {
                _Length = value;
                _flagLength = true;
            }
        }
        private decimal? _Length;
        private bool _flagLength;

        /// <summary>
        /// Returns false as Length should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLength()
        {
            return _flagLength;
        }
        /// <summary>
        /// Characters that can appear in the code.    Examples:  - Alphanumeric: &#x60;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Alphabetic: &#x60;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Alphabetic Lowercase: &#x60;abcdefghijklmnopqrstuvwxyz&#x60;  - Alphabetic Uppercase: &#x60;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Numbers: &#x60;0123456789&#x60;   - Custom: a custom character set
        /// </summary>
        /// <value>Characters that can appear in the code.    Examples:  - Alphanumeric: &#x60;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Alphabetic: &#x60;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Alphabetic Lowercase: &#x60;abcdefghijklmnopqrstuvwxyz&#x60;  - Alphabetic Uppercase: &#x60;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x60;  - Numbers: &#x60;0123456789&#x60;   - Custom: a custom character set</value>
        [DataMember(Name = "charset", EmitDefaultValue = true)]
        public string Charset
        {
            get{ return _Charset;}
            set
            {
                _Charset = value;
                _flagCharset = true;
            }
        }
        private string _Charset;
        private bool _flagCharset;

        /// <summary>
        /// Returns false as Charset should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCharset()
        {
            return _flagCharset;
        }
        /// <summary>
        /// A text appended before the code.
        /// </summary>
        /// <value>A text appended before the code.</value>
        [DataMember(Name = "prefix", EmitDefaultValue = true)]
        public string Prefix
        {
            get{ return _Prefix;}
            set
            {
                _Prefix = value;
                _flagPrefix = true;
            }
        }
        private string _Prefix;
        private bool _flagPrefix;

        /// <summary>
        /// Returns false as Prefix should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePrefix()
        {
            return _flagPrefix;
        }
        /// <summary>
        /// A text appended after the code.
        /// </summary>
        /// <value>A text appended after the code.</value>
        [DataMember(Name = "postfix", EmitDefaultValue = true)]
        public string Postfix
        {
            get{ return _Postfix;}
            set
            {
                _Postfix = value;
                _flagPostfix = true;
            }
        }
        private string _Postfix;
        private bool _flagPostfix;

        /// <summary>
        /// Returns false as Postfix should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostfix()
        {
            return _flagPostfix;
        }
        /// <summary>
        /// A pattern for codes where hashes (#) will be replaced with random characters. Overrides &#x60;length&#x60;.
        /// </summary>
        /// <value>A pattern for codes where hashes (#) will be replaced with random characters. Overrides &#x60;length&#x60;.</value>
        [DataMember(Name = "pattern", EmitDefaultValue = true)]
        public string Pattern
        {
            get{ return _Pattern;}
            set
            {
                _Pattern = value;
                _flagPattern = true;
            }
        }
        private string _Pattern;
        private bool _flagPattern;

        /// <summary>
        /// Returns false as Pattern should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePattern()
        {
            return _flagPattern;
        }
        /// <summary>
        /// Internal value, does not change anything if provided.
        /// </summary>
        /// <value>Internal value, does not change anything if provided.</value>
        [DataMember(Name = "initial_count", EmitDefaultValue = true)]
        public int? InitialCount
        {
            get{ return _InitialCount;}
            set
            {
                _InitialCount = value;
                _flagInitialCount = true;
            }
        }
        private int? _InitialCount;
        private bool _flagInitialCount;

        /// <summary>
        /// Returns false as InitialCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInitialCount()
        {
            return _flagInitialCount;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeConfig {\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Charset: ").Append(Charset).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  Postfix: ").Append(Postfix).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  InitialCount: ").Append(InitialCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
