/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the conditions for the start date of the tier.
    /// </summary>
    [DataContract(Name = "LoyaltyTiersExpirationAllStartDate")]
    public partial class LoyaltyTiersExpirationAllStartDate : IValidatableObject
    {
        /// <summary>
        /// What triggers the tier to be valid for a customer.     &#x60;IMMEDIATE&#x60;: After reaching the minimum required points.  &#x60;NEXT_PERIOD&#x60;: When the next qualification period starts.
        /// </summary>
        /// <value>What triggers the tier to be valid for a customer.     &#x60;IMMEDIATE&#x60;: After reaching the minimum required points.  &#x60;NEXT_PERIOD&#x60;: When the next qualification period starts.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum IMMEDIATE for value: IMMEDIATE
            /// </summary>
            [EnumMember(Value = "IMMEDIATE")]
            IMMEDIATE = 1,

            /// <summary>
            /// Enum NEXTPERIOD for value: NEXT_PERIOD
            /// </summary>
            [EnumMember(Value = "NEXT_PERIOD")]
            NEXTPERIOD = 2
        }


        /// <summary>
        /// What triggers the tier to be valid for a customer.     &#x60;IMMEDIATE&#x60;: After reaching the minimum required points.  &#x60;NEXT_PERIOD&#x60;: When the next qualification period starts.
        /// </summary>
        /// <value>What triggers the tier to be valid for a customer.     &#x60;IMMEDIATE&#x60;: After reaching the minimum required points.  &#x60;NEXT_PERIOD&#x60;: When the next qualification period starts.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTiersExpirationAllStartDate" /> class.
        /// </summary>
        /// <param name="type">What triggers the tier to be valid for a customer.     &#x60;IMMEDIATE&#x60;: After reaching the minimum required points.  &#x60;NEXT_PERIOD&#x60;: When the next qualification period starts..</param>
        public LoyaltyTiersExpirationAllStartDate(TypeEnum? type = default(TypeEnum?))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyTiersExpirationAllStartDate {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
