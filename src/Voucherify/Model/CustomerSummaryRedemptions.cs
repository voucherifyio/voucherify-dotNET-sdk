/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// CustomerSummaryRedemptions
    /// </summary>
    [DataContract(Name = "CustomerSummaryRedemptions")]
    public partial class CustomerSummaryRedemptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerSummaryRedemptions" /> class.
        /// </summary>
        /// <param name="totalRedeemed">Total number of redemptions made by the customer..</param>
        /// <param name="totalFailed">Total number of redemptions that failed..</param>
        /// <param name="totalSucceeded">Total number of redemptions that succeeded..</param>
        /// <param name="totalRolledBack">Total number of redemptions that were rolled back for the customer..</param>
        /// <param name="totalRollbackFailed">Total number of redemption rollbacks that failed..</param>
        /// <param name="totalRollbackSucceeded">Total number of redemption rollbacks that succeeded..</param>
        /// <param name="gift">gift.</param>
        /// <param name="loyaltyCard">loyaltyCard.</param>
        public CustomerSummaryRedemptions(int? totalRedeemed = default(int?), int? totalFailed = default(int?), int? totalSucceeded = default(int?), int? totalRolledBack = default(int?), int? totalRollbackFailed = default(int?), int? totalRollbackSucceeded = default(int?), CustomerSummaryRedemptionsGift gift = default(CustomerSummaryRedemptionsGift), CustomerSummaryRedemptionsLoyaltyCard loyaltyCard = default(CustomerSummaryRedemptionsLoyaltyCard))
        {
            this._TotalRedeemed = totalRedeemed;
            if (this.TotalRedeemed != null)
            {
                this._flagTotalRedeemed = true;
            }
            this._TotalFailed = totalFailed;
            if (this.TotalFailed != null)
            {
                this._flagTotalFailed = true;
            }
            this._TotalSucceeded = totalSucceeded;
            if (this.TotalSucceeded != null)
            {
                this._flagTotalSucceeded = true;
            }
            this._TotalRolledBack = totalRolledBack;
            if (this.TotalRolledBack != null)
            {
                this._flagTotalRolledBack = true;
            }
            this._TotalRollbackFailed = totalRollbackFailed;
            if (this.TotalRollbackFailed != null)
            {
                this._flagTotalRollbackFailed = true;
            }
            this._TotalRollbackSucceeded = totalRollbackSucceeded;
            if (this.TotalRollbackSucceeded != null)
            {
                this._flagTotalRollbackSucceeded = true;
            }
            this._Gift = gift;
            if (this.Gift != null)
            {
                this._flagGift = true;
            }
            this._LoyaltyCard = loyaltyCard;
            if (this.LoyaltyCard != null)
            {
                this._flagLoyaltyCard = true;
            }
        }

        /// <summary>
        /// Total number of redemptions made by the customer.
        /// </summary>
        /// <value>Total number of redemptions made by the customer.</value>
        [DataMember(Name = "total_redeemed", EmitDefaultValue = true)]
        public int? TotalRedeemed
        {
            get{ return _TotalRedeemed;}
            set
            {
                _TotalRedeemed = value;
                _flagTotalRedeemed = true;
            }
        }
        private int? _TotalRedeemed;
        private bool _flagTotalRedeemed;

        /// <summary>
        /// Returns false as TotalRedeemed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalRedeemed()
        {
            return _flagTotalRedeemed;
        }
        /// <summary>
        /// Total number of redemptions that failed.
        /// </summary>
        /// <value>Total number of redemptions that failed.</value>
        [DataMember(Name = "total_failed", EmitDefaultValue = true)]
        public int? TotalFailed
        {
            get{ return _TotalFailed;}
            set
            {
                _TotalFailed = value;
                _flagTotalFailed = true;
            }
        }
        private int? _TotalFailed;
        private bool _flagTotalFailed;

        /// <summary>
        /// Returns false as TotalFailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalFailed()
        {
            return _flagTotalFailed;
        }
        /// <summary>
        /// Total number of redemptions that succeeded.
        /// </summary>
        /// <value>Total number of redemptions that succeeded.</value>
        [DataMember(Name = "total_succeeded", EmitDefaultValue = true)]
        public int? TotalSucceeded
        {
            get{ return _TotalSucceeded;}
            set
            {
                _TotalSucceeded = value;
                _flagTotalSucceeded = true;
            }
        }
        private int? _TotalSucceeded;
        private bool _flagTotalSucceeded;

        /// <summary>
        /// Returns false as TotalSucceeded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalSucceeded()
        {
            return _flagTotalSucceeded;
        }
        /// <summary>
        /// Total number of redemptions that were rolled back for the customer.
        /// </summary>
        /// <value>Total number of redemptions that were rolled back for the customer.</value>
        [DataMember(Name = "total_rolled_back", EmitDefaultValue = true)]
        public int? TotalRolledBack
        {
            get{ return _TotalRolledBack;}
            set
            {
                _TotalRolledBack = value;
                _flagTotalRolledBack = true;
            }
        }
        private int? _TotalRolledBack;
        private bool _flagTotalRolledBack;

        /// <summary>
        /// Returns false as TotalRolledBack should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalRolledBack()
        {
            return _flagTotalRolledBack;
        }
        /// <summary>
        /// Total number of redemption rollbacks that failed.
        /// </summary>
        /// <value>Total number of redemption rollbacks that failed.</value>
        [DataMember(Name = "total_rollback_failed", EmitDefaultValue = true)]
        public int? TotalRollbackFailed
        {
            get{ return _TotalRollbackFailed;}
            set
            {
                _TotalRollbackFailed = value;
                _flagTotalRollbackFailed = true;
            }
        }
        private int? _TotalRollbackFailed;
        private bool _flagTotalRollbackFailed;

        /// <summary>
        /// Returns false as TotalRollbackFailed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalRollbackFailed()
        {
            return _flagTotalRollbackFailed;
        }
        /// <summary>
        /// Total number of redemption rollbacks that succeeded.
        /// </summary>
        /// <value>Total number of redemption rollbacks that succeeded.</value>
        [DataMember(Name = "total_rollback_succeeded", EmitDefaultValue = true)]
        public int? TotalRollbackSucceeded
        {
            get{ return _TotalRollbackSucceeded;}
            set
            {
                _TotalRollbackSucceeded = value;
                _flagTotalRollbackSucceeded = true;
            }
        }
        private int? _TotalRollbackSucceeded;
        private bool _flagTotalRollbackSucceeded;

        /// <summary>
        /// Returns false as TotalRollbackSucceeded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalRollbackSucceeded()
        {
            return _flagTotalRollbackSucceeded;
        }
        /// <summary>
        /// Gets or Sets Gift
        /// </summary>
        [DataMember(Name = "gift", EmitDefaultValue = true)]
        public CustomerSummaryRedemptionsGift Gift
        {
            get{ return _Gift;}
            set
            {
                _Gift = value;
                _flagGift = true;
            }
        }
        private CustomerSummaryRedemptionsGift _Gift;
        private bool _flagGift;

        /// <summary>
        /// Returns false as Gift should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeGift()
        {
            return _flagGift;
        }
        /// <summary>
        /// Gets or Sets LoyaltyCard
        /// </summary>
        [DataMember(Name = "loyalty_card", EmitDefaultValue = true)]
        public CustomerSummaryRedemptionsLoyaltyCard LoyaltyCard
        {
            get{ return _LoyaltyCard;}
            set
            {
                _LoyaltyCard = value;
                _flagLoyaltyCard = true;
            }
        }
        private CustomerSummaryRedemptionsLoyaltyCard _LoyaltyCard;
        private bool _flagLoyaltyCard;

        /// <summary>
        /// Returns false as LoyaltyCard should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyCard()
        {
            return _flagLoyaltyCard;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerSummaryRedemptions {\n");
            sb.Append("  TotalRedeemed: ").Append(TotalRedeemed).Append("\n");
            sb.Append("  TotalFailed: ").Append(TotalFailed).Append("\n");
            sb.Append("  TotalSucceeded: ").Append(TotalSucceeded).Append("\n");
            sb.Append("  TotalRolledBack: ").Append(TotalRolledBack).Append("\n");
            sb.Append("  TotalRollbackFailed: ").Append(TotalRollbackFailed).Append("\n");
            sb.Append("  TotalRollbackSucceeded: ").Append(TotalRollbackSucceeded).Append("\n");
            sb.Append("  Gift: ").Append(Gift).Append("\n");
            sb.Append("  LoyaltyCard: ").Append(LoyaltyCard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
