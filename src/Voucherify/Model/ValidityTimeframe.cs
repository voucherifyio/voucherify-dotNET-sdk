/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.&#x60;start_date&#x60; **required** when including the &#x60;validity_timeframe&#x60;.
    /// </summary>
    [DataContract(Name = "ValidityTimeframe")]
    public partial class ValidityTimeframe : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidityTimeframe" /> class.
        /// </summary>
        /// <param name="duration">Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a &#x60;duration&#x60; of &#x60;PT1H&#x60; will be valid for a duration of one hour..</param>
        /// <param name="interval">Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an &#x60;interval&#x60; of &#x60;P2D&#x60; will be valid every other day..</param>
        public ValidityTimeframe(string duration = default(string), string interval = default(string))
        {
            this._Duration = duration;
            if (this.Duration != null)
            {
                this._flagDuration = true;
            }
            this._Interval = interval;
            if (this.Interval != null)
            {
                this._flagInterval = true;
            }
        }

        /// <summary>
        /// Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a &#x60;duration&#x60; of &#x60;PT1H&#x60; will be valid for a duration of one hour.
        /// </summary>
        /// <value>Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a &#x60;duration&#x60; of &#x60;PT1H&#x60; will be valid for a duration of one hour.</value>
        /*
        <example>PT1H</example>
        */
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public string Duration
        {
            get{ return _Duration;}
            set
            {
                _Duration = value;
                _flagDuration = true;
            }
        }
        private string _Duration;
        private bool _flagDuration;

        /// <summary>
        /// Returns false as Duration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDuration()
        {
            return _flagDuration;
        }
        /// <summary>
        /// Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an &#x60;interval&#x60; of &#x60;P2D&#x60; will be valid every other day.
        /// </summary>
        /// <value>Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an &#x60;interval&#x60; of &#x60;P2D&#x60; will be valid every other day.</value>
        /*
        <example>P2D</example>
        */
        [DataMember(Name = "interval", EmitDefaultValue = true)]
        public string Interval
        {
            get{ return _Interval;}
            set
            {
                _Interval = value;
                _flagInterval = true;
            }
        }
        private string _Interval;
        private bool _flagInterval;

        /// <summary>
        /// Returns false as Interval should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInterval()
        {
            return _flagInterval;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidityTimeframe {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
