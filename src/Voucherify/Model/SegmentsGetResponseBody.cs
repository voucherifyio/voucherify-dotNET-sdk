/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **GET** &#x60;v1/v1/segments/{segmentId}&#x60;.
    /// </summary>
    [DataContract(Name = "SegmentsGetResponseBody")]
    public partial class SegmentsGetResponseBody : IValidatableObject
    {
        /// <summary>
        /// Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers).
        /// </summary>
        /// <value>Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum AutoUpdate for value: auto-update
            /// </summary>
            [EnumMember(Value = "auto-update")]
            AutoUpdate = 1,

            /// <summary>
            /// Enum Static for value: static
            /// </summary>
            [EnumMember(Value = "static")]
            Static = 2
        }


        /// <summary>
        /// Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers).
        /// </summary>
        /// <value>Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers).</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Defines InitialSyncStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InitialSyncStatusEnum
        {
            /// <summary>
            /// Enum INPROGRESS for value: IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "IN_PROGRESS")]
            INPROGRESS = 1,

            /// <summary>
            /// Enum DONE for value: DONE
            /// </summary>
            [EnumMember(Value = "DONE")]
            DONE = 2
        }


        /// <summary>
        /// Gets or Sets InitialSyncStatus
        /// </summary>

        [DataMember(Name = "initial_sync_status", EmitDefaultValue = true)]
        public InitialSyncStatusEnum? InitialSyncStatus
        {
            get{ return _InitialSyncStatus;}
            set
            {
                _InitialSyncStatus = value;
                _flagInitialSyncStatus = true;
            }
        }
        private InitialSyncStatusEnum? _InitialSyncStatus;
        private bool _flagInitialSyncStatus;

        /// <summary>
        /// Returns false as InitialSyncStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInitialSyncStatus()
        {
            return _flagInitialSyncStatus;
        }
        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the customer segment.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the customer segment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Segment for value: segment
            /// </summary>
            [EnumMember(Value = "segment")]
            Segment = 1
        }


        /// <summary>
        /// The type of the object represented by JSON. This object stores information about the customer segment.
        /// </summary>
        /// <value>The type of the object represented by JSON. This object stores information about the customer segment.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsGetResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique segment ID..</param>
        /// <param name="name">Segment name..</param>
        /// <param name="createdAt">Timestamp representing the date and time when the segment was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="type">Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers)..</param>
        /// <param name="filter">Defines a set of criteria for an &#x60;auto-update&#x60; segment type.  .</param>
        /// <param name="initialSyncStatus">initialSyncStatus.</param>
        /// <param name="varObject">The type of the object represented by JSON. This object stores information about the customer segment. (default to ObjectEnum.Segment).</param>
        public SegmentsGetResponseBody(string id = default(string), string name = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), TypeEnum? type = default(TypeEnum?), Object filter = default(Object), InitialSyncStatusEnum? initialSyncStatus = default(InitialSyncStatusEnum?), ObjectEnum? varObject = ObjectEnum.Segment)
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Filter = filter;
            if (this.Filter != null)
            {
                this._flagFilter = true;
            }
            this._InitialSyncStatus = initialSyncStatus;
            if (this.InitialSyncStatus != null)
            {
                this._flagInitialSyncStatus = true;
            }
        }

        /// <summary>
        /// Unique segment ID.
        /// </summary>
        /// <value>Unique segment ID.</value>
        /*
        <example>seg_1wc52c5z6r1kQ81brO8j9Hk2</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Segment name.
        /// </summary>
        /// <value>Segment name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Timestamp representing the date and time when the segment was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the segment was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-05-12T13:01:56.896Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Defines a set of criteria for an &#x60;auto-update&#x60; segment type.  
        /// </summary>
        /// <value>Defines a set of criteria for an &#x60;auto-update&#x60; segment type.  </value>
        [DataMember(Name = "filter", EmitDefaultValue = true)]
        public Object Filter
        {
            get{ return _Filter;}
            set
            {
                _Filter = value;
                _flagFilter = true;
            }
        }
        private Object _Filter;
        private bool _flagFilter;

        /// <summary>
        /// Returns false as Filter should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFilter()
        {
            return _flagFilter;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SegmentsGetResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  InitialSyncStatus: ").Append(InitialSyncStatus).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
