/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Statistics summarizing the number of related information that was deleted.
    /// </summary>
    [DataContract(Name = "CustomersPermanentDeletionCreateResponseBodyDataJson")]
    public partial class CustomersPermanentDeletionCreateResponseBodyDataJson : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersPermanentDeletionCreateResponseBodyDataJson" /> class.
        /// </summary>
        /// <param name="events">Number of events deleted..</param>
        /// <param name="customerEvents">Number of customer events deleted..</param>
        /// <param name="dailyEvents">Number of daily events deleted..</param>
        /// <param name="segments">Number of segments deleted..</param>
        /// <param name="orders">Number of orders deleted..</param>
        /// <param name="orderEvents">Number of order events deleted..</param>
        /// <param name="customer">Number of customers deleted..</param>
        public CustomersPermanentDeletionCreateResponseBodyDataJson(int? events = default(int?), int? customerEvents = default(int?), int? dailyEvents = default(int?), int? segments = default(int?), int? orders = default(int?), int? orderEvents = default(int?), int? customer = default(int?))
        {
            this._Events = events;
            if (this.Events != null)
            {
                this._flagEvents = true;
            }
            this._CustomerEvents = customerEvents;
            if (this.CustomerEvents != null)
            {
                this._flagCustomerEvents = true;
            }
            this._DailyEvents = dailyEvents;
            if (this.DailyEvents != null)
            {
                this._flagDailyEvents = true;
            }
            this._Segments = segments;
            if (this.Segments != null)
            {
                this._flagSegments = true;
            }
            this._Orders = orders;
            if (this.Orders != null)
            {
                this._flagOrders = true;
            }
            this._OrderEvents = orderEvents;
            if (this.OrderEvents != null)
            {
                this._flagOrderEvents = true;
            }
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
        }

        /// <summary>
        /// Number of events deleted.
        /// </summary>
        /// <value>Number of events deleted.</value>
        [DataMember(Name = "events", EmitDefaultValue = true)]
        public int? Events
        {
            get{ return _Events;}
            set
            {
                _Events = value;
                _flagEvents = true;
            }
        }
        private int? _Events;
        private bool _flagEvents;

        /// <summary>
        /// Returns false as Events should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvents()
        {
            return _flagEvents;
        }
        /// <summary>
        /// Number of customer events deleted.
        /// </summary>
        /// <value>Number of customer events deleted.</value>
        [DataMember(Name = "customer_events", EmitDefaultValue = true)]
        public int? CustomerEvents
        {
            get{ return _CustomerEvents;}
            set
            {
                _CustomerEvents = value;
                _flagCustomerEvents = true;
            }
        }
        private int? _CustomerEvents;
        private bool _flagCustomerEvents;

        /// <summary>
        /// Returns false as CustomerEvents should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerEvents()
        {
            return _flagCustomerEvents;
        }
        /// <summary>
        /// Number of daily events deleted.
        /// </summary>
        /// <value>Number of daily events deleted.</value>
        [DataMember(Name = "daily_events", EmitDefaultValue = true)]
        public int? DailyEvents
        {
            get{ return _DailyEvents;}
            set
            {
                _DailyEvents = value;
                _flagDailyEvents = true;
            }
        }
        private int? _DailyEvents;
        private bool _flagDailyEvents;

        /// <summary>
        /// Returns false as DailyEvents should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDailyEvents()
        {
            return _flagDailyEvents;
        }
        /// <summary>
        /// Number of segments deleted.
        /// </summary>
        /// <value>Number of segments deleted.</value>
        [DataMember(Name = "segments", EmitDefaultValue = true)]
        public int? Segments
        {
            get{ return _Segments;}
            set
            {
                _Segments = value;
                _flagSegments = true;
            }
        }
        private int? _Segments;
        private bool _flagSegments;

        /// <summary>
        /// Returns false as Segments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSegments()
        {
            return _flagSegments;
        }
        /// <summary>
        /// Number of orders deleted.
        /// </summary>
        /// <value>Number of orders deleted.</value>
        [DataMember(Name = "orders", EmitDefaultValue = true)]
        public int? Orders
        {
            get{ return _Orders;}
            set
            {
                _Orders = value;
                _flagOrders = true;
            }
        }
        private int? _Orders;
        private bool _flagOrders;

        /// <summary>
        /// Returns false as Orders should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrders()
        {
            return _flagOrders;
        }
        /// <summary>
        /// Number of order events deleted.
        /// </summary>
        /// <value>Number of order events deleted.</value>
        [DataMember(Name = "order_events", EmitDefaultValue = true)]
        public int? OrderEvents
        {
            get{ return _OrderEvents;}
            set
            {
                _OrderEvents = value;
                _flagOrderEvents = true;
            }
        }
        private int? _OrderEvents;
        private bool _flagOrderEvents;

        /// <summary>
        /// Returns false as OrderEvents should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrderEvents()
        {
            return _flagOrderEvents;
        }
        /// <summary>
        /// Number of customers deleted.
        /// </summary>
        /// <value>Number of customers deleted.</value>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public int? Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private int? _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomersPermanentDeletionCreateResponseBodyDataJson {\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  CustomerEvents: ").Append(CustomerEvents).Append("\n");
            sb.Append("  DailyEvents: ").Append(DailyEvents).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  Orders: ").Append(Orders).Append("\n");
            sb.Append("  OrderEvents: ").Append(OrderEvents).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
