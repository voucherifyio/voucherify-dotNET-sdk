/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Contains the source of the object that initiated the event.
    /// </summary>
    [DataContract(Name = "EventSource")]
    public partial class EventSource : IValidatableObject
    {
        /// <summary>
        /// Determines the channel that initiated the event.
        /// </summary>
        /// <value>Determines the channel that initiated the event.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum USERPORTAL for value: USER_PORTAL
            /// </summary>
            [EnumMember(Value = "USER_PORTAL")]
            USERPORTAL = 1,

            /// <summary>
            /// Enum API for value: API
            /// </summary>
            [EnumMember(Value = "API")]
            API = 2,

            /// <summary>
            /// Enum CLIENTAPI for value: CLIENT_API
            /// </summary>
            [EnumMember(Value = "CLIENT_API")]
            CLIENTAPI = 3,

            /// <summary>
            /// Enum INTERNAL for value: INTERNAL
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNAL = 4
        }


        /// <summary>
        /// Determines the channel that initiated the event.
        /// </summary>
        /// <value>Determines the channel that initiated the event.</value>
        /*
        <example>API</example>
        */

        [DataMember(Name = "channel", EmitDefaultValue = true)]
        public ChannelEnum? Channel
        {
            get{ return _Channel;}
            set
            {
                _Channel = value;
                _flagChannel = true;
            }
        }
        private ChannelEnum? _Channel;
        private bool _flagChannel;

        /// <summary>
        /// Returns false as Channel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChannel()
        {
            return _flagChannel;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventSource" /> class.
        /// </summary>
        /// <param name="channel">Determines the channel that initiated the event..</param>
        /// <param name="user">user.</param>
        /// <param name="apiKey">apiKey.</param>
        public EventSource(ChannelEnum? channel = default(ChannelEnum?), EventSourceUser user = default(EventSourceUser), EventSourceApiKey apiKey = default(EventSourceApiKey))
        {
            this._Channel = channel;
            if (this.Channel != null)
            {
                this._flagChannel = true;
            }
            this._User = user;
            if (this.User != null)
            {
                this._flagUser = true;
            }
            this._ApiKey = apiKey;
            if (this.ApiKey != null)
            {
                this._flagApiKey = true;
            }
        }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public EventSourceUser User
        {
            get{ return _User;}
            set
            {
                _User = value;
                _flagUser = true;
            }
        }
        private EventSourceUser _User;
        private bool _flagUser;

        /// <summary>
        /// Returns false as User should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUser()
        {
            return _flagUser;
        }
        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name = "api_key", EmitDefaultValue = true)]
        public EventSourceApiKey ApiKey
        {
            get{ return _ApiKey;}
            set
            {
                _ApiKey = value;
                _flagApiKey = true;
            }
        }
        private EventSourceApiKey _ApiKey;
        private bool _flagApiKey;

        /// <summary>
        /// Returns false as ApiKey should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApiKey()
        {
            return _flagApiKey;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventSource {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
