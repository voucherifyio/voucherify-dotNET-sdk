/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ParameterFiltersListReferralsRedeemableHolders
    /// </summary>
    [DataContract(Name = "ParameterFiltersListReferralsRedeemableHolders")]
    public partial class ParameterFiltersListReferralsRedeemableHolders : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Junction
        /// </summary>

        [DataMember(Name = "junction", EmitDefaultValue = true)]
        public Junction? Junction
        {
            get{ return _Junction;}
            set
            {
                _Junction = value;
                _flagJunction = true;
            }
        }
        private Junction? _Junction;
        private bool _flagJunction;

        /// <summary>
        /// Returns false as Junction should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeJunction()
        {
            return _flagJunction;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterFiltersListReferralsRedeemableHolders" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="holderRole">holderRole.</param>
        /// <param name="customerId">customerId.</param>
        /// <param name="junction">junction.</param>
        public ParameterFiltersListReferralsRedeemableHolders(ParameterFiltersListReferralsRedeemableHoldersId id = default(ParameterFiltersListReferralsRedeemableHoldersId), ParameterFiltersListReferralsRedeemableHoldersCreatedAt createdAt = default(ParameterFiltersListReferralsRedeemableHoldersCreatedAt), ParameterFiltersListReferralsRedeemableHoldersHolderRole holderRole = default(ParameterFiltersListReferralsRedeemableHoldersHolderRole), ParameterFiltersListReferralsRedeemableHoldersCustomerId customerId = default(ParameterFiltersListReferralsRedeemableHoldersCustomerId), Junction? junction = default(Junction?))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._HolderRole = holderRole;
            if (this.HolderRole != null)
            {
                this._flagHolderRole = true;
            }
            this._CustomerId = customerId;
            if (this.CustomerId != null)
            {
                this._flagCustomerId = true;
            }
            this._Junction = junction;
            if (this.Junction != null)
            {
                this._flagJunction = true;
            }
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public ParameterFiltersListReferralsRedeemableHoldersId Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private ParameterFiltersListReferralsRedeemableHoldersId _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public ParameterFiltersListReferralsRedeemableHoldersCreatedAt CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private ParameterFiltersListReferralsRedeemableHoldersCreatedAt _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Gets or Sets HolderRole
        /// </summary>
        [DataMember(Name = "holder_role", EmitDefaultValue = true)]
        public ParameterFiltersListReferralsRedeemableHoldersHolderRole HolderRole
        {
            get{ return _HolderRole;}
            set
            {
                _HolderRole = value;
                _flagHolderRole = true;
            }
        }
        private ParameterFiltersListReferralsRedeemableHoldersHolderRole _HolderRole;
        private bool _flagHolderRole;

        /// <summary>
        /// Returns false as HolderRole should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHolderRole()
        {
            return _flagHolderRole;
        }
        /// <summary>
        /// Gets or Sets CustomerId
        /// </summary>
        [DataMember(Name = "customer_id", EmitDefaultValue = true)]
        public ParameterFiltersListReferralsRedeemableHoldersCustomerId CustomerId
        {
            get{ return _CustomerId;}
            set
            {
                _CustomerId = value;
                _flagCustomerId = true;
            }
        }
        private ParameterFiltersListReferralsRedeemableHoldersCustomerId _CustomerId;
        private bool _flagCustomerId;

        /// <summary>
        /// Returns false as CustomerId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerId()
        {
            return _flagCustomerId;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterFiltersListReferralsRedeemableHolders {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  HolderRole: ").Append(HolderRole).Append("\n");
            sb.Append("  CustomerId: ").Append(CustomerId).Append("\n");
            sb.Append("  Junction: ").Append(Junction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
