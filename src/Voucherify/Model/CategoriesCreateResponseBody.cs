/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Response body schema for **POST** &#x60;v1/categories&#x60;.
    /// </summary>
    [DataContract(Name = "CategoriesCreateResponseBody")]
    public partial class CategoriesCreateResponseBody : IValidatableObject
    {
        /// <summary>
        /// Defines Object
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Category for value: category
            /// </summary>
            [EnumMember(Value = "category")]
            Category = 1
        }


        /// <summary>
        /// Gets or Sets Object
        /// </summary>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CategoriesCreateResponseBody" /> class.
        /// </summary>
        /// <param name="id">Unique category ID assigned by Voucherify..</param>
        /// <param name="name">Category name..</param>
        /// <param name="hierarchy">Category hierarchy. Categories with lower hierarchy are processed before categories with higher hierarchy value..</param>
        /// <param name="varObject">varObject.</param>
        /// <param name="createdAt">Timestamp representing the date and time when the category was created. The value is shown in the ISO 8601 format..</param>
        public CategoriesCreateResponseBody(string id = default(string), string name = default(string), int? hierarchy = default(int?), ObjectEnum? varObject = default(ObjectEnum?), DateTimeOffset? createdAt = default(DateTimeOffset?))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Hierarchy = hierarchy;
            if (this.Hierarchy != null)
            {
                this._flagHierarchy = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
        }

        /// <summary>
        /// Unique category ID assigned by Voucherify.
        /// </summary>
        /// <value>Unique category ID assigned by Voucherify.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Category name.
        /// </summary>
        /// <value>Category name.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Category hierarchy. Categories with lower hierarchy are processed before categories with higher hierarchy value.
        /// </summary>
        /// <value>Category hierarchy. Categories with lower hierarchy are processed before categories with higher hierarchy value.</value>
        [DataMember(Name = "hierarchy", EmitDefaultValue = true)]
        public int? Hierarchy
        {
            get{ return _Hierarchy;}
            set
            {
                _Hierarchy = value;
                _flagHierarchy = true;
            }
        }
        private int? _Hierarchy;
        private bool _flagHierarchy;

        /// <summary>
        /// Returns false as Hierarchy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHierarchy()
        {
            return _flagHierarchy;
        }
        /// <summary>
        /// Timestamp representing the date and time when the category was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the category was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-07-14T10:45:13.156Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CategoriesCreateResponseBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Hierarchy (int?) minimum
            if (this.Hierarchy < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Hierarchy, must be a value greater than or equal to 0.", new [] { "Hierarchy" });
            }

            yield break;
        }
    }

}
