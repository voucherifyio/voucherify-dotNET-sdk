/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// RedemptionRewardResult
    /// </summary>
    [DataContract(Name = "RedemptionRewardResult")]
    public partial class RedemptionRewardResult : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by the JSON
        /// </summary>
        /// <value>The type of the object represented by the JSON</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Reward for value: reward
            /// </summary>
            [EnumMember(Value = "reward")]
            Reward = 1
        }


        /// <summary>
        /// The type of the object represented by the JSON
        /// </summary>
        /// <value>The type of the object represented by the JSON</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Reward type.
        /// </summary>
        /// <value>Reward type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum CAMPAIGN for value: CAMPAIGN
            /// </summary>
            [EnumMember(Value = "CAMPAIGN")]
            CAMPAIGN = 1,

            /// <summary>
            /// Enum COIN for value: COIN
            /// </summary>
            [EnumMember(Value = "COIN")]
            COIN = 2,

            /// <summary>
            /// Enum MATERIAL for value: MATERIAL
            /// </summary>
            [EnumMember(Value = "MATERIAL")]
            MATERIAL = 3
        }


        /// <summary>
        /// Reward type.
        /// </summary>
        /// <value>Reward type.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionRewardResult" /> class.
        /// </summary>
        /// <param name="customer">customer.</param>
        /// <param name="assignmentId">Unique reward assignment ID assigned by Voucherify..</param>
        /// <param name="voucher">voucher.</param>
        /// <param name="product">product.</param>
        /// <param name="sku">sku.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID assigned by Voucherify..</param>
        /// <param name="id">Unique reward ID..</param>
        /// <param name="name">Name of the reward..</param>
        /// <param name="varObject">The type of the object represented by the JSON.</param>
        /// <param name="createdAt">Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp in ISO 8601 format indicating when the reward was updated..</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="metadata">A set of custom key/value pairs that you can attach to a reward. The metadata object stores all custom attributes assigned to the reward..</param>
        /// <param name="type">Reward type..</param>
        public RedemptionRewardResult(SimpleCustomer customer = default(SimpleCustomer), string assignmentId = default(string), Voucher voucher = default(Voucher), Product product = default(Product), Sku sku = default(Sku), string loyaltyTierId = default(string), string id = default(string), string name = default(string), ObjectEnum? varObject = default(ObjectEnum?), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), RedemptionRewardResultParameters parameters = default(RedemptionRewardResultParameters), Object metadata = default(Object), TypeEnum? type = default(TypeEnum?))
        {
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._AssignmentId = assignmentId;
            if (this.AssignmentId != null)
            {
                this._flagAssignmentId = true;
            }
            this._Voucher = voucher;
            if (this.Voucher != null)
            {
                this._flagVoucher = true;
            }
            this._Product = product;
            if (this.Product != null)
            {
                this._flagProduct = true;
            }
            this._Sku = sku;
            if (this.Sku != null)
            {
                this._flagSku = true;
            }
            this._LoyaltyTierId = loyaltyTierId;
            if (this.LoyaltyTierId != null)
            {
                this._flagLoyaltyTierId = true;
            }
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._Name = name;
            if (this.Name != null)
            {
                this._flagName = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._Parameters = parameters;
            if (this.Parameters != null)
            {
                this._flagParameters = true;
            }
            this._Metadata = metadata;
            if (this.Metadata != null)
            {
                this._flagMetadata = true;
            }
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
        }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public SimpleCustomer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private SimpleCustomer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Unique reward assignment ID assigned by Voucherify.
        /// </summary>
        /// <value>Unique reward assignment ID assigned by Voucherify.</value>
        [DataMember(Name = "assignment_id", EmitDefaultValue = true)]
        public string AssignmentId
        {
            get{ return _AssignmentId;}
            set
            {
                _AssignmentId = value;
                _flagAssignmentId = true;
            }
        }
        private string _AssignmentId;
        private bool _flagAssignmentId;

        /// <summary>
        /// Returns false as AssignmentId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAssignmentId()
        {
            return _flagAssignmentId;
        }
        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", EmitDefaultValue = true)]
        public Voucher Voucher
        {
            get{ return _Voucher;}
            set
            {
                _Voucher = value;
                _flagVoucher = true;
            }
        }
        private Voucher _Voucher;
        private bool _flagVoucher;

        /// <summary>
        /// Returns false as Voucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucher()
        {
            return _flagVoucher;
        }
        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name = "product", EmitDefaultValue = true)]
        public Product Product
        {
            get{ return _Product;}
            set
            {
                _Product = value;
                _flagProduct = true;
            }
        }
        private Product _Product;
        private bool _flagProduct;

        /// <summary>
        /// Returns false as Product should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProduct()
        {
            return _flagProduct;
        }
        /// <summary>
        /// Gets or Sets Sku
        /// </summary>
        [DataMember(Name = "sku", EmitDefaultValue = true)]
        public Sku Sku
        {
            get{ return _Sku;}
            set
            {
                _Sku = value;
                _flagSku = true;
            }
        }
        private Sku _Sku;
        private bool _flagSku;

        /// <summary>
        /// Returns false as Sku should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSku()
        {
            return _flagSku;
        }
        /// <summary>
        /// Unique loyalty tier ID assigned by Voucherify.
        /// </summary>
        /// <value>Unique loyalty tier ID assigned by Voucherify.</value>
        [DataMember(Name = "loyalty_tier_id", EmitDefaultValue = true)]
        public string LoyaltyTierId
        {
            get{ return _LoyaltyTierId;}
            set
            {
                _LoyaltyTierId = value;
                _flagLoyaltyTierId = true;
            }
        }
        private string _LoyaltyTierId;
        private bool _flagLoyaltyTierId;

        /// <summary>
        /// Returns false as LoyaltyTierId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTierId()
        {
            return _flagLoyaltyTierId;
        }
        /// <summary>
        /// Unique reward ID.
        /// </summary>
        /// <value>Unique reward ID.</value>
        /*
        <example>rew_0bc92f81a6801f9bca</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Name of the reward.
        /// </summary>
        /// <value>Name of the reward.</value>
        /*
        <example>Reward Name</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name
        {
            get{ return _Name;}
            set
            {
                _Name = value;
                _flagName = true;
            }
        }
        private string _Name;
        private bool _flagName;

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return _flagName;
        }
        /// <summary>
        /// Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2021-12-22T10:13:06.487Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp in ISO 8601 format indicating when the reward was updated.
        /// </summary>
        /// <value>Timestamp in ISO 8601 format indicating when the reward was updated.</value>
        /*
        <example>2022-10-03T12:24:58.008Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = true)]
        public RedemptionRewardResultParameters Parameters
        {
            get{ return _Parameters;}
            set
            {
                _Parameters = value;
                _flagParameters = true;
            }
        }
        private RedemptionRewardResultParameters _Parameters;
        private bool _flagParameters;

        /// <summary>
        /// Returns false as Parameters should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParameters()
        {
            return _flagParameters;
        }
        /// <summary>
        /// A set of custom key/value pairs that you can attach to a reward. The metadata object stores all custom attributes assigned to the reward.
        /// </summary>
        /// <value>A set of custom key/value pairs that you can attach to a reward. The metadata object stores all custom attributes assigned to the reward.</value>
        [DataMember(Name = "metadata", EmitDefaultValue = true)]
        public Object Metadata
        {
            get{ return _Metadata;}
            set
            {
                _Metadata = value;
                _flagMetadata = true;
            }
        }
        private Object _Metadata;
        private bool _flagMetadata;

        /// <summary>
        /// Returns false as Metadata should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMetadata()
        {
            return _flagMetadata;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RedemptionRewardResult {\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  AssignmentId: ").Append(AssignmentId).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Sku: ").Append(Sku).Append("\n");
            sb.Append("  LoyaltyTierId: ").Append(LoyaltyTierId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
