/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// UsageNotifications
    /// </summary>
    [DataContract(Name = "UsageNotifications")]
    public partial class UsageNotifications : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UsageNotifications" /> class.
        /// </summary>
        /// <param name="enabled">Enables the notification..</param>
        /// <param name="value">The percent value of the limit which, when reached, triggers the notification..</param>
        /// <param name="inApp">Enables the notification in the application..</param>
        /// <param name="emails">An array of email addresses which will receive the notification..</param>
        public UsageNotifications(bool? enabled = default(bool?), int? value = default(int?), bool? inApp = default(bool?), List<string> emails = default(List<string>))
        {
            this._Enabled = enabled;
            if (this.Enabled != null)
            {
                this._flagEnabled = true;
            }
            this._Value = value;
            if (this.Value != null)
            {
                this._flagValue = true;
            }
            this._InApp = inApp;
            if (this.InApp != null)
            {
                this._flagInApp = true;
            }
            this._Emails = emails;
            if (this.Emails != null)
            {
                this._flagEmails = true;
            }
        }

        /// <summary>
        /// Enables the notification.
        /// </summary>
        /// <value>Enables the notification.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled
        {
            get{ return _Enabled;}
            set
            {
                _Enabled = value;
                _flagEnabled = true;
            }
        }
        private bool? _Enabled;
        private bool _flagEnabled;

        /// <summary>
        /// Returns false as Enabled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEnabled()
        {
            return _flagEnabled;
        }
        /// <summary>
        /// The percent value of the limit which, when reached, triggers the notification.
        /// </summary>
        /// <value>The percent value of the limit which, when reached, triggers the notification.</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public int? Value
        {
            get{ return _Value;}
            set
            {
                _Value = value;
                _flagValue = true;
            }
        }
        private int? _Value;
        private bool _flagValue;

        /// <summary>
        /// Returns false as Value should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValue()
        {
            return _flagValue;
        }
        /// <summary>
        /// Enables the notification in the application.
        /// </summary>
        /// <value>Enables the notification in the application.</value>
        [DataMember(Name = "in_app", EmitDefaultValue = true)]
        public bool? InApp
        {
            get{ return _InApp;}
            set
            {
                _InApp = value;
                _flagInApp = true;
            }
        }
        private bool? _InApp;
        private bool _flagInApp;

        /// <summary>
        /// Returns false as InApp should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInApp()
        {
            return _flagInApp;
        }
        /// <summary>
        /// An array of email addresses which will receive the notification.
        /// </summary>
        /// <value>An array of email addresses which will receive the notification.</value>
        [DataMember(Name = "emails", EmitDefaultValue = true)]
        public List<string> Emails
        {
            get{ return _Emails;}
            set
            {
                _Emails = value;
                _flagEmails = true;
            }
        }
        private List<string> _Emails;
        private bool _flagEmails;

        /// <summary>
        /// Returns false as Emails should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmails()
        {
            return _flagEmails;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UsageNotifications {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  InApp: ").Append(InApp).Append("\n");
            sb.Append("  Emails: ").Append(Emails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Value (int?) maximum
            if (this.Value > (int?)90)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value less than or equal to 90.", new [] { "Value" });
            }

            // Value (int?) minimum
            if (this.Value < (int?)10)
            {
                yield return new ValidationResult("Invalid value for Value, must be a value greater than or equal to 10.", new [] { "Value" });
            }

            yield break;
        }
    }

}
