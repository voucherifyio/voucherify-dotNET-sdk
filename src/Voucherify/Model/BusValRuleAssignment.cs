/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Assignments of business validation rule
    /// </summary>
    [DataContract(Name = "BusValRuleAssignment")]
    public partial class BusValRuleAssignment : IValidatableObject
    {
        /// <summary>
        /// The type of the object represented by JSON.
        /// </summary>
        /// <value>The type of the object represented by JSON.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum ValidationRulesAssignment for value: validation_rules_assignment
            /// </summary>
            [EnumMember(Value = "validation_rules_assignment")]
            ValidationRulesAssignment = 1
        }


        /// <summary>
        /// The type of the object represented by JSON.
        /// </summary>
        /// <value>The type of the object represented by JSON.</value>

        [DataMember(Name = "object", EmitDefaultValue = true)]
        public ObjectEnum? Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum? _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// The validation status of the assignment
        /// </summary>
        /// <value>The validation status of the assignment</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ValidationStatusEnum
        {
            /// <summary>
            /// Enum VALID for value: VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALID = 1,

            /// <summary>
            /// Enum PARTIALLYVALID for value: PARTIALLY_VALID
            /// </summary>
            [EnumMember(Value = "PARTIALLY_VALID")]
            PARTIALLYVALID = 2,

            /// <summary>
            /// Enum INVALID for value: INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALID = 3
        }


        /// <summary>
        /// The validation status of the assignment
        /// </summary>
        /// <value>The validation status of the assignment</value>

        [DataMember(Name = "validation_status", EmitDefaultValue = true)]
        public ValidationStatusEnum? ValidationStatus
        {
            get{ return _ValidationStatus;}
            set
            {
                _ValidationStatus = value;
                _flagValidationStatus = true;
            }
        }
        private ValidationStatusEnum? _ValidationStatus;
        private bool _flagValidationStatus;

        /// <summary>
        /// Returns false as ValidationStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationStatus()
        {
            return _flagValidationStatus;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BusValRuleAssignment" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for a assignment.</param>
        /// <param name="ruleId">The unique identifier for a rule.</param>
        /// <param name="relatedObjectId">The unique identifier for a related object.</param>
        /// <param name="relatedObjectType">The type of related object.</param>
        /// <param name="createdAt">Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format..</param>
        /// <param name="updatedAt">Timestamp representing the date and time when the object was last updated in ISO 8601 format..</param>
        /// <param name="varObject">The type of the object represented by JSON..</param>
        /// <param name="validationStatus">The validation status of the assignment.</param>
        /// <param name="validationOmittedRules">The list of omitted rules.</param>
        public BusValRuleAssignment(string id = default(string), string ruleId = default(string), string relatedObjectId = default(string), string relatedObjectType = default(string), DateTimeOffset? createdAt = default(DateTimeOffset?), DateTimeOffset? updatedAt = default(DateTimeOffset?), ObjectEnum? varObject = default(ObjectEnum?), ValidationStatusEnum? validationStatus = default(ValidationStatusEnum?), List<string> validationOmittedRules = default(List<string>))
        {
            this._Id = id;
            if (this.Id != null)
            {
                this._flagId = true;
            }
            this._RuleId = ruleId;
            if (this.RuleId != null)
            {
                this._flagRuleId = true;
            }
            this._RelatedObjectId = relatedObjectId;
            if (this.RelatedObjectId != null)
            {
                this._flagRelatedObjectId = true;
            }
            this._RelatedObjectType = relatedObjectType;
            if (this.RelatedObjectType != null)
            {
                this._flagRelatedObjectType = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._UpdatedAt = updatedAt;
            if (this.UpdatedAt != null)
            {
                this._flagUpdatedAt = true;
            }
            this._Object = varObject;
            if (this.Object != null)
            {
                this._flagObject = true;
            }
            this._ValidationStatus = validationStatus;
            if (this.ValidationStatus != null)
            {
                this._flagValidationStatus = true;
            }
            this._ValidationOmittedRules = validationOmittedRules;
            if (this.ValidationOmittedRules != null)
            {
                this._flagValidationOmittedRules = true;
            }
        }

        /// <summary>
        /// The unique identifier for a assignment
        /// </summary>
        /// <value>The unique identifier for a assignment</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// The unique identifier for a rule
        /// </summary>
        /// <value>The unique identifier for a rule</value>
        [DataMember(Name = "rule_id", EmitDefaultValue = true)]
        public string RuleId
        {
            get{ return _RuleId;}
            set
            {
                _RuleId = value;
                _flagRuleId = true;
            }
        }
        private string _RuleId;
        private bool _flagRuleId;

        /// <summary>
        /// Returns false as RuleId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRuleId()
        {
            return _flagRuleId;
        }
        /// <summary>
        /// The unique identifier for a related object
        /// </summary>
        /// <value>The unique identifier for a related object</value>
        [DataMember(Name = "related_object_id", EmitDefaultValue = true)]
        public string RelatedObjectId
        {
            get{ return _RelatedObjectId;}
            set
            {
                _RelatedObjectId = value;
                _flagRelatedObjectId = true;
            }
        }
        private string _RelatedObjectId;
        private bool _flagRelatedObjectId;

        /// <summary>
        /// Returns false as RelatedObjectId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectId()
        {
            return _flagRelatedObjectId;
        }
        /// <summary>
        /// The type of related object
        /// </summary>
        /// <value>The type of related object</value>
        [DataMember(Name = "related_object_type", EmitDefaultValue = true)]
        public string RelatedObjectType
        {
            get{ return _RelatedObjectType;}
            set
            {
                _RelatedObjectType = value;
                _flagRelatedObjectType = true;
            }
        }
        private string _RelatedObjectType;
        private bool _flagRelatedObjectType;

        /// <summary>
        /// Returns false as RelatedObjectType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRelatedObjectType()
        {
            return _flagRelatedObjectType;
        }
        /// <summary>
        /// Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.</value>
        /*
        <example>2022-03-09T11:19:04.819Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Timestamp representing the date and time when the object was last updated in ISO 8601 format.
        /// </summary>
        /// <value>Timestamp representing the date and time when the object was last updated in ISO 8601 format.</value>
        /*
        <example>2022-03-09T11:19:04.819Z</example>
        */
        [DataMember(Name = "updated_at", EmitDefaultValue = true)]
        public DateTimeOffset? UpdatedAt
        {
            get{ return _UpdatedAt;}
            set
            {
                _UpdatedAt = value;
                _flagUpdatedAt = true;
            }
        }
        private DateTimeOffset? _UpdatedAt;
        private bool _flagUpdatedAt;

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return _flagUpdatedAt;
        }
        /// <summary>
        /// The list of omitted rules
        /// </summary>
        /// <value>The list of omitted rules</value>
        [DataMember(Name = "validation_omitted_rules", EmitDefaultValue = true)]
        public List<string> ValidationOmittedRules
        {
            get{ return _ValidationOmittedRules;}
            set
            {
                _ValidationOmittedRules = value;
                _flagValidationOmittedRules = true;
            }
        }
        private List<string> _ValidationOmittedRules;
        private bool _flagValidationOmittedRules;

        /// <summary>
        /// Returns false as ValidationOmittedRules should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValidationOmittedRules()
        {
            return _flagValidationOmittedRules;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BusValRuleAssignment {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RelatedObjectId: ").Append(RelatedObjectId).Append("\n");
            sb.Append("  RelatedObjectType: ").Append(RelatedObjectType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  ValidationStatus: ").Append(ValidationStatus).Append("\n");
            sb.Append("  ValidationOmittedRules: ").Append(ValidationOmittedRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
