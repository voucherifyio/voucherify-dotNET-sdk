/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// ParameterCampaignsAccessSetttingsFilter
    /// </summary>
    [DataContract(Name = "ParameterCampaignsAccessSetttingsFilter")]
    public partial class ParameterCampaignsAccessSetttingsFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterCampaignsAccessSetttingsFilter" /> class.
        /// </summary>
        /// <param name="areasIds">Add area IDs to list all campaigns that are assigned to those areas..</param>
        /// <param name="areaAllStoresIds">Add area IDs to list all campaigns that are assigned to all stores in those areas..</param>
        /// <param name="areaStoresIds">Add store IDs to list all campaigns that are assigned to those stores. The response returns also those campaigns that are assigned to those stores with the assignment to all stores..</param>
        public ParameterCampaignsAccessSetttingsFilter(List<string> areasIds = default(List<string>), List<string> areaAllStoresIds = default(List<string>), List<string> areaStoresIds = default(List<string>))
        {
            this._AreasIds = areasIds;
            if (this.AreasIds != null)
            {
                this._flagAreasIds = true;
            }
            this._AreaAllStoresIds = areaAllStoresIds;
            if (this.AreaAllStoresIds != null)
            {
                this._flagAreaAllStoresIds = true;
            }
            this._AreaStoresIds = areaStoresIds;
            if (this.AreaStoresIds != null)
            {
                this._flagAreaStoresIds = true;
            }
        }

        /// <summary>
        /// Add area IDs to list all campaigns that are assigned to those areas.
        /// </summary>
        /// <value>Add area IDs to list all campaigns that are assigned to those areas.</value>
        [DataMember(Name = "areas_ids", EmitDefaultValue = true)]
        public List<string> AreasIds
        {
            get{ return _AreasIds;}
            set
            {
                _AreasIds = value;
                _flagAreasIds = true;
            }
        }
        private List<string> _AreasIds;
        private bool _flagAreasIds;

        /// <summary>
        /// Returns false as AreasIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreasIds()
        {
            return _flagAreasIds;
        }
        /// <summary>
        /// Add area IDs to list all campaigns that are assigned to all stores in those areas.
        /// </summary>
        /// <value>Add area IDs to list all campaigns that are assigned to all stores in those areas.</value>
        [DataMember(Name = "area_all_stores_ids", EmitDefaultValue = true)]
        public List<string> AreaAllStoresIds
        {
            get{ return _AreaAllStoresIds;}
            set
            {
                _AreaAllStoresIds = value;
                _flagAreaAllStoresIds = true;
            }
        }
        private List<string> _AreaAllStoresIds;
        private bool _flagAreaAllStoresIds;

        /// <summary>
        /// Returns false as AreaAllStoresIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreaAllStoresIds()
        {
            return _flagAreaAllStoresIds;
        }
        /// <summary>
        /// Add store IDs to list all campaigns that are assigned to those stores. The response returns also those campaigns that are assigned to those stores with the assignment to all stores.
        /// </summary>
        /// <value>Add store IDs to list all campaigns that are assigned to those stores. The response returns also those campaigns that are assigned to those stores with the assignment to all stores.</value>
        [DataMember(Name = "area_stores_ids", EmitDefaultValue = true)]
        public List<string> AreaStoresIds
        {
            get{ return _AreaStoresIds;}
            set
            {
                _AreaStoresIds = value;
                _flagAreaStoresIds = true;
            }
        }
        private List<string> _AreaStoresIds;
        private bool _flagAreaStoresIds;

        /// <summary>
        /// Returns false as AreaStoresIds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAreaStoresIds()
        {
            return _flagAreaStoresIds;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterCampaignsAccessSetttingsFilter {\n");
            sb.Append("  AreasIds: ").Append(AreasIds).Append("\n");
            sb.Append("  AreaAllStoresIds: ").Append(AreaAllStoresIds).Append("\n");
            sb.Append("  AreaStoresIds: ").Append(AreaStoresIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
