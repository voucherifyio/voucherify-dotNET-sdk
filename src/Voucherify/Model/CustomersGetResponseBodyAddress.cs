/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Customer&#39;s address.
    /// </summary>
    [DataContract(Name = "CustomersGetResponseBodyAddress")]
    public partial class CustomersGetResponseBodyAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersGetResponseBodyAddress" /> class.
        /// </summary>
        /// <param name="city">City.</param>
        /// <param name="state">State.</param>
        /// <param name="line1">First line of address..</param>
        /// <param name="line2">Second line of address..</param>
        /// <param name="country">Country..</param>
        /// <param name="postalCode">Postal code..</param>
        public CustomersGetResponseBodyAddress(string city = default(string), string state = default(string), string line1 = default(string), string line2 = default(string), string country = default(string), string postalCode = default(string))
        {
            this._City = city;
            if (this.City != null)
            {
                this._flagCity = true;
            }
            this._State = state;
            if (this.State != null)
            {
                this._flagState = true;
            }
            this._Line1 = line1;
            if (this.Line1 != null)
            {
                this._flagLine1 = true;
            }
            this._Line2 = line2;
            if (this.Line2 != null)
            {
                this._flagLine2 = true;
            }
            this._Country = country;
            if (this.Country != null)
            {
                this._flagCountry = true;
            }
            this._PostalCode = postalCode;
            if (this.PostalCode != null)
            {
                this._flagPostalCode = true;
            }
        }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City
        {
            get{ return _City;}
            set
            {
                _City = value;
                _flagCity = true;
            }
        }
        private string _City;
        private bool _flagCity;

        /// <summary>
        /// Returns false as City should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCity()
        {
            return _flagCity;
        }
        /// <summary>
        /// State
        /// </summary>
        /// <value>State</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State
        {
            get{ return _State;}
            set
            {
                _State = value;
                _flagState = true;
            }
        }
        private string _State;
        private bool _flagState;

        /// <summary>
        /// Returns false as State should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeState()
        {
            return _flagState;
        }
        /// <summary>
        /// First line of address.
        /// </summary>
        /// <value>First line of address.</value>
        [DataMember(Name = "line_1", EmitDefaultValue = true)]
        public string Line1
        {
            get{ return _Line1;}
            set
            {
                _Line1 = value;
                _flagLine1 = true;
            }
        }
        private string _Line1;
        private bool _flagLine1;

        /// <summary>
        /// Returns false as Line1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLine1()
        {
            return _flagLine1;
        }
        /// <summary>
        /// Second line of address.
        /// </summary>
        /// <value>Second line of address.</value>
        [DataMember(Name = "line_2", EmitDefaultValue = true)]
        public string Line2
        {
            get{ return _Line2;}
            set
            {
                _Line2 = value;
                _flagLine2 = true;
            }
        }
        private string _Line2;
        private bool _flagLine2;

        /// <summary>
        /// Returns false as Line2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLine2()
        {
            return _flagLine2;
        }
        /// <summary>
        /// Country.
        /// </summary>
        /// <value>Country.</value>
        [DataMember(Name = "country", EmitDefaultValue = true)]
        public string Country
        {
            get{ return _Country;}
            set
            {
                _Country = value;
                _flagCountry = true;
            }
        }
        private string _Country;
        private bool _flagCountry;

        /// <summary>
        /// Returns false as Country should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCountry()
        {
            return _flagCountry;
        }
        /// <summary>
        /// Postal code.
        /// </summary>
        /// <value>Postal code.</value>
        [DataMember(Name = "postal_code", EmitDefaultValue = true)]
        public string PostalCode
        {
            get{ return _PostalCode;}
            set
            {
                _PostalCode = value;
                _flagPostalCode = true;
            }
        }
        private string _PostalCode;
        private bool _flagPostalCode;

        /// <summary>
        /// Returns false as PostalCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostalCode()
        {
            return _flagPostalCode;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomersGetResponseBodyAddress {\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Line1: ").Append(Line1).Append("\n");
            sb.Append("  Line2: ").Append(Line2).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
