/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the parameters for the circle.
    /// </summary>
    [DataContract(Name = "LocationsGetResponseBodyShapeDistance")]
    public partial class LocationsGetResponseBodyShapeDistance : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsGetResponseBodyShapeDistance" /> class.
        /// </summary>
        /// <param name="center">Center of the circle identified by GPS coordinates in decimal degrees..</param>
        /// <param name="radius">Defines the radius of the circle..</param>
        public LocationsGetResponseBodyShapeDistance(string center = default(string), string radius = default(string))
        {
            this._Center = center;
            if (this.Center != null)
            {
                this._flagCenter = true;
            }
            this._Radius = radius;
            if (this.Radius != null)
            {
                this._flagRadius = true;
            }
        }

        /// <summary>
        /// Center of the circle identified by GPS coordinates in decimal degrees.
        /// </summary>
        /// <value>Center of the circle identified by GPS coordinates in decimal degrees.</value>
        /*
        <example>geo:40.79372699823857,-74.15092132694554</example>
        */
        [DataMember(Name = "center", EmitDefaultValue = true)]
        public string Center
        {
            get{ return _Center;}
            set
            {
                _Center = value;
                _flagCenter = true;
            }
        }
        private string _Center;
        private bool _flagCenter;

        /// <summary>
        /// Returns false as Center should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCenter()
        {
            return _flagCenter;
        }
        /// <summary>
        /// Defines the radius of the circle.
        /// </summary>
        /// <value>Defines the radius of the circle.</value>
        [DataMember(Name = "radius", EmitDefaultValue = true)]
        public string Radius
        {
            get{ return _Radius;}
            set
            {
                _Radius = value;
                _flagRadius = true;
            }
        }
        private string _Radius;
        private bool _flagRadius;

        /// <summary>
        /// Returns false as Radius should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRadius()
        {
            return _flagRadius;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationsGetResponseBodyShapeDistance {\n");
            sb.Append("  Center: ").Append(Center).Append("\n");
            sb.Append("  Radius: ").Append(Radius).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
