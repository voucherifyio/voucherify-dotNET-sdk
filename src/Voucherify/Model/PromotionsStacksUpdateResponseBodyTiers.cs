/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Contains the tier configuration. A promotion stack can include up to 30 tiers.
    /// </summary>
    [DataContract(Name = "PromotionsStacksUpdateResponseBodyTiers")]
    public partial class PromotionsStacksUpdateResponseBodyTiers : IValidatableObject
    {
        /// <summary>
        /// Defines HierarchyMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HierarchyModeEnum
        {
            /// <summary>
            /// Enum MANUAL for value: MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUAL = 1
        }


        /// <summary>
        /// Gets or Sets HierarchyMode
        /// </summary>

        [DataMember(Name = "hierarchy_mode", EmitDefaultValue = true)]
        public HierarchyModeEnum? HierarchyMode
        {
            get{ return _HierarchyMode;}
            set
            {
                _HierarchyMode = value;
                _flagHierarchyMode = true;
            }
        }
        private HierarchyModeEnum? _HierarchyMode;
        private bool _flagHierarchyMode;

        /// <summary>
        /// Returns false as HierarchyMode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHierarchyMode()
        {
            return _flagHierarchyMode;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsStacksUpdateResponseBodyTiers" /> class.
        /// </summary>
        /// <param name="ids">Contains the list of tiers in a pre-defined sequence..</param>
        /// <param name="hierarchyMode">hierarchyMode.</param>
        public PromotionsStacksUpdateResponseBodyTiers(List<string> ids = default(List<string>), HierarchyModeEnum? hierarchyMode = default(HierarchyModeEnum?))
        {
            this._Ids = ids;
            if (this.Ids != null)
            {
                this._flagIds = true;
            }
            this._HierarchyMode = hierarchyMode;
            if (this.HierarchyMode != null)
            {
                this._flagHierarchyMode = true;
            }
        }

        /// <summary>
        /// Contains the list of tiers in a pre-defined sequence.
        /// </summary>
        /// <value>Contains the list of tiers in a pre-defined sequence.</value>
        [DataMember(Name = "ids", EmitDefaultValue = true)]
        public List<string> Ids
        {
            get{ return _Ids;}
            set
            {
                _Ids = value;
                _flagIds = true;
            }
        }
        private List<string> _Ids;
        private bool _flagIds;

        /// <summary>
        /// Returns false as Ids should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIds()
        {
            return _flagIds;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PromotionsStacksUpdateResponseBodyTiers {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  HierarchyMode: ").Append(HierarchyMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
