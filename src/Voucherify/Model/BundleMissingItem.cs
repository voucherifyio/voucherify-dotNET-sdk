/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Determines a product, SKU, or collection that is in bundle conditions, but is missing in the customer&#39;s order items. Determines also the missing quantity.
    /// </summary>
    [DataContract(Name = "BundleMissingItem")]
    public partial class BundleMissingItem : IValidatableObject
    {
        /// <summary>
        /// Determines the type of the object that is missing in the customer&#39;s order items.
        /// </summary>
        /// <value>Determines the type of the object that is missing in the customer&#39;s order items.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ObjectEnum
        {
            /// <summary>
            /// Enum Product for value: product
            /// </summary>
            [EnumMember(Value = "product")]
            Product = 1,

            /// <summary>
            /// Enum ProductsCollection for value: products_collection
            /// </summary>
            [EnumMember(Value = "products_collection")]
            ProductsCollection = 2,

            /// <summary>
            /// Enum Sku for value: sku
            /// </summary>
            [EnumMember(Value = "sku")]
            Sku = 3
        }


        /// <summary>
        /// Determines the type of the object that is missing in the customer&#39;s order items.
        /// </summary>
        /// <value>Determines the type of the object that is missing in the customer&#39;s order items.</value>

        [DataMember(Name = "object", IsRequired = true, EmitDefaultValue = true)]
        public ObjectEnum Object
        {
            get{ return _Object;}
            set
            {
                _Object = value;
                _flagObject = true;
            }
        }
        private ObjectEnum _Object;
        private bool _flagObject;

        /// <summary>
        /// Returns false as Object should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeObject()
        {
            return _flagObject;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleMissingItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BundleMissingItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BundleMissingItem" /> class.
        /// </summary>
        /// <param name="id">Unique identifier of the collection, product, or SKU that is missing in the customer&#39;s order items. This is an ID assigned by Voucherify. (required).</param>
        /// <param name="varObject">Determines the type of the object that is missing in the customer&#39;s order items. (required).</param>
        /// <param name="itemQuantity">Quantity of items that are missing in the order items to meet the bundle conditions. (required).</param>
        public BundleMissingItem(string id = default(string), ObjectEnum varObject = default(ObjectEnum), int itemQuantity = default(int))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for BundleMissingItem and cannot be null");
            }
            this._Id = id;
            this._Object = varObject;
            this._ItemQuantity = itemQuantity;
        }

        /// <summary>
        /// Unique identifier of the collection, product, or SKU that is missing in the customer&#39;s order items. This is an ID assigned by Voucherify.
        /// </summary>
        /// <value>Unique identifier of the collection, product, or SKU that is missing in the customer&#39;s order items. This is an ID assigned by Voucherify.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id
        {
            get{ return _Id;}
            set
            {
                _Id = value;
                _flagId = true;
            }
        }
        private string _Id;
        private bool _flagId;

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return _flagId;
        }
        /// <summary>
        /// Quantity of items that are missing in the order items to meet the bundle conditions.
        /// </summary>
        /// <value>Quantity of items that are missing in the order items to meet the bundle conditions.</value>
        [DataMember(Name = "item_quantity", IsRequired = true, EmitDefaultValue = true)]
        public int ItemQuantity
        {
            get{ return _ItemQuantity;}
            set
            {
                _ItemQuantity = value;
                _flagItemQuantity = true;
            }
        }
        private int _ItemQuantity;
        private bool _flagItemQuantity;

        /// <summary>
        /// Returns false as ItemQuantity should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemQuantity()
        {
            return _flagItemQuantity;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BundleMissingItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Object: ").Append(Object).Append("\n");
            sb.Append("  ItemQuantity: ").Append(ItemQuantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
