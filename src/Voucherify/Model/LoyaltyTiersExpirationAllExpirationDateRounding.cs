/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// Defines the rounding mechanism for tier expiration.
    /// </summary>
    [DataContract(Name = "LoyaltyTiersExpirationAllExpirationDate_rounding")]
    public partial class LoyaltyTiersExpirationAllExpirationDateRounding : IValidatableObject
    {
        /// <summary>
        /// This mechanism describes a custom rounding for the expiration date.
        /// </summary>
        /// <value>This mechanism describes a custom rounding for the expiration date.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MONTH for value: MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTH = 1,

            /// <summary>
            /// Enum QUARTER for value: QUARTER
            /// </summary>
            [EnumMember(Value = "QUARTER")]
            QUARTER = 2,

            /// <summary>
            /// Enum HALFYEAR for value: HALF_YEAR
            /// </summary>
            [EnumMember(Value = "HALF_YEAR")]
            HALFYEAR = 3,

            /// <summary>
            /// Enum YEAR for value: YEAR
            /// </summary>
            [EnumMember(Value = "YEAR")]
            YEAR = 4,

            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 5
        }


        /// <summary>
        /// This mechanism describes a custom rounding for the expiration date.
        /// </summary>
        /// <value>This mechanism describes a custom rounding for the expiration date.</value>

        [DataMember(Name = "type", EmitDefaultValue = true)]
        public TypeEnum? Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private TypeEnum? _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// This mechanism describes a rounding strategy for the expiration date.
        /// </summary>
        /// <value>This mechanism describes a rounding strategy for the expiration date.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StrategyEnum
        {
            /// <summary>
            /// Enum START for value: START
            /// </summary>
            [EnumMember(Value = "START")]
            START = 1,

            /// <summary>
            /// Enum END for value: END
            /// </summary>
            [EnumMember(Value = "END")]
            END = 2
        }


        /// <summary>
        /// This mechanism describes a rounding strategy for the expiration date.
        /// </summary>
        /// <value>This mechanism describes a rounding strategy for the expiration date.</value>

        [DataMember(Name = "strategy", EmitDefaultValue = true)]
        public StrategyEnum? Strategy
        {
            get{ return _Strategy;}
            set
            {
                _Strategy = value;
                _flagStrategy = true;
            }
        }
        private StrategyEnum? _Strategy;
        private bool _flagStrategy;

        /// <summary>
        /// Returns false as Strategy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStrategy()
        {
            return _flagStrategy;
        }
        /// <summary>
        /// Defines the type of unit of time in which the rounding period is counted.
        /// </summary>
        /// <value>Defines the type of unit of time in which the rounding period is counted.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum UnitEnum
        {
            /// <summary>
            /// Enum MONTH for value: MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTH = 1
        }


        /// <summary>
        /// Defines the type of unit of time in which the rounding period is counted.
        /// </summary>
        /// <value>Defines the type of unit of time in which the rounding period is counted.</value>

        [DataMember(Name = "unit", EmitDefaultValue = true)]
        public UnitEnum? Unit
        {
            get{ return _Unit;}
            set
            {
                _Unit = value;
                _flagUnit = true;
            }
        }
        private UnitEnum? _Unit;
        private bool _flagUnit;

        /// <summary>
        /// Returns false as Unit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnit()
        {
            return _flagUnit;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltyTiersExpirationAllExpirationDateRounding" /> class.
        /// </summary>
        /// <param name="type">This mechanism describes a custom rounding for the expiration date..</param>
        /// <param name="strategy">This mechanism describes a rounding strategy for the expiration date..</param>
        /// <param name="unit">Defines the type of unit of time in which the rounding period is counted..</param>
        /// <param name="value">Value for the unit of time that the rounding applies to. Units for this parameter are defined by the &#x60;rounding.unit&#x60; parameter.     - &#x60;0&#x60;: January - &#x60;1&#x60;: February - &#x60;2&#x60;: March - &#x60;3&#x60;: April - &#x60;4&#x60;: May - &#x60;5&#x60;: June - &#x60;6&#x60;: July - &#x60;7&#x60;: August - &#x60;8&#x60;: September - &#x60;9&#x60;: October - &#x60;10&#x60;: November - &#x60;11&#x60;: December.</param>
        public LoyaltyTiersExpirationAllExpirationDateRounding(TypeEnum? type = default(TypeEnum?), StrategyEnum? strategy = default(StrategyEnum?), UnitEnum? unit = default(UnitEnum?), int? value = default(int?))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Strategy = strategy;
            if (this.Strategy != null)
            {
                this._flagStrategy = true;
            }
            this._Unit = unit;
            if (this.Unit != null)
            {
                this._flagUnit = true;
            }
            this._Value = value;
            if (this.Value != null)
            {
                this._flagValue = true;
            }
        }

        /// <summary>
        /// Value for the unit of time that the rounding applies to. Units for this parameter are defined by the &#x60;rounding.unit&#x60; parameter.     - &#x60;0&#x60;: January - &#x60;1&#x60;: February - &#x60;2&#x60;: March - &#x60;3&#x60;: April - &#x60;4&#x60;: May - &#x60;5&#x60;: June - &#x60;6&#x60;: July - &#x60;7&#x60;: August - &#x60;8&#x60;: September - &#x60;9&#x60;: October - &#x60;10&#x60;: November - &#x60;11&#x60;: December
        /// </summary>
        /// <value>Value for the unit of time that the rounding applies to. Units for this parameter are defined by the &#x60;rounding.unit&#x60; parameter.     - &#x60;0&#x60;: January - &#x60;1&#x60;: February - &#x60;2&#x60;: March - &#x60;3&#x60;: April - &#x60;4&#x60;: May - &#x60;5&#x60;: June - &#x60;6&#x60;: July - &#x60;7&#x60;: August - &#x60;8&#x60;: September - &#x60;9&#x60;: October - &#x60;10&#x60;: November - &#x60;11&#x60;: December</value>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public int? Value
        {
            get{ return _Value;}
            set
            {
                _Value = value;
                _flagValue = true;
            }
        }
        private int? _Value;
        private bool _flagValue;

        /// <summary>
        /// Returns false as Value should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValue()
        {
            return _flagValue;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LoyaltyTiersExpirationAllExpirationDateRounding {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
