/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Voucherify.Client.OpenAPIDateConverter;

namespace Voucherify.Model
{
    /// <summary>
    /// MemberActivityData
    /// </summary>
    [DataContract(Name = "MemberActivityData")]
    public partial class MemberActivityData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberActivityData" /> class.
        /// </summary>
        /// <param name="customer">customer.</param>
        /// <param name="campaign">campaign.</param>
        /// <param name="loyaltyTierFrom">loyaltyTierFrom.</param>
        /// <param name="loyaltyTierTo">loyaltyTierTo.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="loyaltyTier">loyaltyTier.</param>
        /// <param name="expirationDate">expirationDate.</param>
        /// <param name="publication">publication.</param>
        /// <param name="order">order.</param>
        /// <param name="voucher">voucher.</param>
        /// <param name="holder">holder.</param>
        /// <param name="promotionTier">promotionTier.</param>
        /// <param name="promotionStack">promotionStack.</param>
        /// <param name="redemption">redemption.</param>
        /// <param name="redemptionRollback">redemptionRollback.</param>
        /// <param name="reward">reward.</param>
        /// <param name="referralTier">referralTier.</param>
        /// <param name="balance">balance.</param>
        /// <param name="customEvent">customEvent.</param>
        /// <param name="customerEvent">customerEvent.</param>
        /// <param name="earningRule">earningRule.</param>
        /// <param name="varEvent">varEvent.</param>
        /// <param name="rewardRedemption">rewardRedemption.</param>
        /// <param name="rewardAssignment">rewardAssignment.</param>
        /// <param name="source">source.</param>
        /// <param name="transaction">transaction.</param>
        /// <param name="pendingPoints">pendingPoints.</param>
        /// <param name="voucherPendingPointsBalance">voucherPendingPointsBalance.</param>
        /// <param name="sourceVoucher">sourceVoucher.</param>
        /// <param name="destinationVoucher">destinationVoucher.</param>
        /// <param name="points">The number of expired points..</param>
        /// <param name="buckets">buckets.</param>
        public MemberActivityData(SimpleCustomer customer = default(SimpleCustomer), SimpleCampaign campaign = default(SimpleCampaign), LoyaltyTier loyaltyTierFrom = default(LoyaltyTier), LoyaltyTier loyaltyTierTo = default(LoyaltyTier), DateTimeOffset? createdAt = default(DateTimeOffset?), LoyaltyTier loyaltyTier = default(LoyaltyTier), DateTimeOffset? expirationDate = default(DateTimeOffset?), ListPublicationsItemValidSingleVoucher publication = default(ListPublicationsItemValidSingleVoucher), MemberActivityDataOrder order = default(MemberActivityDataOrder), SimpleVoucher voucher = default(SimpleVoucher), SimpleCustomer holder = default(SimpleCustomer), SimplePromotionTier promotionTier = default(SimplePromotionTier), SimplePromotionStack promotionStack = default(SimplePromotionStack), MemberActivityDataRedemption redemption = default(MemberActivityDataRedemption), SimpleRedemption redemptionRollback = default(SimpleRedemption), SimpleRedemptionRewardResult reward = default(SimpleRedemptionRewardResult), SimpleReferralTier referralTier = default(SimpleReferralTier), MemberActivityDataBalance balance = default(MemberActivityDataBalance), CustomEvent customEvent = default(CustomEvent), MemberActivityDataCustomerEvent customerEvent = default(MemberActivityDataCustomerEvent), EarningRule earningRule = default(EarningRule), SimpleEvent varEvent = default(SimpleEvent), Object rewardRedemption = default(Object), RewardAssignment rewardAssignment = default(RewardAssignment), string source = default(string), MemberActivityDataTransaction transaction = default(MemberActivityDataTransaction), LoyaltyPendingPoints pendingPoints = default(LoyaltyPendingPoints), VoucherBalance voucherPendingPointsBalance = default(VoucherBalance), SimpleVoucher sourceVoucher = default(SimpleVoucher), SimpleVoucher destinationVoucher = default(SimpleVoucher), int? points = default(int?), List<LoyaltyPointsBucket> buckets = default(List<LoyaltyPointsBucket>))
        {
            this._Customer = customer;
            if (this.Customer != null)
            {
                this._flagCustomer = true;
            }
            this._Campaign = campaign;
            if (this.Campaign != null)
            {
                this._flagCampaign = true;
            }
            this._LoyaltyTierFrom = loyaltyTierFrom;
            if (this.LoyaltyTierFrom != null)
            {
                this._flagLoyaltyTierFrom = true;
            }
            this._LoyaltyTierTo = loyaltyTierTo;
            if (this.LoyaltyTierTo != null)
            {
                this._flagLoyaltyTierTo = true;
            }
            this._CreatedAt = createdAt;
            if (this.CreatedAt != null)
            {
                this._flagCreatedAt = true;
            }
            this._LoyaltyTier = loyaltyTier;
            if (this.LoyaltyTier != null)
            {
                this._flagLoyaltyTier = true;
            }
            this._ExpirationDate = expirationDate;
            if (this.ExpirationDate != null)
            {
                this._flagExpirationDate = true;
            }
            this._Publication = publication;
            if (this.Publication != null)
            {
                this._flagPublication = true;
            }
            this._Order = order;
            if (this.Order != null)
            {
                this._flagOrder = true;
            }
            this._Voucher = voucher;
            if (this.Voucher != null)
            {
                this._flagVoucher = true;
            }
            this._Holder = holder;
            if (this.Holder != null)
            {
                this._flagHolder = true;
            }
            this._PromotionTier = promotionTier;
            if (this.PromotionTier != null)
            {
                this._flagPromotionTier = true;
            }
            this._PromotionStack = promotionStack;
            if (this.PromotionStack != null)
            {
                this._flagPromotionStack = true;
            }
            this._Redemption = redemption;
            if (this.Redemption != null)
            {
                this._flagRedemption = true;
            }
            this._RedemptionRollback = redemptionRollback;
            if (this.RedemptionRollback != null)
            {
                this._flagRedemptionRollback = true;
            }
            this._Reward = reward;
            if (this.Reward != null)
            {
                this._flagReward = true;
            }
            this._ReferralTier = referralTier;
            if (this.ReferralTier != null)
            {
                this._flagReferralTier = true;
            }
            this._Balance = balance;
            if (this.Balance != null)
            {
                this._flagBalance = true;
            }
            this._CustomEvent = customEvent;
            if (this.CustomEvent != null)
            {
                this._flagCustomEvent = true;
            }
            this._CustomerEvent = customerEvent;
            if (this.CustomerEvent != null)
            {
                this._flagCustomerEvent = true;
            }
            this._EarningRule = earningRule;
            if (this.EarningRule != null)
            {
                this._flagEarningRule = true;
            }
            this._Event = varEvent;
            if (this.Event != null)
            {
                this._flagEvent = true;
            }
            this._RewardRedemption = rewardRedemption;
            if (this.RewardRedemption != null)
            {
                this._flagRewardRedemption = true;
            }
            this._RewardAssignment = rewardAssignment;
            if (this.RewardAssignment != null)
            {
                this._flagRewardAssignment = true;
            }
            this._Source = source;
            if (this.Source != null)
            {
                this._flagSource = true;
            }
            this._Transaction = transaction;
            if (this.Transaction != null)
            {
                this._flagTransaction = true;
            }
            this._PendingPoints = pendingPoints;
            if (this.PendingPoints != null)
            {
                this._flagPendingPoints = true;
            }
            this._VoucherPendingPointsBalance = voucherPendingPointsBalance;
            if (this.VoucherPendingPointsBalance != null)
            {
                this._flagVoucherPendingPointsBalance = true;
            }
            this._SourceVoucher = sourceVoucher;
            if (this.SourceVoucher != null)
            {
                this._flagSourceVoucher = true;
            }
            this._DestinationVoucher = destinationVoucher;
            if (this.DestinationVoucher != null)
            {
                this._flagDestinationVoucher = true;
            }
            this._Points = points;
            if (this.Points != null)
            {
                this._flagPoints = true;
            }
            this._Buckets = buckets;
            if (this.Buckets != null)
            {
                this._flagBuckets = true;
            }
        }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name = "customer", EmitDefaultValue = true)]
        public SimpleCustomer Customer
        {
            get{ return _Customer;}
            set
            {
                _Customer = value;
                _flagCustomer = true;
            }
        }
        private SimpleCustomer _Customer;
        private bool _flagCustomer;

        /// <summary>
        /// Returns false as Customer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomer()
        {
            return _flagCustomer;
        }
        /// <summary>
        /// Gets or Sets Campaign
        /// </summary>
        [DataMember(Name = "campaign", EmitDefaultValue = true)]
        public SimpleCampaign Campaign
        {
            get{ return _Campaign;}
            set
            {
                _Campaign = value;
                _flagCampaign = true;
            }
        }
        private SimpleCampaign _Campaign;
        private bool _flagCampaign;

        /// <summary>
        /// Returns false as Campaign should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaign()
        {
            return _flagCampaign;
        }
        /// <summary>
        /// Gets or Sets LoyaltyTierFrom
        /// </summary>
        [DataMember(Name = "loyalty_tier_from", EmitDefaultValue = true)]
        public LoyaltyTier LoyaltyTierFrom
        {
            get{ return _LoyaltyTierFrom;}
            set
            {
                _LoyaltyTierFrom = value;
                _flagLoyaltyTierFrom = true;
            }
        }
        private LoyaltyTier _LoyaltyTierFrom;
        private bool _flagLoyaltyTierFrom;

        /// <summary>
        /// Returns false as LoyaltyTierFrom should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTierFrom()
        {
            return _flagLoyaltyTierFrom;
        }
        /// <summary>
        /// Gets or Sets LoyaltyTierTo
        /// </summary>
        [DataMember(Name = "loyalty_tier_to", EmitDefaultValue = true)]
        public LoyaltyTier LoyaltyTierTo
        {
            get{ return _LoyaltyTierTo;}
            set
            {
                _LoyaltyTierTo = value;
                _flagLoyaltyTierTo = true;
            }
        }
        private LoyaltyTier _LoyaltyTierTo;
        private bool _flagLoyaltyTierTo;

        /// <summary>
        /// Returns false as LoyaltyTierTo should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTierTo()
        {
            return _flagLoyaltyTierTo;
        }
        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /*
        <example>2022-02-25T13:32:08.734Z</example>
        */
        [DataMember(Name = "created_at", EmitDefaultValue = true)]
        public DateTimeOffset? CreatedAt
        {
            get{ return _CreatedAt;}
            set
            {
                _CreatedAt = value;
                _flagCreatedAt = true;
            }
        }
        private DateTimeOffset? _CreatedAt;
        private bool _flagCreatedAt;

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return _flagCreatedAt;
        }
        /// <summary>
        /// Gets or Sets LoyaltyTier
        /// </summary>
        [DataMember(Name = "loyalty_tier", EmitDefaultValue = true)]
        public LoyaltyTier LoyaltyTier
        {
            get{ return _LoyaltyTier;}
            set
            {
                _LoyaltyTier = value;
                _flagLoyaltyTier = true;
            }
        }
        private LoyaltyTier _LoyaltyTier;
        private bool _flagLoyaltyTier;

        /// <summary>
        /// Returns false as LoyaltyTier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLoyaltyTier()
        {
            return _flagLoyaltyTier;
        }
        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        /*
        <example>2022-02-25T13:32:08.734Z</example>
        */
        [DataMember(Name = "expiration_date", EmitDefaultValue = true)]
        public DateTimeOffset? ExpirationDate
        {
            get{ return _ExpirationDate;}
            set
            {
                _ExpirationDate = value;
                _flagExpirationDate = true;
            }
        }
        private DateTimeOffset? _ExpirationDate;
        private bool _flagExpirationDate;

        /// <summary>
        /// Returns false as ExpirationDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExpirationDate()
        {
            return _flagExpirationDate;
        }
        /// <summary>
        /// Gets or Sets Publication
        /// </summary>
        [DataMember(Name = "publication", EmitDefaultValue = true)]
        public ListPublicationsItemValidSingleVoucher Publication
        {
            get{ return _Publication;}
            set
            {
                _Publication = value;
                _flagPublication = true;
            }
        }
        private ListPublicationsItemValidSingleVoucher _Publication;
        private bool _flagPublication;

        /// <summary>
        /// Returns false as Publication should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePublication()
        {
            return _flagPublication;
        }
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = true)]
        public MemberActivityDataOrder Order
        {
            get{ return _Order;}
            set
            {
                _Order = value;
                _flagOrder = true;
            }
        }
        private MemberActivityDataOrder _Order;
        private bool _flagOrder;

        /// <summary>
        /// Returns false as Order should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOrder()
        {
            return _flagOrder;
        }
        /// <summary>
        /// Gets or Sets Voucher
        /// </summary>
        [DataMember(Name = "voucher", EmitDefaultValue = true)]
        public SimpleVoucher Voucher
        {
            get{ return _Voucher;}
            set
            {
                _Voucher = value;
                _flagVoucher = true;
            }
        }
        private SimpleVoucher _Voucher;
        private bool _flagVoucher;

        /// <summary>
        /// Returns false as Voucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucher()
        {
            return _flagVoucher;
        }
        /// <summary>
        /// Gets or Sets Holder
        /// </summary>
        [DataMember(Name = "holder", EmitDefaultValue = true)]
        public SimpleCustomer Holder
        {
            get{ return _Holder;}
            set
            {
                _Holder = value;
                _flagHolder = true;
            }
        }
        private SimpleCustomer _Holder;
        private bool _flagHolder;

        /// <summary>
        /// Returns false as Holder should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHolder()
        {
            return _flagHolder;
        }
        /// <summary>
        /// Gets or Sets PromotionTier
        /// </summary>
        [DataMember(Name = "promotion_tier", EmitDefaultValue = true)]
        public SimplePromotionTier PromotionTier
        {
            get{ return _PromotionTier;}
            set
            {
                _PromotionTier = value;
                _flagPromotionTier = true;
            }
        }
        private SimplePromotionTier _PromotionTier;
        private bool _flagPromotionTier;

        /// <summary>
        /// Returns false as PromotionTier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePromotionTier()
        {
            return _flagPromotionTier;
        }
        /// <summary>
        /// Gets or Sets PromotionStack
        /// </summary>
        [DataMember(Name = "promotion_stack", EmitDefaultValue = true)]
        public SimplePromotionStack PromotionStack
        {
            get{ return _PromotionStack;}
            set
            {
                _PromotionStack = value;
                _flagPromotionStack = true;
            }
        }
        private SimplePromotionStack _PromotionStack;
        private bool _flagPromotionStack;

        /// <summary>
        /// Returns false as PromotionStack should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePromotionStack()
        {
            return _flagPromotionStack;
        }
        /// <summary>
        /// Gets or Sets Redemption
        /// </summary>
        [DataMember(Name = "redemption", EmitDefaultValue = true)]
        public MemberActivityDataRedemption Redemption
        {
            get{ return _Redemption;}
            set
            {
                _Redemption = value;
                _flagRedemption = true;
            }
        }
        private MemberActivityDataRedemption _Redemption;
        private bool _flagRedemption;

        /// <summary>
        /// Returns false as Redemption should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemption()
        {
            return _flagRedemption;
        }
        /// <summary>
        /// Gets or Sets RedemptionRollback
        /// </summary>
        [DataMember(Name = "redemption_rollback", EmitDefaultValue = true)]
        public SimpleRedemption RedemptionRollback
        {
            get{ return _RedemptionRollback;}
            set
            {
                _RedemptionRollback = value;
                _flagRedemptionRollback = true;
            }
        }
        private SimpleRedemption _RedemptionRollback;
        private bool _flagRedemptionRollback;

        /// <summary>
        /// Returns false as RedemptionRollback should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRedemptionRollback()
        {
            return _flagRedemptionRollback;
        }
        /// <summary>
        /// Gets or Sets Reward
        /// </summary>
        [DataMember(Name = "reward", EmitDefaultValue = true)]
        public SimpleRedemptionRewardResult Reward
        {
            get{ return _Reward;}
            set
            {
                _Reward = value;
                _flagReward = true;
            }
        }
        private SimpleRedemptionRewardResult _Reward;
        private bool _flagReward;

        /// <summary>
        /// Returns false as Reward should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReward()
        {
            return _flagReward;
        }
        /// <summary>
        /// Gets or Sets ReferralTier
        /// </summary>
        [DataMember(Name = "referral_tier", EmitDefaultValue = true)]
        public SimpleReferralTier ReferralTier
        {
            get{ return _ReferralTier;}
            set
            {
                _ReferralTier = value;
                _flagReferralTier = true;
            }
        }
        private SimpleReferralTier _ReferralTier;
        private bool _flagReferralTier;

        /// <summary>
        /// Returns false as ReferralTier should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferralTier()
        {
            return _flagReferralTier;
        }
        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = true)]
        public MemberActivityDataBalance Balance
        {
            get{ return _Balance;}
            set
            {
                _Balance = value;
                _flagBalance = true;
            }
        }
        private MemberActivityDataBalance _Balance;
        private bool _flagBalance;

        /// <summary>
        /// Returns false as Balance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBalance()
        {
            return _flagBalance;
        }
        /// <summary>
        /// Gets or Sets CustomEvent
        /// </summary>
        [DataMember(Name = "custom_event", EmitDefaultValue = true)]
        public CustomEvent CustomEvent
        {
            get{ return _CustomEvent;}
            set
            {
                _CustomEvent = value;
                _flagCustomEvent = true;
            }
        }
        private CustomEvent _CustomEvent;
        private bool _flagCustomEvent;

        /// <summary>
        /// Returns false as CustomEvent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomEvent()
        {
            return _flagCustomEvent;
        }
        /// <summary>
        /// Gets or Sets CustomerEvent
        /// </summary>
        [DataMember(Name = "customer_event", EmitDefaultValue = true)]
        public MemberActivityDataCustomerEvent CustomerEvent
        {
            get{ return _CustomerEvent;}
            set
            {
                _CustomerEvent = value;
                _flagCustomerEvent = true;
            }
        }
        private MemberActivityDataCustomerEvent _CustomerEvent;
        private bool _flagCustomerEvent;

        /// <summary>
        /// Returns false as CustomerEvent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerEvent()
        {
            return _flagCustomerEvent;
        }
        /// <summary>
        /// Gets or Sets EarningRule
        /// </summary>
        [DataMember(Name = "earning_rule", EmitDefaultValue = true)]
        public EarningRule EarningRule
        {
            get{ return _EarningRule;}
            set
            {
                _EarningRule = value;
                _flagEarningRule = true;
            }
        }
        private EarningRule _EarningRule;
        private bool _flagEarningRule;

        /// <summary>
        /// Returns false as EarningRule should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEarningRule()
        {
            return _flagEarningRule;
        }
        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", EmitDefaultValue = true)]
        public SimpleEvent Event
        {
            get{ return _Event;}
            set
            {
                _Event = value;
                _flagEvent = true;
            }
        }
        private SimpleEvent _Event;
        private bool _flagEvent;

        /// <summary>
        /// Returns false as Event should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEvent()
        {
            return _flagEvent;
        }
        /// <summary>
        /// Gets or Sets RewardRedemption
        /// </summary>
        [DataMember(Name = "reward_redemption", EmitDefaultValue = true)]
        public Object RewardRedemption
        {
            get{ return _RewardRedemption;}
            set
            {
                _RewardRedemption = value;
                _flagRewardRedemption = true;
            }
        }
        private Object _RewardRedemption;
        private bool _flagRewardRedemption;

        /// <summary>
        /// Returns false as RewardRedemption should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRewardRedemption()
        {
            return _flagRewardRedemption;
        }
        /// <summary>
        /// Gets or Sets RewardAssignment
        /// </summary>
        [DataMember(Name = "reward_assignment", EmitDefaultValue = true)]
        public RewardAssignment RewardAssignment
        {
            get{ return _RewardAssignment;}
            set
            {
                _RewardAssignment = value;
                _flagRewardAssignment = true;
            }
        }
        private RewardAssignment _RewardAssignment;
        private bool _flagRewardAssignment;

        /// <summary>
        /// Returns false as RewardAssignment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRewardAssignment()
        {
            return _flagRewardAssignment;
        }
        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = true)]
        public string Source
        {
            get{ return _Source;}
            set
            {
                _Source = value;
                _flagSource = true;
            }
        }
        private string _Source;
        private bool _flagSource;

        /// <summary>
        /// Returns false as Source should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSource()
        {
            return _flagSource;
        }
        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = true)]
        public MemberActivityDataTransaction Transaction
        {
            get{ return _Transaction;}
            set
            {
                _Transaction = value;
                _flagTransaction = true;
            }
        }
        private MemberActivityDataTransaction _Transaction;
        private bool _flagTransaction;

        /// <summary>
        /// Returns false as Transaction should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransaction()
        {
            return _flagTransaction;
        }
        /// <summary>
        /// Gets or Sets PendingPoints
        /// </summary>
        [DataMember(Name = "pending_points", EmitDefaultValue = true)]
        public LoyaltyPendingPoints PendingPoints
        {
            get{ return _PendingPoints;}
            set
            {
                _PendingPoints = value;
                _flagPendingPoints = true;
            }
        }
        private LoyaltyPendingPoints _PendingPoints;
        private bool _flagPendingPoints;

        /// <summary>
        /// Returns false as PendingPoints should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePendingPoints()
        {
            return _flagPendingPoints;
        }
        /// <summary>
        /// Gets or Sets VoucherPendingPointsBalance
        /// </summary>
        [DataMember(Name = "voucher_pending_points_balance", EmitDefaultValue = true)]
        public VoucherBalance VoucherPendingPointsBalance
        {
            get{ return _VoucherPendingPointsBalance;}
            set
            {
                _VoucherPendingPointsBalance = value;
                _flagVoucherPendingPointsBalance = true;
            }
        }
        private VoucherBalance _VoucherPendingPointsBalance;
        private bool _flagVoucherPendingPointsBalance;

        /// <summary>
        /// Returns false as VoucherPendingPointsBalance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeVoucherPendingPointsBalance()
        {
            return _flagVoucherPendingPointsBalance;
        }
        /// <summary>
        /// Gets or Sets SourceVoucher
        /// </summary>
        [DataMember(Name = "source_voucher", EmitDefaultValue = true)]
        public SimpleVoucher SourceVoucher
        {
            get{ return _SourceVoucher;}
            set
            {
                _SourceVoucher = value;
                _flagSourceVoucher = true;
            }
        }
        private SimpleVoucher _SourceVoucher;
        private bool _flagSourceVoucher;

        /// <summary>
        /// Returns false as SourceVoucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceVoucher()
        {
            return _flagSourceVoucher;
        }
        /// <summary>
        /// Gets or Sets DestinationVoucher
        /// </summary>
        [DataMember(Name = "destination_voucher", EmitDefaultValue = true)]
        public SimpleVoucher DestinationVoucher
        {
            get{ return _DestinationVoucher;}
            set
            {
                _DestinationVoucher = value;
                _flagDestinationVoucher = true;
            }
        }
        private SimpleVoucher _DestinationVoucher;
        private bool _flagDestinationVoucher;

        /// <summary>
        /// Returns false as DestinationVoucher should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDestinationVoucher()
        {
            return _flagDestinationVoucher;
        }
        /// <summary>
        /// The number of expired points.
        /// </summary>
        /// <value>The number of expired points.</value>
        [DataMember(Name = "points", EmitDefaultValue = true)]
        public int? Points
        {
            get{ return _Points;}
            set
            {
                _Points = value;
                _flagPoints = true;
            }
        }
        private int? _Points;
        private bool _flagPoints;

        /// <summary>
        /// Returns false as Points should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePoints()
        {
            return _flagPoints;
        }
        /// <summary>
        /// Gets or Sets Buckets
        /// </summary>
        [DataMember(Name = "buckets", EmitDefaultValue = true)]
        public List<LoyaltyPointsBucket> Buckets
        {
            get{ return _Buckets;}
            set
            {
                _Buckets = value;
                _flagBuckets = true;
            }
        }
        private List<LoyaltyPointsBucket> _Buckets;
        private bool _flagBuckets;

        /// <summary>
        /// Returns false as Buckets should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBuckets()
        {
            return _flagBuckets;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MemberActivityData {\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  Campaign: ").Append(Campaign).Append("\n");
            sb.Append("  LoyaltyTierFrom: ").Append(LoyaltyTierFrom).Append("\n");
            sb.Append("  LoyaltyTierTo: ").Append(LoyaltyTierTo).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  LoyaltyTier: ").Append(LoyaltyTier).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Publication: ").Append(Publication).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Voucher: ").Append(Voucher).Append("\n");
            sb.Append("  Holder: ").Append(Holder).Append("\n");
            sb.Append("  PromotionTier: ").Append(PromotionTier).Append("\n");
            sb.Append("  PromotionStack: ").Append(PromotionStack).Append("\n");
            sb.Append("  Redemption: ").Append(Redemption).Append("\n");
            sb.Append("  RedemptionRollback: ").Append(RedemptionRollback).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  ReferralTier: ").Append(ReferralTier).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  CustomEvent: ").Append(CustomEvent).Append("\n");
            sb.Append("  CustomerEvent: ").Append(CustomerEvent).Append("\n");
            sb.Append("  EarningRule: ").Append(EarningRule).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  RewardRedemption: ").Append(RewardRedemption).Append("\n");
            sb.Append("  RewardAssignment: ").Append(RewardAssignment).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  PendingPoints: ").Append(PendingPoints).Append("\n");
            sb.Append("  VoucherPendingPointsBalance: ").Append(VoucherPendingPointsBalance).Append("\n");
            sb.Append("  SourceVoucher: ").Append(SourceVoucher).Append("\n");
            sb.Append("  DestinationVoucher: ").Append(DestinationVoucher).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Buckets: ").Append(Buckets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
