/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferralsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        ReferralsMembersHoldersCreateInBulkResponseBody ReferralsAddHolders(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0);

        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHoldersWithHttpInfo(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0);
        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        ReferralsMembersHoldersCreateInBulkResponseBody ReferralsAddHolders1(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0);

        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHolders1WithHttpInfo(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0);
        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersListResponseBody</returns>
        ReferralsMembersHoldersListResponseBody ReferralsCodeHolders(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0);

        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersListResponseBody</returns>
        ApiResponse<ReferralsMembersHoldersListResponseBody> ReferralsCodeHoldersWithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0);
        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersListResponseBody</returns>
        ReferralsMembersHoldersListResponseBody ReferralsCodeHolders1(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0);

        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersListResponseBody</returns>
        ApiResponse<ReferralsMembersHoldersListResponseBody> ReferralsCodeHolders1WithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0);
        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ReferralsRemoveHolder(string memberId, string holderId, int operationIndex = 0);

        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReferralsRemoveHolderWithHttpInfo(string memberId, string holderId, int operationIndex = 0);
        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ReferralsRemoveHolder1(string campaignId, string memberId, string holderId, int operationIndex = 0);

        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReferralsRemoveHolder1WithHttpInfo(string campaignId, string memberId, string holderId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferralsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        System.Threading.Tasks.Task<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHoldersAsync(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersCreateInBulkResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody>> ReferralsAddHoldersWithHttpInfoAsync(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        System.Threading.Tasks.Task<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHolders1Async(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersCreateInBulkResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody>> ReferralsAddHolders1WithHttpInfoAsync(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersListResponseBody</returns>
        System.Threading.Tasks.Task<ReferralsMembersHoldersListResponseBody> ReferralsCodeHoldersAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReferralsMembersHoldersListResponseBody>> ReferralsCodeHoldersWithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersListResponseBody</returns>
        System.Threading.Tasks.Task<ReferralsMembersHoldersListResponseBody> ReferralsCodeHolders1Async(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Referral Code Holders
        /// </summary>
        /// <remarks>
        /// Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReferralsMembersHoldersListResponseBody>> ReferralsCodeHolders1WithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReferralsRemoveHolderAsync(string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReferralsRemoveHolderWithHttpInfoAsync(string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReferralsRemoveHolder1Async(string campaignId, string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove Referral Card Holder
        /// </summary>
        /// <remarks>
        /// Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReferralsRemoveHolder1WithHttpInfoAsync(string campaignId, string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReferralsApi : IReferralsApiSync, IReferralsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReferralsApi : IReferralsApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferralsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferralsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferralsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReferralsApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferralsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReferralsApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReferralsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReferralsApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        public ReferralsMembersHoldersCreateInBulkResponseBody ReferralsAddHolders(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> localVarResponse = ReferralsAddHoldersWithHttpInfo(memberId, referralsMembersHoldersCreateInBulkRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        public Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHoldersWithHttpInfo(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsAddHolders");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = referralsMembersHoldersCreateInBulkRequestBody;

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsAddHolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReferralsMembersHoldersCreateInBulkResponseBody>("/v1/referrals/members/{memberId}/holders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsAddHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        public async System.Threading.Tasks.Task<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHoldersAsync(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> localVarResponse = await ReferralsAddHoldersWithHttpInfoAsync(memberId, referralsMembersHoldersCreateInBulkRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.  üìò Alternative endpoint This endpoint is an alternative to the Add Referral Code Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersCreateInBulkResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody>> ReferralsAddHoldersWithHttpInfoAsync(string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsAddHolders");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = referralsMembersHoldersCreateInBulkRequestBody;

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsAddHolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReferralsMembersHoldersCreateInBulkResponseBody>("/v1/referrals/members/{memberId}/holders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsAddHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        public ReferralsMembersHoldersCreateInBulkResponseBody ReferralsAddHolders1(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> localVarResponse = ReferralsAddHolders1WithHttpInfo(campaignId, memberId, referralsMembersHoldersCreateInBulkRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        public Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHolders1WithHttpInfo(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling ReferralsApi->ReferralsAddHolders1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsAddHolders1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = referralsMembersHoldersCreateInBulkRequestBody;

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsAddHolders1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReferralsMembersHoldersCreateInBulkResponseBody>("/v1/referrals/{campaignId}/members/{memberId}/holders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsAddHolders1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersCreateInBulkResponseBody</returns>
        public async System.Threading.Tasks.Task<ReferralsMembersHoldersCreateInBulkResponseBody> ReferralsAddHolders1Async(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody> localVarResponse = await ReferralsAddHolders1WithHttpInfoAsync(campaignId, memberId, referralsMembersHoldersCreateInBulkRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Referral Code Holders Adds new holders to a referral code as **referees**. The data sent in the request is upserted into the customer data. If the request returns an error even for one customer, you have to resend the whole request. Customer data is upserted if the data for all customers is correct. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üëç To add a holder as a referer, use the Create Publication endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="referralsMembersHoldersCreateInBulkRequestBody">Specify the customer data to be upserted as redeemable holders. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersCreateInBulkResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ReferralsMembersHoldersCreateInBulkResponseBody>> ReferralsAddHolders1WithHttpInfoAsync(string campaignId, string memberId, ReferralsMembersHoldersCreateInBulkRequestBody referralsMembersHoldersCreateInBulkRequestBody = default(ReferralsMembersHoldersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling ReferralsApi->ReferralsAddHolders1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsAddHolders1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = referralsMembersHoldersCreateInBulkRequestBody;

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsAddHolders1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ReferralsMembersHoldersCreateInBulkResponseBody>("/v1/referrals/{campaignId}/members/{memberId}/holders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsAddHolders1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersListResponseBody</returns>
        public ReferralsMembersHoldersListResponseBody ReferralsCodeHolders(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody> localVarResponse = ReferralsCodeHoldersWithHttpInfo(campaignId, memberId, limit, order, startingAfterId, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody> ReferralsCodeHoldersWithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling ReferralsApi->ReferralsCodeHolders");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsCodeHolders");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[createdAt]", filters.CreatedAt));
                }
                if (filters.HolderRole != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[holderRole]", filters.HolderRole));
                }
                if (filters.CustomerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[customerId]", filters.CustomerId));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsCodeHolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReferralsMembersHoldersListResponseBody>("/v1/referrals/{campaignId}/members/{memberId}/holders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsCodeHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersListResponseBody</returns>
        public async System.Threading.Tasks.Task<ReferralsMembersHoldersListResponseBody> ReferralsCodeHoldersAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody> localVarResponse = await ReferralsCodeHoldersWithHttpInfoAsync(campaignId, memberId, limit, order, startingAfterId, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody>> ReferralsCodeHoldersWithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling ReferralsApi->ReferralsCodeHolders");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsCodeHolders");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[createdAt]", filters.CreatedAt));
                }
                if (filters.HolderRole != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[holderRole]", filters.HolderRole));
                }
                if (filters.CustomerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[customerId]", filters.CustomerId));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsCodeHolders";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReferralsMembersHoldersListResponseBody>("/v1/referrals/{campaignId}/members/{memberId}/holders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsCodeHolders", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReferralsMembersHoldersListResponseBody</returns>
        public ReferralsMembersHoldersListResponseBody ReferralsCodeHolders1(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody> localVarResponse = ReferralsCodeHolders1WithHttpInfo(memberId, limit, order, startingAfterId, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReferralsMembersHoldersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody> ReferralsCodeHolders1WithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsCodeHolders1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[createdAt]", filters.CreatedAt));
                }
                if (filters.HolderRole != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[holderRole]", filters.HolderRole));
                }
                if (filters.CustomerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[customerId]", filters.CustomerId));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsCodeHolders1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ReferralsMembersHoldersListResponseBody>("/v1/referrals/members/{memberId}/holders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsCodeHolders1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReferralsMembersHoldersListResponseBody</returns>
        public async System.Threading.Tasks.Task<ReferralsMembersHoldersListResponseBody> ReferralsCodeHolders1Async(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody> localVarResponse = await ReferralsCodeHolders1WithHttpInfoAsync(memberId, limit, order, startingAfterId, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Referral Code Holders Retrieves the holders of the referral code from a referral campaign. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)  üìò Alternative endpoint This endpoint is an alternative to the List Member Holders endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReferralsMembersHoldersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ReferralsMembersHoldersListResponseBody>> ReferralsCodeHolders1WithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListReferralsRedeemableHolders filters = default(ParameterFiltersListReferralsRedeemableHolders), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsCodeHolders1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[createdAt]", filters.CreatedAt));
                }
                if (filters.HolderRole != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[holderRole]", filters.HolderRole));
                }
                if (filters.CustomerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[customerId]", filters.CustomerId));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsCodeHolders1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ReferralsMembersHoldersListResponseBody>("/v1/referrals/members/{memberId}/holders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsCodeHolders1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ReferralsRemoveHolder(string memberId, string holderId, int operationIndex = 0)
        {
            ReferralsRemoveHolderWithHttpInfo(memberId, holderId);
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> ReferralsRemoveHolderWithHttpInfo(string memberId, string holderId, int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsRemoveHolder");
            }

            // verify the required parameter 'holderId' is set
            if (holderId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'holderId' when calling ReferralsApi->ReferralsRemoveHolder");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("holderId", Voucherify.Client.ClientUtils.ParameterToString(holderId)); // path parameter

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsRemoveHolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/referrals/members/{memberId}/holders/{holderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsRemoveHolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReferralsRemoveHolderAsync(string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ReferralsRemoveHolderWithHttpInfoAsync(memberId, holderId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)  üìò Alternative endpoint This endpoint is an alternative to the Remove Referral Card Holder endpoint. The URL was re-designed to retrieve the referral member holders without providing the campaignId as a path paremeter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> ReferralsRemoveHolderWithHttpInfoAsync(string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsRemoveHolder");
            }

            // verify the required parameter 'holderId' is set
            if (holderId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'holderId' when calling ReferralsApi->ReferralsRemoveHolder");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("holderId", Voucherify.Client.ClientUtils.ParameterToString(holderId)); // path parameter

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsRemoveHolder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/referrals/members/{memberId}/holders/{holderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsRemoveHolder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ReferralsRemoveHolder1(string campaignId, string memberId, string holderId, int operationIndex = 0)
        {
            ReferralsRemoveHolder1WithHttpInfo(campaignId, memberId, holderId);
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> ReferralsRemoveHolder1WithHttpInfo(string campaignId, string memberId, string holderId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling ReferralsApi->ReferralsRemoveHolder1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsRemoveHolder1");
            }

            // verify the required parameter 'holderId' is set
            if (holderId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'holderId' when calling ReferralsApi->ReferralsRemoveHolder1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("holderId", Voucherify.Client.ClientUtils.ParameterToString(holderId)); // path parameter

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsRemoveHolder1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/referrals/{campaignId}/members/{memberId}/holders/{holderId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsRemoveHolder1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReferralsRemoveHolder1Async(string campaignId, string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ReferralsRemoveHolder1WithHttpInfoAsync(campaignId, memberId, holderId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove Referral Card Holder Removes the holder from a referral card. You can remove a referee only. To use this endpoint, you must have the following permissions: - Create and modify Customers and Segments (customers.modify) - Publish Voucher (vouchers.publish)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique identifier of a referral program campaign.</param>
        /// <param name="memberId">Unique referral code or its identifier.</param>
        /// <param name="holderId">Unique identifier of a redeemable holder.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> ReferralsRemoveHolder1WithHttpInfoAsync(string campaignId, string memberId, string holderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling ReferralsApi->ReferralsRemoveHolder1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling ReferralsApi->ReferralsRemoveHolder1");
            }

            // verify the required parameter 'holderId' is set
            if (holderId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'holderId' when calling ReferralsApi->ReferralsRemoveHolder1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("holderId", Voucherify.Client.ClientUtils.ParameterToString(holderId)); // path parameter

            localVarRequestOptions.Operation = "ReferralsApi.ReferralsRemoveHolder1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/referrals/{campaignId}/members/{memberId}/holders/{holderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReferralsRemoveHolder1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
