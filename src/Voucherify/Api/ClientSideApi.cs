/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientSideApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Check Eligibility (client-side)
        /// </summary>
        /// <remarks>
        /// Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientQualificationsCheckEligibilityResponseBody</returns>
        ClientQualificationsCheckEligibilityResponseBody CheckEligibilityClientSide(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0);

        /// <summary>
        /// Check Eligibility (client-side)
        /// </summary>
        /// <remarks>
        /// Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientQualificationsCheckEligibilityResponseBody</returns>
        ApiResponse<ClientQualificationsCheckEligibilityResponseBody> CheckEligibilityClientSideWithHttpInfo(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0);
        /// <summary>
        /// List Promotion Tiers (client-side)
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientPromotionsTiersListResponseBody</returns>
        ClientPromotionsTiersListResponseBody ListPromotionTiersClientSide(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0);

        /// <summary>
        /// List Promotion Tiers (client-side)
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientPromotionsTiersListResponseBody</returns>
        ApiResponse<ClientPromotionsTiersListResponseBody> ListPromotionTiersClientSideWithHttpInfo(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0);
        /// <summary>
        /// Redeem Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientRedemptionsRedeemResponseBody</returns>
        ClientRedemptionsRedeemResponseBody RedeemStackedDiscountsClientSide(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0);

        /// <summary>
        /// Redeem Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientRedemptionsRedeemResponseBody</returns>
        ApiResponse<ClientRedemptionsRedeemResponseBody> RedeemStackedDiscountsClientSideWithHttpInfo(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0);
        /// <summary>
        /// Track Custom Event (client-side)
        /// </summary>
        /// <remarks>
        /// To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientEventsCreateResponseBody</returns>
        ClientEventsCreateResponseBody TrackCustomEventClientSide(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Track Custom Event (client-side)
        /// </summary>
        /// <remarks>
        /// To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientEventsCreateResponseBody</returns>
        ApiResponse<ClientEventsCreateResponseBody> TrackCustomEventClientSideWithHttpInfo(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Validate Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientValidationsValidateResponseBody</returns>
        ClientValidationsValidateResponseBody ValidateStackedDiscountsClientSide(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Validate Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientValidationsValidateResponseBody</returns>
        ApiResponse<ClientValidationsValidateResponseBody> ValidateStackedDiscountsClientSideWithHttpInfo(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientSideApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Check Eligibility (client-side)
        /// </summary>
        /// <remarks>
        /// Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientQualificationsCheckEligibilityResponseBody</returns>
        System.Threading.Tasks.Task<ClientQualificationsCheckEligibilityResponseBody> CheckEligibilityClientSideAsync(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Check Eligibility (client-side)
        /// </summary>
        /// <remarks>
        /// Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientQualificationsCheckEligibilityResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientQualificationsCheckEligibilityResponseBody>> CheckEligibilityClientSideWithHttpInfoAsync(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Promotion Tiers (client-side)
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientPromotionsTiersListResponseBody</returns>
        System.Threading.Tasks.Task<ClientPromotionsTiersListResponseBody> ListPromotionTiersClientSideAsync(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Promotion Tiers (client-side)
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientPromotionsTiersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientPromotionsTiersListResponseBody>> ListPromotionTiersClientSideWithHttpInfoAsync(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Redeem Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientRedemptionsRedeemResponseBody</returns>
        System.Threading.Tasks.Task<ClientRedemptionsRedeemResponseBody> RedeemStackedDiscountsClientSideAsync(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Redeem Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientRedemptionsRedeemResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientRedemptionsRedeemResponseBody>> RedeemStackedDiscountsClientSideWithHttpInfoAsync(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Track Custom Event (client-side)
        /// </summary>
        /// <remarks>
        /// To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientEventsCreateResponseBody</returns>
        System.Threading.Tasks.Task<ClientEventsCreateResponseBody> TrackCustomEventClientSideAsync(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Track Custom Event (client-side)
        /// </summary>
        /// <remarks>
        /// To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientEventsCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientEventsCreateResponseBody>> TrackCustomEventClientSideWithHttpInfoAsync(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Validate Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientValidationsValidateResponseBody</returns>
        System.Threading.Tasks.Task<ClientValidationsValidateResponseBody> ValidateStackedDiscountsClientSideAsync(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Validate Stackable Discounts (client-side)
        /// </summary>
        /// <remarks>
        /// Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientValidationsValidateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClientValidationsValidateResponseBody>> ValidateStackedDiscountsClientSideWithHttpInfoAsync(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientSideApi : IClientSideApiSync, IClientSideApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientSideApi : IClientSideApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSideApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientSideApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSideApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientSideApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSideApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientSideApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientSideApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClientSideApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Check Eligibility (client-side) Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientQualificationsCheckEligibilityResponseBody</returns>
        public ClientQualificationsCheckEligibilityResponseBody CheckEligibilityClientSide(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ClientQualificationsCheckEligibilityResponseBody> localVarResponse = CheckEligibilityClientSideWithHttpInfo(clientQualificationsCheckEligibilityRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Eligibility (client-side) Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientQualificationsCheckEligibilityResponseBody</returns>
        public Voucherify.Client.ApiResponse<ClientQualificationsCheckEligibilityResponseBody> CheckEligibilityClientSideWithHttpInfo(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientQualificationsCheckEligibilityRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.CheckEligibilityClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientQualificationsCheckEligibilityResponseBody>("/client/v1/qualifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckEligibilityClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check Eligibility (client-side) Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientQualificationsCheckEligibilityResponseBody</returns>
        public async System.Threading.Tasks.Task<ClientQualificationsCheckEligibilityResponseBody> CheckEligibilityClientSideAsync(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ClientQualificationsCheckEligibilityResponseBody> localVarResponse = await CheckEligibilityClientSideWithHttpInfoAsync(clientQualificationsCheckEligibilityRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check Eligibility (client-side) Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  üëç Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientQualificationsCheckEligibilityRequestBody">Define order and customer context. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientQualificationsCheckEligibilityResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ClientQualificationsCheckEligibilityResponseBody>> CheckEligibilityClientSideWithHttpInfoAsync(ClientQualificationsCheckEligibilityRequestBody clientQualificationsCheckEligibilityRequestBody = default(ClientQualificationsCheckEligibilityRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = clientQualificationsCheckEligibilityRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.CheckEligibilityClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientQualificationsCheckEligibilityResponseBody>("/client/v1/qualifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckEligibilityClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Tiers (client-side) This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientPromotionsTiersListResponseBody</returns>
        public ClientPromotionsTiersListResponseBody ListPromotionTiersClientSide(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ClientPromotionsTiersListResponseBody> localVarResponse = ListPromotionTiersClientSideWithHttpInfo(origin, isAvailable, limit, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Tiers (client-side) This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientPromotionsTiersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ClientPromotionsTiersListResponseBody> ListPromotionTiersClientSideWithHttpInfo(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0)
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->ListPromotionTiersClientSide");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "is_available", isAvailable));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter

            localVarRequestOptions.Operation = "ClientSideApi.ListPromotionTiersClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClientPromotionsTiersListResponseBody>("/client/v1/promotions/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionTiersClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Tiers (client-side) This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientPromotionsTiersListResponseBody</returns>
        public async System.Threading.Tasks.Task<ClientPromotionsTiersListResponseBody> ListPromotionTiersClientSideAsync(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ClientPromotionsTiersListResponseBody> localVarResponse = await ListPromotionTiersClientSideWithHttpInfoAsync(origin, isAvailable, limit, page, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Tiers (client-side) This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientPromotionsTiersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ClientPromotionsTiersListResponseBody>> ListPromotionTiersClientSideWithHttpInfoAsync(string origin, bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiersClientSide? order = default(ParameterOrderListPromotionTiersClientSide?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->ListPromotionTiersClientSide");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "is_available", isAvailable));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter

            localVarRequestOptions.Operation = "ClientSideApi.ListPromotionTiersClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClientPromotionsTiersListResponseBody>("/client/v1/promotions/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionTiersClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Stackable Discounts (client-side) This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientRedemptionsRedeemResponseBody</returns>
        public ClientRedemptionsRedeemResponseBody RedeemStackedDiscountsClientSide(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ClientRedemptionsRedeemResponseBody> localVarResponse = RedeemStackedDiscountsClientSideWithHttpInfo(origin, clientRedemptionsRedeemRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Stackable Discounts (client-side) This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientRedemptionsRedeemResponseBody</returns>
        public Voucherify.Client.ApiResponse<ClientRedemptionsRedeemResponseBody> RedeemStackedDiscountsClientSideWithHttpInfo(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->RedeemStackedDiscountsClientSide");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter
            localVarRequestOptions.Data = clientRedemptionsRedeemRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.RedeemStackedDiscountsClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientRedemptionsRedeemResponseBody>("/client/v1/redemptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemStackedDiscountsClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Stackable Discounts (client-side) This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientRedemptionsRedeemResponseBody</returns>
        public async System.Threading.Tasks.Task<ClientRedemptionsRedeemResponseBody> RedeemStackedDiscountsClientSideAsync(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ClientRedemptionsRedeemResponseBody> localVarResponse = await RedeemStackedDiscountsClientSideWithHttpInfoAsync(origin, clientRedemptionsRedeemRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Stackable Discounts (client-side) This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    üìò Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientRedemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientRedemptionsRedeemResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ClientRedemptionsRedeemResponseBody>> RedeemStackedDiscountsClientSideWithHttpInfoAsync(string origin, ClientRedemptionsRedeemRequestBody clientRedemptionsRedeemRequestBody = default(ClientRedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->RedeemStackedDiscountsClientSide");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter
            localVarRequestOptions.Data = clientRedemptionsRedeemRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.RedeemStackedDiscountsClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientRedemptionsRedeemResponseBody>("/client/v1/redemptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemStackedDiscountsClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Track Custom Event (client-side) To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientEventsCreateResponseBody</returns>
        public ClientEventsCreateResponseBody TrackCustomEventClientSide(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ClientEventsCreateResponseBody> localVarResponse = TrackCustomEventClientSideWithHttpInfo(origin, clientEventsCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Track Custom Event (client-side) To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientEventsCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ClientEventsCreateResponseBody> TrackCustomEventClientSideWithHttpInfo(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->TrackCustomEventClientSide");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter
            localVarRequestOptions.Data = clientEventsCreateRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.TrackCustomEventClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientEventsCreateResponseBody>("/client/v1/events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrackCustomEventClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Track Custom Event (client-side) To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientEventsCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ClientEventsCreateResponseBody> TrackCustomEventClientSideAsync(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ClientEventsCreateResponseBody> localVarResponse = await TrackCustomEventClientSideWithHttpInfoAsync(origin, clientEventsCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Track Custom Event (client-side) To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientEventsCreateRequestBody">Specify the details of the custom event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientEventsCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ClientEventsCreateResponseBody>> TrackCustomEventClientSideWithHttpInfoAsync(string origin, ClientEventsCreateRequestBody clientEventsCreateRequestBody = default(ClientEventsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->TrackCustomEventClientSide");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter
            localVarRequestOptions.Data = clientEventsCreateRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.TrackCustomEventClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientEventsCreateResponseBody>("/client/v1/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrackCustomEventClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Stackable Discounts (client-side) Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClientValidationsValidateResponseBody</returns>
        public ClientValidationsValidateResponseBody ValidateStackedDiscountsClientSide(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ClientValidationsValidateResponseBody> localVarResponse = ValidateStackedDiscountsClientSideWithHttpInfo(origin, clientValidationsValidateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Stackable Discounts (client-side) Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClientValidationsValidateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ClientValidationsValidateResponseBody> ValidateStackedDiscountsClientSideWithHttpInfo(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->ValidateStackedDiscountsClientSide");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter
            localVarRequestOptions.Data = clientValidationsValidateRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.ValidateStackedDiscountsClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClientValidationsValidateResponseBody>("/client/v1/validations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateStackedDiscountsClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Stackable Discounts (client-side) Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClientValidationsValidateResponseBody</returns>
        public async System.Threading.Tasks.Task<ClientValidationsValidateResponseBody> ValidateStackedDiscountsClientSideAsync(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ClientValidationsValidateResponseBody> localVarResponse = await ValidateStackedDiscountsClientSideWithHttpInfoAsync(origin, clientValidationsValidateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Stackable Discounts (client-side) Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="origin">Indicates the origin (scheme, hostname, and port).</param>
        /// <param name="clientValidationsValidateRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClientValidationsValidateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ClientValidationsValidateResponseBody>> ValidateStackedDiscountsClientSideWithHttpInfoAsync(string origin, ClientValidationsValidateRequestBody clientValidationsValidateRequestBody = default(ClientValidationsValidateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'origin' is set
            if (origin == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'origin' when calling ClientSideApi->ValidateStackedDiscountsClientSide");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("origin", Voucherify.Client.ClientUtils.ParameterToString(origin)); // header parameter
            localVarRequestOptions.Data = clientValidationsValidateRequestBody;

            localVarRequestOptions.Operation = "ClientSideApi.ValidateStackedDiscountsClientSide";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Client-Application-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Client-Application-Id"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (X-Client-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Client-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Client-Token", this.Configuration.GetApiKeyWithPrefix("X-Client-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ClientValidationsValidateResponseBody>("/client/v1/validations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateStackedDiscountsClientSide", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
