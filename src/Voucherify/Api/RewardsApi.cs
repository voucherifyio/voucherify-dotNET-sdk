/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Reward
        /// </summary>
        /// <remarks>
        /// Create a new reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsCreateResponseBody</returns>
        RewardsCreateResponseBody CreateReward(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Reward
        /// </summary>
        /// <remarks>
        /// Create a new reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsCreateResponseBody</returns>
        ApiResponse<RewardsCreateResponseBody> CreateRewardWithHttpInfo(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Assigns a reward to a specified loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsCreateResponseBody</returns>
        RewardsAssignmentsCreateResponseBody CreateRewardAssignment(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Assigns a reward to a specified loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsCreateResponseBody</returns>
        ApiResponse<RewardsAssignmentsCreateResponseBody> CreateRewardAssignmentWithHttpInfo(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Delete Reward
        /// </summary>
        /// <remarks>
        /// Delete a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteReward(string rewardId, int operationIndex = 0);

        /// <summary>
        /// Delete Reward
        /// </summary>
        /// <remarks>
        /// Delete a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRewardWithHttpInfo(string rewardId, int operationIndex = 0);
        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRewardAssignment(string rewardId, string assignmentId, int operationIndex = 0);

        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRewardAssignmentWithHttpInfo(string rewardId, string assignmentId, int operationIndex = 0);
        /// <summary>
        /// Get Reward
        /// </summary>
        /// <remarks>
        /// Retrieve a reward by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Reward</returns>
        Reward GetReward(string rewardId, int operationIndex = 0);

        /// <summary>
        /// Get Reward
        /// </summary>
        /// <remarks>
        /// Retrieve a reward by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Reward</returns>
        ApiResponse<Reward> GetRewardWithHttpInfo(string rewardId, int operationIndex = 0);
        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve a reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsGetResponseBody</returns>
        RewardsAssignmentsGetResponseBody GetRewardAssignment(string rewardId, string assignmentId, int operationIndex = 0);

        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve a reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsGetResponseBody</returns>
        ApiResponse<RewardsAssignmentsGetResponseBody> GetRewardAssignmentWithHttpInfo(string rewardId, string assignmentId, int operationIndex = 0);
        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve reward assignments by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsListResponseBody</returns>
        RewardsAssignmentsListResponseBody ListRewardAssignments(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve reward assignments by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsListResponseBody</returns>
        ApiResponse<RewardsAssignmentsListResponseBody> ListRewardAssignmentsWithHttpInfo(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Retrieve rewards.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsListResponseBody</returns>
        RewardsListResponseBody ListRewards(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Retrieve rewards.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsListResponseBody</returns>
        ApiResponse<RewardsListResponseBody> ListRewardsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Reward
        /// </summary>
        /// <remarks>
        /// Update the details of a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsUpdateResponseBody</returns>
        RewardsUpdateResponseBody UpdateReward(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Reward
        /// </summary>
        /// <remarks>
        /// Update the details of a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsUpdateResponseBody</returns>
        ApiResponse<RewardsUpdateResponseBody> UpdateRewardWithHttpInfo(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Update the number of points needed to successfully redeem the reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsUpdateResponseBody</returns>
        RewardsAssignmentsUpdateResponseBody UpdateRewardAssignment(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Update the number of points needed to successfully redeem the reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsUpdateResponseBody</returns>
        ApiResponse<RewardsAssignmentsUpdateResponseBody> UpdateRewardAssignmentWithHttpInfo(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Reward
        /// </summary>
        /// <remarks>
        /// Create a new reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsCreateResponseBody</returns>
        System.Threading.Tasks.Task<RewardsCreateResponseBody> CreateRewardAsync(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Reward
        /// </summary>
        /// <remarks>
        /// Create a new reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsCreateResponseBody>> CreateRewardWithHttpInfoAsync(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Assigns a reward to a specified loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsCreateResponseBody</returns>
        System.Threading.Tasks.Task<RewardsAssignmentsCreateResponseBody> CreateRewardAssignmentAsync(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Assigns a reward to a specified loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsAssignmentsCreateResponseBody>> CreateRewardAssignmentWithHttpInfoAsync(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Reward
        /// </summary>
        /// <remarks>
        /// Delete a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRewardAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Reward
        /// </summary>
        /// <remarks>
        /// Delete a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRewardWithHttpInfoAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRewardAssignmentAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRewardAssignmentWithHttpInfoAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Reward
        /// </summary>
        /// <remarks>
        /// Retrieve a reward by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Reward</returns>
        System.Threading.Tasks.Task<Reward> GetRewardAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Reward
        /// </summary>
        /// <remarks>
        /// Retrieve a reward by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Reward)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reward>> GetRewardWithHttpInfoAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve a reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsGetResponseBody</returns>
        System.Threading.Tasks.Task<RewardsAssignmentsGetResponseBody> GetRewardAssignmentAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve a reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsAssignmentsGetResponseBody>> GetRewardAssignmentWithHttpInfoAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve reward assignments by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsListResponseBody</returns>
        System.Threading.Tasks.Task<RewardsAssignmentsListResponseBody> ListRewardAssignmentsAsync(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve reward assignments by the reward ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsAssignmentsListResponseBody>> ListRewardAssignmentsWithHttpInfoAsync(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Retrieve rewards.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsListResponseBody</returns>
        System.Threading.Tasks.Task<RewardsListResponseBody> ListRewardsAsync(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Rewards
        /// </summary>
        /// <remarks>
        /// Retrieve rewards.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsListResponseBody>> ListRewardsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Reward
        /// </summary>
        /// <remarks>
        /// Update the details of a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsUpdateResponseBody</returns>
        System.Threading.Tasks.Task<RewardsUpdateResponseBody> UpdateRewardAsync(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Reward
        /// </summary>
        /// <remarks>
        /// Update the details of a reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsUpdateResponseBody>> UpdateRewardWithHttpInfoAsync(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Update the number of points needed to successfully redeem the reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsUpdateResponseBody</returns>
        System.Threading.Tasks.Task<RewardsAssignmentsUpdateResponseBody> UpdateRewardAssignmentAsync(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Update the number of points needed to successfully redeem the reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewardsAssignmentsUpdateResponseBody>> UpdateRewardAssignmentWithHttpInfoAsync(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRewardsApi : IRewardsApiSync, IRewardsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RewardsApi : IRewardsApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RewardsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RewardsApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RewardsApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RewardsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RewardsApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Reward Create a new reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsCreateResponseBody</returns>
        public RewardsCreateResponseBody CreateReward(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RewardsCreateResponseBody> localVarResponse = CreateRewardWithHttpInfo(rewardsCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reward Create a new reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<RewardsCreateResponseBody> CreateRewardWithHttpInfo(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = rewardsCreateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.CreateReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RewardsCreateResponseBody>("/v1/rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reward Create a new reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsCreateResponseBody> CreateRewardAsync(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RewardsCreateResponseBody> localVarResponse = await CreateRewardWithHttpInfoAsync(rewardsCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reward Create a new reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardsCreateRequestBody">Define parameters of the new reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RewardsCreateResponseBody>> CreateRewardWithHttpInfoAsync(RewardsCreateRequestBody rewardsCreateRequestBody = default(RewardsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = rewardsCreateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.CreateReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RewardsCreateResponseBody>("/v1/rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reward Assignment Assigns a reward to a specified loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsCreateResponseBody</returns>
        public RewardsAssignmentsCreateResponseBody CreateRewardAssignment(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsCreateResponseBody> localVarResponse = CreateRewardAssignmentWithHttpInfo(rewardId, rewardsAssignmentsCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reward Assignment Assigns a reward to a specified loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<RewardsAssignmentsCreateResponseBody> CreateRewardAssignmentWithHttpInfo(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->CreateRewardAssignment");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.Data = rewardsAssignmentsCreateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.CreateRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RewardsAssignmentsCreateResponseBody>("/v1/rewards/{rewardId}/assignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reward Assignment Assigns a reward to a specified loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsAssignmentsCreateResponseBody> CreateRewardAssignmentAsync(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsCreateResponseBody> localVarResponse = await CreateRewardAssignmentWithHttpInfoAsync(rewardId, rewardsAssignmentsCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reward Assignment Assigns a reward to a specified loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsAssignmentsCreateRequestBody">Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RewardsAssignmentsCreateResponseBody>> CreateRewardAssignmentWithHttpInfoAsync(string rewardId, RewardsAssignmentsCreateRequestBody rewardsAssignmentsCreateRequestBody = default(RewardsAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->CreateRewardAssignment");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.Data = rewardsAssignmentsCreateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.CreateRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RewardsAssignmentsCreateResponseBody>("/v1/rewards/{rewardId}/assignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reward Delete a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteReward(string rewardId, int operationIndex = 0)
        {
            DeleteRewardWithHttpInfo(rewardId);
        }

        /// <summary>
        /// Delete Reward Delete a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteRewardWithHttpInfo(string rewardId, int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->DeleteReward");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.DeleteReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/rewards/{rewardId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reward Delete a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRewardAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteRewardWithHttpInfoAsync(rewardId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Reward Delete a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteRewardWithHttpInfoAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->DeleteReward");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.DeleteReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/rewards/{rewardId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRewardAssignment(string rewardId, string assignmentId, int operationIndex = 0)
        {
            DeleteRewardAssignmentWithHttpInfo(rewardId, assignmentId);
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteRewardAssignmentWithHttpInfo(string rewardId, string assignmentId, int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->DeleteRewardAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling RewardsApi->DeleteRewardAssignment");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.DeleteRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/rewards/{rewardId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRewardAssignmentAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteRewardAssignmentWithHttpInfoAsync(rewardId, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteRewardAssignmentWithHttpInfoAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->DeleteRewardAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling RewardsApi->DeleteRewardAssignment");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.DeleteRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/rewards/{rewardId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Retrieve a reward by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Reward</returns>
        public Reward GetReward(string rewardId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<Reward> localVarResponse = GetRewardWithHttpInfo(rewardId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Retrieve a reward by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Reward</returns>
        public Voucherify.Client.ApiResponse<Reward> GetRewardWithHttpInfo(string rewardId, int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->GetReward");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.GetReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Reward>("/v1/rewards/{rewardId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Retrieve a reward by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Reward</returns>
        public async System.Threading.Tasks.Task<Reward> GetRewardAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<Reward> localVarResponse = await GetRewardWithHttpInfoAsync(rewardId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Retrieve a reward by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Reward)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Reward>> GetRewardWithHttpInfoAsync(string rewardId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->GetReward");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.GetReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Reward>("/v1/rewards/{rewardId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve a reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsGetResponseBody</returns>
        public RewardsAssignmentsGetResponseBody GetRewardAssignment(string rewardId, string assignmentId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsGetResponseBody> localVarResponse = GetRewardAssignmentWithHttpInfo(rewardId, assignmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve a reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<RewardsAssignmentsGetResponseBody> GetRewardAssignmentWithHttpInfo(string rewardId, string assignmentId, int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->GetRewardAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling RewardsApi->GetRewardAssignment");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.GetRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RewardsAssignmentsGetResponseBody>("/v1/rewards/{rewardId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve a reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsGetResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsAssignmentsGetResponseBody> GetRewardAssignmentAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsGetResponseBody> localVarResponse = await GetRewardAssignmentWithHttpInfoAsync(rewardId, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve a reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RewardsAssignmentsGetResponseBody>> GetRewardAssignmentWithHttpInfoAsync(string rewardId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->GetRewardAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling RewardsApi->GetRewardAssignment");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "RewardsApi.GetRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RewardsAssignmentsGetResponseBody>("/v1/rewards/{rewardId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reward Assignments Retrieve reward assignments by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsListResponseBody</returns>
        public RewardsAssignmentsListResponseBody ListRewardAssignments(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsListResponseBody> localVarResponse = ListRewardAssignmentsWithHttpInfo(rewardId, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reward Assignments Retrieve reward assignments by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<RewardsAssignmentsListResponseBody> ListRewardAssignmentsWithHttpInfo(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->ListRewardAssignments");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "RewardsApi.ListRewardAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RewardsAssignmentsListResponseBody>("/v1/rewards/{rewardId}/assignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewardAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reward Assignments Retrieve reward assignments by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsListResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsAssignmentsListResponseBody> ListRewardAssignmentsAsync(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsListResponseBody> localVarResponse = await ListRewardAssignmentsWithHttpInfoAsync(rewardId, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reward Assignments Retrieve reward assignments by the reward ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RewardsAssignmentsListResponseBody>> ListRewardAssignmentsWithHttpInfoAsync(string rewardId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->ListRewardAssignments");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "RewardsApi.ListRewardAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RewardsAssignmentsListResponseBody>("/v1/rewards/{rewardId}/assignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewardAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Rewards Retrieve rewards.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsListResponseBody</returns>
        public RewardsListResponseBody ListRewards(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RewardsListResponseBody> localVarResponse = ListRewardsWithHttpInfo(limit, page, assignmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Rewards Retrieve rewards.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<RewardsListResponseBody> ListRewardsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (assignmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "assignment_id", assignmentId));
            }

            localVarRequestOptions.Operation = "RewardsApi.ListRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RewardsListResponseBody>("/v1/rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Rewards Retrieve rewards.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsListResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsListResponseBody> ListRewardsAsync(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RewardsListResponseBody> localVarResponse = await ListRewardsWithHttpInfoAsync(limit, page, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Rewards Retrieve rewards.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. Use this parameter to get the reward details in the context of an assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RewardsListResponseBody>> ListRewardsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (assignmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "assignment_id", assignmentId));
            }

            localVarRequestOptions.Operation = "RewardsApi.ListRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RewardsListResponseBody>("/v1/rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reward Update the details of a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsUpdateResponseBody</returns>
        public RewardsUpdateResponseBody UpdateReward(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RewardsUpdateResponseBody> localVarResponse = UpdateRewardWithHttpInfo(rewardId, rewardsUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reward Update the details of a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<RewardsUpdateResponseBody> UpdateRewardWithHttpInfo(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->UpdateReward");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.Data = rewardsUpdateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.UpdateReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RewardsUpdateResponseBody>("/v1/rewards/{rewardId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reward Update the details of a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsUpdateResponseBody> UpdateRewardAsync(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RewardsUpdateResponseBody> localVarResponse = await UpdateRewardWithHttpInfoAsync(rewardId, rewardsUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reward Update the details of a reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="rewardsUpdateRequestBody">Define the parameters to be updated for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RewardsUpdateResponseBody>> UpdateRewardWithHttpInfoAsync(string rewardId, RewardsUpdateRequestBody rewardsUpdateRequestBody = default(RewardsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->UpdateReward");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.Data = rewardsUpdateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.UpdateReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RewardsUpdateResponseBody>("/v1/rewards/{rewardId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reward Assignment Update the number of points needed to successfully redeem the reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewardsAssignmentsUpdateResponseBody</returns>
        public RewardsAssignmentsUpdateResponseBody UpdateRewardAssignment(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsUpdateResponseBody> localVarResponse = UpdateRewardAssignmentWithHttpInfo(rewardId, assignmentId, rewardsAssignmentsUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reward Assignment Update the number of points needed to successfully redeem the reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewardsAssignmentsUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<RewardsAssignmentsUpdateResponseBody> UpdateRewardAssignmentWithHttpInfo(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->UpdateRewardAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling RewardsApi->UpdateRewardAssignment");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter
            localVarRequestOptions.Data = rewardsAssignmentsUpdateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.UpdateRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<RewardsAssignmentsUpdateResponseBody>("/v1/rewards/{rewardId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reward Assignment Update the number of points needed to successfully redeem the reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewardsAssignmentsUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<RewardsAssignmentsUpdateResponseBody> UpdateRewardAssignmentAsync(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RewardsAssignmentsUpdateResponseBody> localVarResponse = await UpdateRewardAssignmentWithHttpInfoAsync(rewardId, assignmentId, rewardsAssignmentsUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reward Assignment Update the number of points needed to successfully redeem the reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rewardId">A unique reward ID.</param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="rewardsAssignmentsUpdateRequestBody">Define the number of points required to exchange for the reward. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewardsAssignmentsUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RewardsAssignmentsUpdateResponseBody>> UpdateRewardAssignmentWithHttpInfoAsync(string rewardId, string assignmentId, RewardsAssignmentsUpdateRequestBody rewardsAssignmentsUpdateRequestBody = default(RewardsAssignmentsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'rewardId' is set
            if (rewardId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'rewardId' when calling RewardsApi->UpdateRewardAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling RewardsApi->UpdateRewardAssignment");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("rewardId", Voucherify.Client.ClientUtils.ParameterToString(rewardId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter
            localVarRequestOptions.Data = rewardsAssignmentsUpdateRequestBody;

            localVarRequestOptions.Operation = "RewardsApi.UpdateRewardAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<RewardsAssignmentsUpdateResponseBody>("/v1/rewards/{rewardId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRewardAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
