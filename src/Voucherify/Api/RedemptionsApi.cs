/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedemptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Redemption
        /// </summary>
        /// <remarks>
        /// Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsGetResponseBody</returns>
        RedemptionsGetResponseBody GetRedemption(string redemptionId, int operationIndex = 0);

        /// <summary>
        /// Get Redemption
        /// </summary>
        /// <remarks>
        /// Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsGetResponseBody</returns>
        ApiResponse<RedemptionsGetResponseBody> GetRedemptionWithHttpInfo(string redemptionId, int operationIndex = 0);
        /// <summary>
        /// Get Voucher&#39;s Redemptions
        /// </summary>
        /// <remarks>
        /// Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VouchersRedemptionGetResponseBody</returns>
        VouchersRedemptionGetResponseBody GetVoucherRedemptions(string code, int operationIndex = 0);

        /// <summary>
        /// Get Voucher&#39;s Redemptions
        /// </summary>
        /// <remarks>
        /// Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VouchersRedemptionGetResponseBody</returns>
        ApiResponse<VouchersRedemptionGetResponseBody> GetVoucherRedemptionsWithHttpInfo(string code, int operationIndex = 0);
        /// <summary>
        /// List Redemptions
        /// </summary>
        /// <remarks>
        /// Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsListResponseBody</returns>
        RedemptionsListResponseBody ListRedemptions(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0);

        /// <summary>
        /// List Redemptions
        /// </summary>
        /// <remarks>
        /// Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsListResponseBody</returns>
        ApiResponse<RedemptionsListResponseBody> ListRedemptionsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0);
        /// <summary>
        /// Redeem Stackable Discounts
        /// </summary>
        /// <remarks>
        /// # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsRedeemResponseBody</returns>
        RedemptionsRedeemResponseBody RedeemStackedDiscounts(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0);

        /// <summary>
        /// Redeem Stackable Discounts
        /// </summary>
        /// <remarks>
        /// # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsRedeemResponseBody</returns>
        ApiResponse<RedemptionsRedeemResponseBody> RedeemStackedDiscountsWithHttpInfo(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0);
        /// <summary>
        /// Rollback Redemption
        /// </summary>
        /// <remarks>
        /// Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsRollbackCreateResponseBody</returns>
        RedemptionsRollbackCreateResponseBody RollbackRedemption(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Rollback Redemption
        /// </summary>
        /// <remarks>
        /// Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsRollbackCreateResponseBody</returns>
        ApiResponse<RedemptionsRollbackCreateResponseBody> RollbackRedemptionWithHttpInfo(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Rollback Stackable Redemptions
        /// </summary>
        /// <remarks>
        /// Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsRollbacksCreateResponseBody</returns>
        RedemptionsRollbacksCreateResponseBody RollbackStackedRedemptions(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Rollback Stackable Redemptions
        /// </summary>
        /// <remarks>
        /// Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsRollbacksCreateResponseBody</returns>
        ApiResponse<RedemptionsRollbacksCreateResponseBody> RollbackStackedRedemptionsWithHttpInfo(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedemptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Redemption
        /// </summary>
        /// <remarks>
        /// Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsGetResponseBody</returns>
        System.Threading.Tasks.Task<RedemptionsGetResponseBody> GetRedemptionAsync(string redemptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Redemption
        /// </summary>
        /// <remarks>
        /// Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionsGetResponseBody>> GetRedemptionWithHttpInfoAsync(string redemptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Voucher&#39;s Redemptions
        /// </summary>
        /// <remarks>
        /// Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VouchersRedemptionGetResponseBody</returns>
        System.Threading.Tasks.Task<VouchersRedemptionGetResponseBody> GetVoucherRedemptionsAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Voucher&#39;s Redemptions
        /// </summary>
        /// <remarks>
        /// Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VouchersRedemptionGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<VouchersRedemptionGetResponseBody>> GetVoucherRedemptionsWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Redemptions
        /// </summary>
        /// <remarks>
        /// Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsListResponseBody</returns>
        System.Threading.Tasks.Task<RedemptionsListResponseBody> ListRedemptionsAsync(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Redemptions
        /// </summary>
        /// <remarks>
        /// Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionsListResponseBody>> ListRedemptionsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Redeem Stackable Discounts
        /// </summary>
        /// <remarks>
        /// # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsRedeemResponseBody</returns>
        System.Threading.Tasks.Task<RedemptionsRedeemResponseBody> RedeemStackedDiscountsAsync(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Redeem Stackable Discounts
        /// </summary>
        /// <remarks>
        /// # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsRedeemResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionsRedeemResponseBody>> RedeemStackedDiscountsWithHttpInfoAsync(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Rollback Redemption
        /// </summary>
        /// <remarks>
        /// Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsRollbackCreateResponseBody</returns>
        System.Threading.Tasks.Task<RedemptionsRollbackCreateResponseBody> RollbackRedemptionAsync(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Rollback Redemption
        /// </summary>
        /// <remarks>
        /// Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsRollbackCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionsRollbackCreateResponseBody>> RollbackRedemptionWithHttpInfoAsync(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Rollback Stackable Redemptions
        /// </summary>
        /// <remarks>
        /// Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsRollbacksCreateResponseBody</returns>
        System.Threading.Tasks.Task<RedemptionsRollbacksCreateResponseBody> RollbackStackedRedemptionsAsync(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Rollback Stackable Redemptions
        /// </summary>
        /// <remarks>
        /// Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsRollbacksCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<RedemptionsRollbacksCreateResponseBody>> RollbackStackedRedemptionsWithHttpInfoAsync(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRedemptionsApi : IRedemptionsApiSync, IRedemptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RedemptionsApi : IRedemptionsApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedemptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RedemptionsApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RedemptionsApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RedemptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RedemptionsApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Redemption Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsGetResponseBody</returns>
        public RedemptionsGetResponseBody GetRedemption(string redemptionId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RedemptionsGetResponseBody> localVarResponse = GetRedemptionWithHttpInfo(redemptionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Redemption Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<RedemptionsGetResponseBody> GetRedemptionWithHttpInfo(string redemptionId, int operationIndex = 0)
        {
            // verify the required parameter 'redemptionId' is set
            if (redemptionId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'redemptionId' when calling RedemptionsApi->GetRedemption");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redemptionId", Voucherify.Client.ClientUtils.ParameterToString(redemptionId)); // path parameter

            localVarRequestOptions.Operation = "RedemptionsApi.GetRedemption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RedemptionsGetResponseBody>("/v1/redemptions/{redemptionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedemption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Redemption Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsGetResponseBody</returns>
        public async System.Threading.Tasks.Task<RedemptionsGetResponseBody> GetRedemptionAsync(string redemptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RedemptionsGetResponseBody> localVarResponse = await GetRedemptionWithHttpInfoAsync(redemptionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Redemption Return a redemption or redemption rollback object. This object can either be a successfull or failed redemption or redemption rollback.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">ID of previously created redemption.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RedemptionsGetResponseBody>> GetRedemptionWithHttpInfoAsync(string redemptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redemptionId' is set
            if (redemptionId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'redemptionId' when calling RedemptionsApi->GetRedemption");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redemptionId", Voucherify.Client.ClientUtils.ParameterToString(redemptionId)); // path parameter

            localVarRequestOptions.Operation = "RedemptionsApi.GetRedemption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RedemptionsGetResponseBody>("/v1/redemptions/{redemptionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedemption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Voucher&#39;s Redemptions Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VouchersRedemptionGetResponseBody</returns>
        public VouchersRedemptionGetResponseBody GetVoucherRedemptions(string code, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<VouchersRedemptionGetResponseBody> localVarResponse = GetVoucherRedemptionsWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Voucher&#39;s Redemptions Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VouchersRedemptionGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<VouchersRedemptionGetResponseBody> GetVoucherRedemptionsWithHttpInfo(string code, int operationIndex = 0)
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'code' when calling RedemptionsApi->GetVoucherRedemptions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Voucherify.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "RedemptionsApi.GetVoucherRedemptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VouchersRedemptionGetResponseBody>("/v1/vouchers/{code}/redemption", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVoucherRedemptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Voucher&#39;s Redemptions Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VouchersRedemptionGetResponseBody</returns>
        public async System.Threading.Tasks.Task<VouchersRedemptionGetResponseBody> GetVoucherRedemptionsAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<VouchersRedemptionGetResponseBody> localVarResponse = await GetVoucherRedemptionsWithHttpInfoAsync(code, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Voucher&#39;s Redemptions Retrieve the number of times a voucher was redeemed and each of the redemption details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code">A **code** that identifies the voucher.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VouchersRedemptionGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<VouchersRedemptionGetResponseBody>> GetVoucherRedemptionsWithHttpInfoAsync(string code, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'code' when calling RedemptionsApi->GetVoucherRedemptions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("code", Voucherify.Client.ClientUtils.ParameterToString(code)); // path parameter

            localVarRequestOptions.Operation = "RedemptionsApi.GetVoucherRedemptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VouchersRedemptionGetResponseBody>("/v1/vouchers/{code}/redemption", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetVoucherRedemptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Redemptions Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsListResponseBody</returns>
        public RedemptionsListResponseBody ListRedemptions(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RedemptionsListResponseBody> localVarResponse = ListRedemptionsWithHttpInfo(limit, page, result, campaign, customer, order, createdAt, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Redemptions Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<RedemptionsListResponseBody> ListRedemptionsWithHttpInfo(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (result != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "result", result));
            }
            if (campaign != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign", campaign));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (createdAt != null)
            {
                if (createdAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[before]", createdAt.Before));
                }
                if (createdAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[after]", createdAt.After));
                }
            }
            if (filters != null)
            {
                if (filters.VoucherCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucher_code]", filters.VoucherCode));
                }
                if (filters.RelatedObjectId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[related_object_id]", filters.RelatedObjectId));
                }
                if (filters.RelatedObjectParentId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[related_object_parent_id]", filters.RelatedObjectParentId));
                }
                if (filters.ParentRedemptionId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[parent_redemption_id]", filters.ParentRedemptionId));
                }
                if (filters.FailureCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[failure_code]", filters.FailureCode));
                }
                if (filters.Result != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[result]", filters.Result));
                }
                if (filters.Object != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[object]", filters.Object));
                }
                if (filters.CustomerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[customer_id]", filters.CustomerId));
                }
                if (filters.CampaignName != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaign_name]", filters.CampaignName));
                }
                if (filters.UserLogin != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[user_login]", filters.UserLogin));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "RedemptionsApi.ListRedemptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RedemptionsListResponseBody>("/v1/redemptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRedemptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Redemptions Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsListResponseBody</returns>
        public async System.Threading.Tasks.Task<RedemptionsListResponseBody> ListRedemptionsAsync(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RedemptionsListResponseBody> localVarResponse = await ListRedemptionsWithHttpInfoAsync(limit, page, result, campaign, customer, order, createdAt, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Redemptions Returns a list of redemptions previously created. The redemptions are returned in a sorted order, with the most recent redemptions appearing first. The response returns a list of redemptions of all vouchers.  # Filtering results The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date: https://api.voucherify.io/v1/redemptions?limit 3&amp;[created_at][before] 2017-09-08T13:52:18.227Z. A filter based on the object created_at field narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: [created_at][after], [created_at][before]. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z. # Failed Redemptions A redemption may fail for various reasons. You can figure out an exact reason from the failure_code: - resource_not_found - voucher with given code does not exist - voucher_not_active - voucher is not active yet (before start date) - voucher_expired - voucher has already expired (after expiration date) - voucher_disabled -  voucher has been disabled (active: false) - quantity_exceeded - vouchers redemptions limit has been exceeded - gift_amount_exceeded - gift amount has been exceeded - customer_rules_violated - customer did not match the segment - order_rules_violated - order did not match validation rules - invalid_order - order was specified incorrectly - invalid_amount - order amount was specified incorrectly - missing_amount - order amount was not specified - missing_order_items - order items were not specified - missing_customer - customer was not specified
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="result">A filter on the list based on the redemption result. Available options are: SUCCESS, FAILURE. You can provide multiple values by repeating the param. (optional)</param>
        /// <param name="campaign">A filter by the campaign **name** that the redemption resources originate from. (optional)</param>
        /// <param name="customer">Return redemptions performed by the customer with given id or source_id. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RedemptionsListResponseBody>> ListRedemptionsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string result = default(string), string campaign = default(string), string customer = default(string), ParameterOrderListRedemptions? order = default(ParameterOrderListRedemptions?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterFiltersListRedemptions filters = default(ParameterFiltersListRedemptions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (result != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "result", result));
            }
            if (campaign != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign", campaign));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (createdAt != null)
            {
                if (createdAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[before]", createdAt.Before));
                }
                if (createdAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[after]", createdAt.After));
                }
            }
            if (filters != null)
            {
                if (filters.VoucherCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucherCode]", filters.VoucherCode));
                }
                if (filters.RelatedObjectId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[relatedObjectId]", filters.RelatedObjectId));
                }
                if (filters.RelatedObjectParentId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[relatedObjectParentId]", filters.RelatedObjectParentId));
                }
                if (filters.ParentRedemptionId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[parentRedemptionId]", filters.ParentRedemptionId));
                }
                if (filters.FailureCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[failureCode]", filters.FailureCode));
                }
                if (filters.Result != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[result]", filters.Result));
                }
                if (filters.Object != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[varObject]", filters.Object));
                }
                if (filters.CustomerId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[customerId]", filters.CustomerId));
                }
                if (filters.CampaignName != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaignName]", filters.CampaignName));
                }
                if (filters.UserLogin != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[userLogin]", filters.UserLogin));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "RedemptionsApi.ListRedemptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RedemptionsListResponseBody>("/v1/redemptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRedemptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Stackable Discounts # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsRedeemResponseBody</returns>
        public RedemptionsRedeemResponseBody RedeemStackedDiscounts(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RedemptionsRedeemResponseBody> localVarResponse = RedeemStackedDiscountsWithHttpInfo(redemptionsRedeemRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Stackable Discounts # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsRedeemResponseBody</returns>
        public Voucherify.Client.ApiResponse<RedemptionsRedeemResponseBody> RedeemStackedDiscountsWithHttpInfo(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = redemptionsRedeemRequestBody;

            localVarRequestOptions.Operation = "RedemptionsApi.RedeemStackedDiscounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RedemptionsRedeemResponseBody>("/v1/redemptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemStackedDiscounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Stackable Discounts # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsRedeemResponseBody</returns>
        public async System.Threading.Tasks.Task<RedemptionsRedeemResponseBody> RedeemStackedDiscountsAsync(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RedemptionsRedeemResponseBody> localVarResponse = await RedeemStackedDiscountsWithHttpInfoAsync(redemptionsRedeemRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Stackable Discounts # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.      📘 Also available on client-side  This method is also accessible through public keys which you can use in client-side​ apps: mobile and web browser apps. Go to the dedicated endpoint to learn more.  - Use X-Client-Application-Id as the application ID header.  - Use X-Client-Token as the appliction secret key header.  - Use client-side base URL.  - Use an origin header for your custom domain.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionsRedeemRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsRedeemResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RedemptionsRedeemResponseBody>> RedeemStackedDiscountsWithHttpInfoAsync(RedemptionsRedeemRequestBody redemptionsRedeemRequestBody = default(RedemptionsRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = redemptionsRedeemRequestBody;

            localVarRequestOptions.Operation = "RedemptionsApi.RedeemStackedDiscounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RedemptionsRedeemResponseBody>("/v1/redemptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemStackedDiscounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Redemption Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsRollbackCreateResponseBody</returns>
        public RedemptionsRollbackCreateResponseBody RollbackRedemption(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RedemptionsRollbackCreateResponseBody> localVarResponse = RollbackRedemptionWithHttpInfo(redemptionId, reason, trackingId, redemptionsRollbackCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback Redemption Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsRollbackCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<RedemptionsRollbackCreateResponseBody> RollbackRedemptionWithHttpInfo(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'redemptionId' is set
            if (redemptionId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'redemptionId' when calling RedemptionsApi->RollbackRedemption");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redemptionId", Voucherify.Client.ClientUtils.ParameterToString(redemptionId)); // path parameter
            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));
            }
            if (trackingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "tracking_id", trackingId));
            }
            localVarRequestOptions.Data = redemptionsRollbackCreateRequestBody;

            localVarRequestOptions.Operation = "RedemptionsApi.RollbackRedemption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RedemptionsRollbackCreateResponseBody>("/v1/redemptions/{redemptionId}/rollback", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackRedemption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Redemption Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsRollbackCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<RedemptionsRollbackCreateResponseBody> RollbackRedemptionAsync(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RedemptionsRollbackCreateResponseBody> localVarResponse = await RollbackRedemptionWithHttpInfoAsync(redemptionId, reason, trackingId, redemptionsRollbackCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback Redemption Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. This endpoint rolls back only single redemptions, meaning those that are not stacked. Stacked redemptions belong to a parent redemption. To roll back a parent redemption, including all of its individual redemptions, use the POST Rollback Stackable Redemptions  🚧  You can roll back a redemption up to 3 months back.   # Effect  The operation  - creates a rollback entry in vouchers redemption history (redemption.redemption_entries) and  - gives 1 redemption back to the pool (decreases redeemed_quantity by 1).  # Returned funds  In case of *gift card vouchers*, this method returns funds back according to the source redemption. In case of *loyalty card vouchers*, this method returns points back according to the source redemption.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redemptionId">The original redemption ID to be rolled back (undone).</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbackCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsRollbackCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RedemptionsRollbackCreateResponseBody>> RollbackRedemptionWithHttpInfoAsync(string redemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbackCreateRequestBody redemptionsRollbackCreateRequestBody = default(RedemptionsRollbackCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redemptionId' is set
            if (redemptionId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'redemptionId' when calling RedemptionsApi->RollbackRedemption");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redemptionId", Voucherify.Client.ClientUtils.ParameterToString(redemptionId)); // path parameter
            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));
            }
            if (trackingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "tracking_id", trackingId));
            }
            localVarRequestOptions.Data = redemptionsRollbackCreateRequestBody;

            localVarRequestOptions.Operation = "RedemptionsApi.RollbackRedemption";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RedemptionsRollbackCreateResponseBody>("/v1/redemptions/{redemptionId}/rollback", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackRedemption", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Stackable Redemptions Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RedemptionsRollbacksCreateResponseBody</returns>
        public RedemptionsRollbacksCreateResponseBody RollbackStackedRedemptions(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<RedemptionsRollbacksCreateResponseBody> localVarResponse = RollbackStackedRedemptionsWithHttpInfo(parentRedemptionId, reason, trackingId, redemptionsRollbacksCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback Stackable Redemptions Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RedemptionsRollbacksCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<RedemptionsRollbacksCreateResponseBody> RollbackStackedRedemptionsWithHttpInfo(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'parentRedemptionId' is set
            if (parentRedemptionId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'parentRedemptionId' when calling RedemptionsApi->RollbackStackedRedemptions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parentRedemptionId", Voucherify.Client.ClientUtils.ParameterToString(parentRedemptionId)); // path parameter
            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));
            }
            if (trackingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "tracking_id", trackingId));
            }
            localVarRequestOptions.Data = redemptionsRollbacksCreateRequestBody;

            localVarRequestOptions.Operation = "RedemptionsApi.RollbackStackedRedemptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RedemptionsRollbacksCreateResponseBody>("/v1/redemptions/{parentRedemptionId}/rollbacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackStackedRedemptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rollback Stackable Redemptions Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RedemptionsRollbacksCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<RedemptionsRollbacksCreateResponseBody> RollbackStackedRedemptionsAsync(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<RedemptionsRollbacksCreateResponseBody> localVarResponse = await RollbackStackedRedemptionsWithHttpInfoAsync(parentRedemptionId, reason, trackingId, redemptionsRollbacksCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rollback Stackable Redemptions Rollback a stackable redemption. When you roll back a stacked redemption, all child redemptions will be rolled back. Provide the parent redemption ID as the path parameter. However, you can use this endpoint to roll back a single redemption that does not have a parent, similarly to POST Rollback redemption. 🚧   You can roll back a redemption up to 3 months back.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentRedemptionId">Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm.</param>
        /// <param name="reason">Reason for the rollback. (optional)</param>
        /// <param name="trackingId">Customers source_id. (optional)</param>
        /// <param name="redemptionsRollbacksCreateRequestBody">Add information about the original customer and order. Customer data and Redemption metadata can be updated in Voucherify when passing the customer data in the request body. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RedemptionsRollbacksCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<RedemptionsRollbacksCreateResponseBody>> RollbackStackedRedemptionsWithHttpInfoAsync(string parentRedemptionId, string reason = default(string), string trackingId = default(string), RedemptionsRollbacksCreateRequestBody redemptionsRollbacksCreateRequestBody = default(RedemptionsRollbacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'parentRedemptionId' is set
            if (parentRedemptionId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'parentRedemptionId' when calling RedemptionsApi->RollbackStackedRedemptions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("parentRedemptionId", Voucherify.Client.ClientUtils.ParameterToString(parentRedemptionId)); // path parameter
            if (reason != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "reason", reason));
            }
            if (trackingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "tracking_id", trackingId));
            }
            localVarRequestOptions.Data = redemptionsRollbacksCreateRequestBody;

            localVarRequestOptions.Operation = "RedemptionsApi.RollbackStackedRedemptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RedemptionsRollbacksCreateResponseBody>("/v1/redemptions/{parentRedemptionId}/rollbacks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RollbackStackedRedemptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
