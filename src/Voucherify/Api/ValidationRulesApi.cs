/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidationRulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Validation Rules Assignments
        /// </summary>
        /// <remarks>
        /// Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesAssignmentsCreateResponseBody</returns>
        ValidationRulesAssignmentsCreateResponseBody CreateValidationRuleAssignment(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Validation Rules Assignments
        /// </summary>
        /// <remarks>
        /// Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesAssignmentsCreateResponseBody</returns>
        ApiResponse<ValidationRulesAssignmentsCreateResponseBody> CreateValidationRuleAssignmentWithHttpInfo(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Validation Rules
        /// </summary>
        /// <remarks>
        /// Create validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesCreateResponseBody</returns>
        ValidationRulesCreateResponseBody CreateValidationRules(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Validation Rules
        /// </summary>
        /// <remarks>
        /// Create validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesCreateResponseBody</returns>
        ApiResponse<ValidationRulesCreateResponseBody> CreateValidationRulesWithHttpInfo(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Delete Validation Rule Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteValidationRuleAssignment(string validationRuleId, string assignmentId, int operationIndex = 0);

        /// <summary>
        /// Delete Validation Rule Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteValidationRuleAssignmentWithHttpInfo(string validationRuleId, string assignmentId, int operationIndex = 0);
        /// <summary>
        /// Delete Validation Rule
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteValidationRules(string validationRuleId, int operationIndex = 0);

        /// <summary>
        /// Delete Validation Rule
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteValidationRulesWithHttpInfo(string validationRuleId, int operationIndex = 0);
        /// <summary>
        /// Get Validation Rule
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesGetResponseBody</returns>
        ValidationRulesGetResponseBody GetValidationRule(string validationRuleId, int operationIndex = 0);

        /// <summary>
        /// Get Validation Rule
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesGetResponseBody</returns>
        ApiResponse<ValidationRulesGetResponseBody> GetValidationRuleWithHttpInfo(string validationRuleId, int operationIndex = 0);
        /// <summary>
        /// List Validation Rule Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve validation rule assignments for a specific validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesAssignmentsListResponseBody</returns>
        ValidationRulesAssignmentsListResponseBody ListValidationRuleAssignments(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0);

        /// <summary>
        /// List Validation Rule Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve validation rule assignments for a specific validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesAssignmentsListResponseBody</returns>
        ApiResponse<ValidationRulesAssignmentsListResponseBody> ListValidationRuleAssignmentsWithHttpInfo(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0);
        /// <summary>
        /// List Validation Rules
        /// </summary>
        /// <remarks>
        /// Retrieve validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesListResponseBody</returns>
        ValidationRulesListResponseBody ListValidationRules(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0);

        /// <summary>
        /// List Validation Rules
        /// </summary>
        /// <remarks>
        /// Retrieve validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesListResponseBody</returns>
        ApiResponse<ValidationRulesListResponseBody> ListValidationRulesWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0);
        /// <summary>
        /// List Validation Rules&#39; Assignment(s)
        /// </summary>
        /// <remarks>
        /// List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesAssignmentsListResponseBody</returns>
        ValidationRulesAssignmentsListResponseBody ListValidationRulesAssignments(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0);

        /// <summary>
        /// List Validation Rules&#39; Assignment(s)
        /// </summary>
        /// <remarks>
        /// List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesAssignmentsListResponseBody</returns>
        ApiResponse<ValidationRulesAssignmentsListResponseBody> ListValidationRulesAssignmentsWithHttpInfo(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0);
        /// <summary>
        /// Update Validation Rule
        /// </summary>
        /// <remarks>
        /// Update validation rule parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesUpdateResponseBody</returns>
        ValidationRulesUpdateResponseBody UpdateValidationRule(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Validation Rule
        /// </summary>
        /// <remarks>
        /// Update validation rule parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesUpdateResponseBody</returns>
        ApiResponse<ValidationRulesUpdateResponseBody> UpdateValidationRuleWithHttpInfo(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidationRulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Validation Rules Assignments
        /// </summary>
        /// <remarks>
        /// Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesAssignmentsCreateResponseBody</returns>
        System.Threading.Tasks.Task<ValidationRulesAssignmentsCreateResponseBody> CreateValidationRuleAssignmentAsync(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Validation Rules Assignments
        /// </summary>
        /// <remarks>
        /// Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesAssignmentsCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationRulesAssignmentsCreateResponseBody>> CreateValidationRuleAssignmentWithHttpInfoAsync(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Validation Rules
        /// </summary>
        /// <remarks>
        /// Create validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesCreateResponseBody</returns>
        System.Threading.Tasks.Task<ValidationRulesCreateResponseBody> CreateValidationRulesAsync(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Validation Rules
        /// </summary>
        /// <remarks>
        /// Create validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationRulesCreateResponseBody>> CreateValidationRulesWithHttpInfoAsync(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Validation Rule Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteValidationRuleAssignmentAsync(string validationRuleId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Validation Rule Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteValidationRuleAssignmentWithHttpInfoAsync(string validationRuleId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Validation Rule
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteValidationRulesAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Validation Rule
        /// </summary>
        /// <remarks>
        /// This method deletes a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteValidationRulesWithHttpInfoAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Validation Rule
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesGetResponseBody</returns>
        System.Threading.Tasks.Task<ValidationRulesGetResponseBody> GetValidationRuleAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Validation Rule
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationRulesGetResponseBody>> GetValidationRuleWithHttpInfoAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Validation Rule Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve validation rule assignments for a specific validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesAssignmentsListResponseBody</returns>
        System.Threading.Tasks.Task<ValidationRulesAssignmentsListResponseBody> ListValidationRuleAssignmentsAsync(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Validation Rule Assignments
        /// </summary>
        /// <remarks>
        /// Retrieve validation rule assignments for a specific validation rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesAssignmentsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationRulesAssignmentsListResponseBody>> ListValidationRuleAssignmentsWithHttpInfoAsync(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Validation Rules
        /// </summary>
        /// <remarks>
        /// Retrieve validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesListResponseBody</returns>
        System.Threading.Tasks.Task<ValidationRulesListResponseBody> ListValidationRulesAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Validation Rules
        /// </summary>
        /// <remarks>
        /// Retrieve validation rules.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationRulesListResponseBody>> ListValidationRulesWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Validation Rules&#39; Assignment(s)
        /// </summary>
        /// <remarks>
        /// List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesAssignmentsListResponseBody</returns>
        System.Threading.Tasks.Task<ValidationRulesAssignmentsListResponseBody> ListValidationRulesAssignmentsAsync(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Validation Rules&#39; Assignment(s)
        /// </summary>
        /// <remarks>
        /// List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesAssignmentsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationRulesAssignmentsListResponseBody>> ListValidationRulesAssignmentsWithHttpInfoAsync(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Validation Rule
        /// </summary>
        /// <remarks>
        /// Update validation rule parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ValidationRulesUpdateResponseBody> UpdateValidationRuleAsync(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Validation Rule
        /// </summary>
        /// <remarks>
        /// Update validation rule parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidationRulesUpdateResponseBody>> UpdateValidationRuleWithHttpInfoAsync(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidationRulesApi : IValidationRulesApiSync, IValidationRulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ValidationRulesApi : IValidationRulesApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationRulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ValidationRulesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationRulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ValidationRulesApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationRulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ValidationRulesApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationRulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ValidationRulesApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Validation Rules Assignments Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesAssignmentsCreateResponseBody</returns>
        public ValidationRulesAssignmentsCreateResponseBody CreateValidationRuleAssignment(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ValidationRulesAssignmentsCreateResponseBody> localVarResponse = CreateValidationRuleAssignmentWithHttpInfo(validationRuleId, force, validationRulesAssignmentsCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Validation Rules Assignments Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesAssignmentsCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ValidationRulesAssignmentsCreateResponseBody> CreateValidationRuleAssignmentWithHttpInfo(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->CreateValidationRuleAssignment");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }
            localVarRequestOptions.Data = validationRulesAssignmentsCreateRequestBody;

            localVarRequestOptions.Operation = "ValidationRulesApi.CreateValidationRuleAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ValidationRulesAssignmentsCreateResponseBody>("/v1/validation-rules/{validationRuleId}/assignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateValidationRuleAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Validation Rules Assignments Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesAssignmentsCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ValidationRulesAssignmentsCreateResponseBody> CreateValidationRuleAssignmentAsync(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ValidationRulesAssignmentsCreateResponseBody> localVarResponse = await CreateValidationRuleAssignmentWithHttpInfoAsync(validationRuleId, force, validationRulesAssignmentsCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Validation Rules Assignments Assign validation rule to either one of the following objects: voucher, campaign, promotion tier, earning rule, reward, distribution.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="force">If this flag is set to true, the previous assignment with the same data will be deleted and a new one will be added. (optional)</param>
        /// <param name="validationRulesAssignmentsCreateRequestBody">Specify the resource that you would like to assign the validation rule to. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesAssignmentsCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ValidationRulesAssignmentsCreateResponseBody>> CreateValidationRuleAssignmentWithHttpInfoAsync(string validationRuleId, bool? force = default(bool?), ValidationRulesAssignmentsCreateRequestBody validationRulesAssignmentsCreateRequestBody = default(ValidationRulesAssignmentsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->CreateValidationRuleAssignment");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }
            localVarRequestOptions.Data = validationRulesAssignmentsCreateRequestBody;

            localVarRequestOptions.Operation = "ValidationRulesApi.CreateValidationRuleAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ValidationRulesAssignmentsCreateResponseBody>("/v1/validation-rules/{validationRuleId}/assignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateValidationRuleAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Validation Rules Create validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesCreateResponseBody</returns>
        public ValidationRulesCreateResponseBody CreateValidationRules(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ValidationRulesCreateResponseBody> localVarResponse = CreateValidationRulesWithHttpInfo(validationRulesCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Validation Rules Create validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ValidationRulesCreateResponseBody> CreateValidationRulesWithHttpInfo(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validationRulesCreateRequestBody;

            localVarRequestOptions.Operation = "ValidationRulesApi.CreateValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ValidationRulesCreateResponseBody>("/v1/validation-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Validation Rules Create validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ValidationRulesCreateResponseBody> CreateValidationRulesAsync(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ValidationRulesCreateResponseBody> localVarResponse = await CreateValidationRulesWithHttpInfoAsync(validationRulesCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Validation Rules Create validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRulesCreateRequestBody">Specify the validation rules parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ValidationRulesCreateResponseBody>> CreateValidationRulesWithHttpInfoAsync(ValidationRulesCreateRequestBody validationRulesCreateRequestBody = default(ValidationRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validationRulesCreateRequestBody;

            localVarRequestOptions.Operation = "ValidationRulesApi.CreateValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ValidationRulesCreateResponseBody>("/v1/validation-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Validation Rule Assignment This method deletes a validation rule assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteValidationRuleAssignment(string validationRuleId, string assignmentId, int operationIndex = 0)
        {
            DeleteValidationRuleAssignmentWithHttpInfo(validationRuleId, assignmentId);
        }

        /// <summary>
        /// Delete Validation Rule Assignment This method deletes a validation rule assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteValidationRuleAssignmentWithHttpInfo(string validationRuleId, string assignmentId, int operationIndex = 0)
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->DeleteValidationRuleAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling ValidationRulesApi->DeleteValidationRuleAssignment");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "ValidationRulesApi.DeleteValidationRuleAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/validation-rules/{validationRuleId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteValidationRuleAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Validation Rule Assignment This method deletes a validation rule assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteValidationRuleAssignmentAsync(string validationRuleId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteValidationRuleAssignmentWithHttpInfoAsync(validationRuleId, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Validation Rule Assignment This method deletes a validation rule assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="assignmentId">A unique validation rule assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteValidationRuleAssignmentWithHttpInfoAsync(string validationRuleId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->DeleteValidationRuleAssignment");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling ValidationRulesApi->DeleteValidationRuleAssignment");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "ValidationRulesApi.DeleteValidationRuleAssignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/validation-rules/{validationRuleId}/assignments/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteValidationRuleAssignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Validation Rule This method deletes a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteValidationRules(string validationRuleId, int operationIndex = 0)
        {
            DeleteValidationRulesWithHttpInfo(validationRuleId);
        }

        /// <summary>
        /// Delete Validation Rule This method deletes a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteValidationRulesWithHttpInfo(string validationRuleId, int operationIndex = 0)
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->DeleteValidationRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter

            localVarRequestOptions.Operation = "ValidationRulesApi.DeleteValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/validation-rules/{validationRuleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Validation Rule This method deletes a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteValidationRulesAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteValidationRulesWithHttpInfoAsync(validationRuleId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Validation Rule This method deletes a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteValidationRulesWithHttpInfoAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->DeleteValidationRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter

            localVarRequestOptions.Operation = "ValidationRulesApi.DeleteValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/validation-rules/{validationRuleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Validation Rule Retrieve the details of a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesGetResponseBody</returns>
        public ValidationRulesGetResponseBody GetValidationRule(string validationRuleId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ValidationRulesGetResponseBody> localVarResponse = GetValidationRuleWithHttpInfo(validationRuleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Validation Rule Retrieve the details of a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ValidationRulesGetResponseBody> GetValidationRuleWithHttpInfo(string validationRuleId, int operationIndex = 0)
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->GetValidationRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter

            localVarRequestOptions.Operation = "ValidationRulesApi.GetValidationRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ValidationRulesGetResponseBody>("/v1/validation-rules/{validationRuleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetValidationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Validation Rule Retrieve the details of a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ValidationRulesGetResponseBody> GetValidationRuleAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ValidationRulesGetResponseBody> localVarResponse = await GetValidationRuleWithHttpInfoAsync(validationRuleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Validation Rule Retrieve the details of a validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ValidationRulesGetResponseBody>> GetValidationRuleWithHttpInfoAsync(string validationRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->GetValidationRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter

            localVarRequestOptions.Operation = "ValidationRulesApi.GetValidationRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ValidationRulesGetResponseBody>("/v1/validation-rules/{validationRuleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetValidationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Validation Rule Assignments Retrieve validation rule assignments for a specific validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesAssignmentsListResponseBody</returns>
        public ValidationRulesAssignmentsListResponseBody ListValidationRuleAssignments(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody> localVarResponse = ListValidationRuleAssignmentsWithHttpInfo(validationRuleId, limit, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Validation Rule Assignments Retrieve validation rule assignments for a specific validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesAssignmentsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody> ListValidationRuleAssignmentsWithHttpInfo(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0)
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->ListValidationRuleAssignments");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ValidationRulesApi.ListValidationRuleAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ValidationRulesAssignmentsListResponseBody>("/v1/validation-rules/{validationRuleId}/assignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListValidationRuleAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Validation Rule Assignments Retrieve validation rule assignments for a specific validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesAssignmentsListResponseBody</returns>
        public async System.Threading.Tasks.Task<ValidationRulesAssignmentsListResponseBody> ListValidationRuleAssignmentsAsync(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody> localVarResponse = await ListValidationRuleAssignmentsWithHttpInfoAsync(validationRuleId, limit, page, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Validation Rule Assignments Retrieve validation rule assignments for a specific validation rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">Unique validation rule ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesAssignmentsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody>> ListValidationRuleAssignmentsWithHttpInfoAsync(string validationRuleId, int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRuleAssignments? order = default(ParameterOrderListValidationRuleAssignments?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->ListValidationRuleAssignments");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ValidationRulesApi.ListValidationRuleAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ValidationRulesAssignmentsListResponseBody>("/v1/validation-rules/{validationRuleId}/assignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListValidationRuleAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Validation Rules Retrieve validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesListResponseBody</returns>
        public ValidationRulesListResponseBody ListValidationRules(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ValidationRulesListResponseBody> localVarResponse = ListValidationRulesWithHttpInfo(limit, page, order, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Validation Rules Retrieve validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ValidationRulesListResponseBody> ListValidationRulesWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            localVarRequestOptions.Operation = "ValidationRulesApi.ListValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ValidationRulesListResponseBody>("/v1/validation-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Validation Rules Retrieve validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesListResponseBody</returns>
        public async System.Threading.Tasks.Task<ValidationRulesListResponseBody> ListValidationRulesAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ValidationRulesListResponseBody> localVarResponse = await ListValidationRulesWithHttpInfoAsync(limit, page, order, startDate, endDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Validation Rules Retrieve validation rules.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must start on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ValidationRulesListResponseBody>> ListValidationRulesWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListValidationRules? order = default(ParameterOrderListValidationRules?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            localVarRequestOptions.Operation = "ValidationRulesApi.ListValidationRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ValidationRulesListResponseBody>("/v1/validation-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListValidationRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Validation Rules&#39; Assignment(s) List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesAssignmentsListResponseBody</returns>
        public ValidationRulesAssignmentsListResponseBody ListValidationRulesAssignments(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody> localVarResponse = ListValidationRulesAssignmentsWithHttpInfo(relatedObjectId, rule, page, limit, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Validation Rules&#39; Assignment(s) List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesAssignmentsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody> ListValidationRulesAssignmentsWithHttpInfo(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (relatedObjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "related_object_id", relatedObjectId));
            }
            if (rule != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "rule", rule));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ValidationRulesApi.ListValidationRulesAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ValidationRulesAssignmentsListResponseBody>("/v1/validation-rules-assignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListValidationRulesAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Validation Rules&#39; Assignment(s) List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesAssignmentsListResponseBody</returns>
        public async System.Threading.Tasks.Task<ValidationRulesAssignmentsListResponseBody> ListValidationRulesAssignmentsAsync(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody> localVarResponse = await ListValidationRulesAssignmentsWithHttpInfoAsync(relatedObjectId, rule, page, limit, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Validation Rules&#39; Assignment(s) List all validation rules assignments or filter the results using the related object ID or the validation rule ID query parameters.  # How to retrieve specific validation rule assignments(s) ## Related object ID To find an assignment for a particular resource, you can use the ID of the object to which the validation rule was assigned. This could be, for example, an ID of a: voucher, campaign, distribution, reward assignment, earning rule, promotion tier.    ## Validation rule ID You can use the validation rule ID to find assignment(s) for a specific validation rule.  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relatedObjectId">The resource ID to which the validation rule was assigned; this could be, for example, a resource ID of a voucher, campaign, earning rule, reward assignment, promotion tier, or distribution. (optional)</param>
        /// <param name="rule">Validation rule ID. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options: -created_at, created_at, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesAssignmentsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ValidationRulesAssignmentsListResponseBody>> ListValidationRulesAssignmentsWithHttpInfoAsync(string relatedObjectId = default(string), string rule = default(string), int? page = default(int?), int? limit = default(int?), string order = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (relatedObjectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "related_object_id", relatedObjectId));
            }
            if (rule != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "rule", rule));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "ValidationRulesApi.ListValidationRulesAssignments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ValidationRulesAssignmentsListResponseBody>("/v1/validation-rules-assignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListValidationRulesAssignments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Validation Rule Update validation rule parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidationRulesUpdateResponseBody</returns>
        public ValidationRulesUpdateResponseBody UpdateValidationRule(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ValidationRulesUpdateResponseBody> localVarResponse = UpdateValidationRuleWithHttpInfo(validationRuleId, validationRulesUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Validation Rule Update validation rule parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidationRulesUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ValidationRulesUpdateResponseBody> UpdateValidationRuleWithHttpInfo(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->UpdateValidationRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            localVarRequestOptions.Data = validationRulesUpdateRequestBody;

            localVarRequestOptions.Operation = "ValidationRulesApi.UpdateValidationRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ValidationRulesUpdateResponseBody>("/v1/validation-rules/{validationRuleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateValidationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Validation Rule Update validation rule parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidationRulesUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ValidationRulesUpdateResponseBody> UpdateValidationRuleAsync(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ValidationRulesUpdateResponseBody> localVarResponse = await UpdateValidationRuleWithHttpInfoAsync(validationRuleId, validationRulesUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Validation Rule Update validation rule parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validationRuleId">A unique validation rule ID.</param>
        /// <param name="validationRulesUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidationRulesUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ValidationRulesUpdateResponseBody>> UpdateValidationRuleWithHttpInfoAsync(string validationRuleId, ValidationRulesUpdateRequestBody validationRulesUpdateRequestBody = default(ValidationRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'validationRuleId' is set
            if (validationRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'validationRuleId' when calling ValidationRulesApi->UpdateValidationRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("validationRuleId", Voucherify.Client.ClientUtils.ParameterToString(validationRuleId)); // path parameter
            localVarRequestOptions.Data = validationRulesUpdateRequestBody;

            localVarRequestOptions.Operation = "ValidationRulesApi.UpdateValidationRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ValidationRulesUpdateResponseBody>("/v1/validation-rules/{validationRuleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateValidationRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
