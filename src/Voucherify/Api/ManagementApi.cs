/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersAssignResponseBody</returns>
        ManagementProjectsUsersAssignResponseBody AssignUser(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0);

        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersAssignResponseBody</returns>
        ApiResponse<ManagementProjectsUsersAssignResponseBody> AssignUserWithHttpInfo(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Brand
        /// </summary>
        /// <remarks>
        /// Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingCreateResponseBody</returns>
        ManagementProjectsBrandingCreateResponseBody CreateBrand(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Brand
        /// </summary>
        /// <remarks>
        /// Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingCreateResponseBody</returns>
        ApiResponse<ManagementProjectsBrandingCreateResponseBody> CreateBrandWithHttpInfo(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasCreateResponseBody</returns>
        ManagementProjectsCustomEventSchemasCreateResponseBody CreateCustomEventSchema(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasCreateResponseBody</returns>
        ApiResponse<ManagementProjectsCustomEventSchemasCreateResponseBody> CreateCustomEventSchemaWithHttpInfo(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Metadata Schema
        /// </summary>
        /// <remarks>
        /// Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasCreateResponseBody</returns>
        ManagementProjectsMetadataSchemasCreateResponseBody CreateMetadataSchema(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Metadata Schema
        /// </summary>
        /// <remarks>
        /// Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasCreateResponseBody</returns>
        ApiResponse<ManagementProjectsMetadataSchemasCreateResponseBody> CreateMetadataSchemaWithHttpInfo(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCreateResponseBody</returns>
        ManagementProjectsCreateResponseBody CreateProject(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCreateResponseBody</returns>
        ApiResponse<ManagementProjectsCreateResponseBody> CreateProjectWithHttpInfo(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Stacking Rules
        /// </summary>
        /// <remarks>
        /// Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesCreateResponseBody</returns>
        ManagementProjectsStackingRulesCreateResponseBody CreateStackingRules(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Stacking Rules
        /// </summary>
        /// <remarks>
        /// Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesCreateResponseBody</returns>
        ApiResponse<ManagementProjectsStackingRulesCreateResponseBody> CreateStackingRulesWithHttpInfo(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksCreateResponseBody</returns>
        ManagementProjectsWebhooksCreateResponseBody CreateWebhook(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksCreateResponseBody</returns>
        ApiResponse<ManagementProjectsWebhooksCreateResponseBody> CreateWebhookWithHttpInfo(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Delete Brand
        /// </summary>
        /// <remarks>
        /// Deletes permanently a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteBrand(string projectId, string brandingId, int operationIndex = 0);

        /// <summary>
        /// Delete Brand
        /// </summary>
        /// <remarks>
        /// Deletes permanently a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteBrandWithHttpInfo(string projectId, string brandingId, int operationIndex = 0);
        /// <summary>
        /// Delete Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCustomEventSchema(string projectId, string customEventSchemaId, int operationIndex = 0);

        /// <summary>
        /// Delete Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomEventSchemaWithHttpInfo(string projectId, string customEventSchemaId, int operationIndex = 0);
        /// <summary>
        /// Delete Metadata Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteMetadataSchema(string projectId, string metadataSchemaId, int operationIndex = 0);

        /// <summary>
        /// Delete Metadata Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMetadataSchemaWithHttpInfo(string projectId, string metadataSchemaId, int operationIndex = 0);
        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteProject(string projectId, int operationIndex = 0);

        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProjectWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// Delete Stacking Rules
        /// </summary>
        /// <remarks>
        /// Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteStackingRules(string projectId, string stackingRulesId, int operationIndex = 0);

        /// <summary>
        /// Delete Stacking Rules
        /// </summary>
        /// <remarks>
        /// Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStackingRulesWithHttpInfo(string projectId, string stackingRulesId, int operationIndex = 0);
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteWebhook(string projectId, string webhookId, int operationIndex = 0);

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWebhookWithHttpInfo(string projectId, string webhookId, int operationIndex = 0);
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Retrieves a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingGetResponseBody</returns>
        ManagementProjectsBrandingGetResponseBody GetBrand(string projectId, string brandingId, int operationIndex = 0);

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Retrieves a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingGetResponseBody</returns>
        ApiResponse<ManagementProjectsBrandingGetResponseBody> GetBrandWithHttpInfo(string projectId, string brandingId, int operationIndex = 0);
        /// <summary>
        /// Get Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasGetResponseBody</returns>
        ManagementProjectsCustomEventSchemasGetResponseBody GetCustomEventSchema(string projectId, string customEventSchemaId, int operationIndex = 0);

        /// <summary>
        /// Get Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasGetResponseBody</returns>
        ApiResponse<ManagementProjectsCustomEventSchemasGetResponseBody> GetCustomEventSchemaWithHttpInfo(string projectId, string customEventSchemaId, int operationIndex = 0);
        /// <summary>
        /// Get Metadata Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasGetResponseBody</returns>
        ManagementProjectsMetadataSchemasGetResponseBody GetMetadataSchema1(string projectId, string metadataSchemaId, int operationIndex = 0);

        /// <summary>
        /// Get Metadata Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasGetResponseBody</returns>
        ApiResponse<ManagementProjectsMetadataSchemasGetResponseBody> GetMetadataSchema1WithHttpInfo(string projectId, string metadataSchemaId, int operationIndex = 0);
        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Retrieves an existing project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsGetResponseBody</returns>
        ManagementProjectsGetResponseBody GetProject(string projectId, int operationIndex = 0);

        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Retrieves an existing project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsGetResponseBody</returns>
        ApiResponse<ManagementProjectsGetResponseBody> GetProjectWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// Get Stacking Rules
        /// </summary>
        /// <remarks>
        /// Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesGetResponseBody</returns>
        ManagementProjectsStackingRulesGetResponseBody GetStackingRules(string projectId, string stackingRulesId, int operationIndex = 0);

        /// <summary>
        /// Get Stacking Rules
        /// </summary>
        /// <remarks>
        /// Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesGetResponseBody</returns>
        ApiResponse<ManagementProjectsStackingRulesGetResponseBody> GetStackingRulesWithHttpInfo(string projectId, string stackingRulesId, int operationIndex = 0);
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves the project users details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersGetUserResponseBody</returns>
        ManagementProjectsUsersGetUserResponseBody GetUser(string projectId, string userId, int operationIndex = 0);

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves the project users details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersGetUserResponseBody</returns>
        ApiResponse<ManagementProjectsUsersGetUserResponseBody> GetUserWithHttpInfo(string projectId, string userId, int operationIndex = 0);
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksGetResponseBody</returns>
        ManagementProjectsWebhooksGetResponseBody GetWebhook(string projectId, string webhookId, int operationIndex = 0);

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksGetResponseBody</returns>
        ApiResponse<ManagementProjectsWebhooksGetResponseBody> GetWebhookWithHttpInfo(string projectId, string webhookId, int operationIndex = 0);
        /// <summary>
        /// Invite a New User
        /// </summary>
        /// <remarks>
        /// Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void InviteUser(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Invite a New User
        /// </summary>
        /// <remarks>
        /// Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InviteUserWithHttpInfo(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingListResponseBody</returns>
        ManagementProjectsBrandingListResponseBody ListBrands(string projectId, int operationIndex = 0);

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingListResponseBody</returns>
        ApiResponse<ManagementProjectsBrandingListResponseBody> ListBrandsWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// List Custom Event Schemas
        /// </summary>
        /// <remarks>
        /// Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasListResponseBody</returns>
        ManagementProjectsCustomEventSchemasListResponseBody ListCustomEventSchemas(string projectId, int operationIndex = 0);

        /// <summary>
        /// List Custom Event Schemas
        /// </summary>
        /// <remarks>
        /// Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasListResponseBody</returns>
        ApiResponse<ManagementProjectsCustomEventSchemasListResponseBody> ListCustomEventSchemasWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// List Metadata Schemas
        /// </summary>
        /// <remarks>
        /// Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasListResponseBody</returns>
        ManagementProjectsMetadataSchemasListResponseBody ListMetadataSchemas1(string projectId, int operationIndex = 0);

        /// <summary>
        /// List Metadata Schemas
        /// </summary>
        /// <remarks>
        /// Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasListResponseBody</returns>
        ApiResponse<ManagementProjectsMetadataSchemasListResponseBody> ListMetadataSchemas1WithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsListResponseBody</returns>
        ManagementProjectsListResponseBody ListProjects(int operationIndex = 0);

        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsListResponseBody</returns>
        ApiResponse<ManagementProjectsListResponseBody> ListProjectsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List Stacking Rules
        /// </summary>
        /// <remarks>
        /// Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesListResponseBody</returns>
        ManagementProjectsStackingRulesListResponseBody ListStackingRules(string projectId, int operationIndex = 0);

        /// <summary>
        /// List Stacking Rules
        /// </summary>
        /// <remarks>
        /// Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesListResponseBody</returns>
        ApiResponse<ManagementProjectsStackingRulesListResponseBody> ListStackingRulesWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Lists all users assigned to the project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersListResponseBody</returns>
        ManagementProjectsUsersListResponseBody ListUsers(string projectId, int operationIndex = 0);

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Lists all users assigned to the project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersListResponseBody</returns>
        ApiResponse<ManagementProjectsUsersListResponseBody> ListUsersWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksListResponseBody</returns>
        ManagementProjectsWebhooksListResponseBody ListWebhooks(string projectId, int operationIndex = 0);

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksListResponseBody</returns>
        ApiResponse<ManagementProjectsWebhooksListResponseBody> ListWebhooksWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// Copy Campaign Template to a Project
        /// </summary>
        /// <remarks>
        /// Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsTemplatesCampaignsCopyCreateResponseBody</returns>
        ManagementProjectsTemplatesCampaignsCopyCreateResponseBody ManagementCopyCampaignTemplate(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Copy Campaign Template to a Project
        /// </summary>
        /// <remarks>
        /// Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsTemplatesCampaignsCopyCreateResponseBody</returns>
        ApiResponse<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody> ManagementCopyCampaignTemplateWithHttpInfo(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// List Campaign Templates
        /// </summary>
        /// <remarks>
        /// Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsTemplatesCampaignsListResponseBody</returns>
        ManagementProjectsTemplatesCampaignsListResponseBody ManagementListCampaignTemplates(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0);

        /// <summary>
        /// List Campaign Templates
        /// </summary>
        /// <remarks>
        /// Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsTemplatesCampaignsListResponseBody</returns>
        ApiResponse<ManagementProjectsTemplatesCampaignsListResponseBody> ManagementListCampaignTemplatesWithHttpInfo(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0);
        /// <summary>
        /// Unassign User
        /// </summary>
        /// <remarks>
        /// Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UnassignUser(string projectId, string userId, int operationIndex = 0);

        /// <summary>
        /// Unassign User
        /// </summary>
        /// <remarks>
        /// Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnassignUserWithHttpInfo(string projectId, string userId, int operationIndex = 0);
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingUpdateResponseBody</returns>
        ManagementProjectsBrandingUpdateResponseBody UpdateBrand(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingUpdateResponseBody</returns>
        ApiResponse<ManagementProjectsBrandingUpdateResponseBody> UpdateBrandWithHttpInfo(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasUpdateResponseBody</returns>
        ManagementProjectsCustomEventSchemasUpdateResponseBody UpdateCustomEventSchema(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasUpdateResponseBody</returns>
        ApiResponse<ManagementProjectsCustomEventSchemasUpdateResponseBody> UpdateCustomEventSchemaWithHttpInfo(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Metadata Schema
        /// </summary>
        /// <remarks>
        /// Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasUpdateResponseBody</returns>
        ManagementProjectsMetadataSchemasUpdateResponseBody UpdateMetadataSchema(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Metadata Schema
        /// </summary>
        /// <remarks>
        /// Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasUpdateResponseBody</returns>
        ApiResponse<ManagementProjectsMetadataSchemasUpdateResponseBody> UpdateMetadataSchemaWithHttpInfo(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUpdateResponseBody</returns>
        ManagementProjectsUpdateResponseBody UpdateProject(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUpdateResponseBody</returns>
        ApiResponse<ManagementProjectsUpdateResponseBody> UpdateProjectWithHttpInfo(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Stacking Rules
        /// </summary>
        /// <remarks>
        /// Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesUpdateResponseBody</returns>
        ManagementProjectsStackingRulesUpdateResponseBody UpdateStackingRules(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Stacking Rules
        /// </summary>
        /// <remarks>
        /// Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesUpdateResponseBody</returns>
        ApiResponse<ManagementProjectsStackingRulesUpdateResponseBody> UpdateStackingRulesWithHttpInfo(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates the users role.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersUpdateRoleResponseBody</returns>
        ManagementProjectsUsersUpdateRoleResponseBody UpdateUser(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates the users role.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersUpdateRoleResponseBody</returns>
        ApiResponse<ManagementProjectsUsersUpdateRoleResponseBody> UpdateUserWithHttpInfo(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksUpdateResponseBody</returns>
        ManagementProjectsWebhooksUpdateResponseBody UpdateWebhook(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksUpdateResponseBody</returns>
        ApiResponse<ManagementProjectsWebhooksUpdateResponseBody> UpdateWebhookWithHttpInfo(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersAssignResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsUsersAssignResponseBody> AssignUserAsync(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign User
        /// </summary>
        /// <remarks>
        /// Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersAssignResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsUsersAssignResponseBody>> AssignUserWithHttpInfoAsync(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Brand
        /// </summary>
        /// <remarks>
        /// Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingCreateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsBrandingCreateResponseBody> CreateBrandAsync(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Brand
        /// </summary>
        /// <remarks>
        /// Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsBrandingCreateResponseBody>> CreateBrandWithHttpInfoAsync(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasCreateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasCreateResponseBody> CreateCustomEventSchemaAsync(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsCustomEventSchemasCreateResponseBody>> CreateCustomEventSchemaWithHttpInfoAsync(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Metadata Schema
        /// </summary>
        /// <remarks>
        /// Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasCreateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasCreateResponseBody> CreateMetadataSchemaAsync(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Metadata Schema
        /// </summary>
        /// <remarks>
        /// Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsMetadataSchemasCreateResponseBody>> CreateMetadataSchemaWithHttpInfoAsync(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCreateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsCreateResponseBody> CreateProjectAsync(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Project
        /// </summary>
        /// <remarks>
        /// Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsCreateResponseBody>> CreateProjectWithHttpInfoAsync(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Stacking Rules
        /// </summary>
        /// <remarks>
        /// Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesCreateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsStackingRulesCreateResponseBody> CreateStackingRulesAsync(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Stacking Rules
        /// </summary>
        /// <remarks>
        /// Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsStackingRulesCreateResponseBody>> CreateStackingRulesWithHttpInfoAsync(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksCreateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsWebhooksCreateResponseBody> CreateWebhookAsync(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Webhook
        /// </summary>
        /// <remarks>
        /// Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsWebhooksCreateResponseBody>> CreateWebhookWithHttpInfoAsync(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Brand
        /// </summary>
        /// <remarks>
        /// Deletes permanently a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteBrandAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Brand
        /// </summary>
        /// <remarks>
        /// Deletes permanently a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteBrandWithHttpInfoAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomEventSchemaAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomEventSchemaWithHttpInfoAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Metadata Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMetadataSchemaAsync(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Metadata Schema
        /// </summary>
        /// <remarks>
        /// Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMetadataSchemaWithHttpInfoAsync(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProjectAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Project
        /// </summary>
        /// <remarks>
        /// Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProjectWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Stacking Rules
        /// </summary>
        /// <remarks>
        /// Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStackingRulesAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Stacking Rules
        /// </summary>
        /// <remarks>
        /// Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStackingRulesWithHttpInfoAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteWebhookAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Webhook
        /// </summary>
        /// <remarks>
        /// Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWebhookWithHttpInfoAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Retrieves a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingGetResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsBrandingGetResponseBody> GetBrandAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Brand
        /// </summary>
        /// <remarks>
        /// Retrieves a brand configuration.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsBrandingGetResponseBody>> GetBrandWithHttpInfoAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasGetResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasGetResponseBody> GetCustomEventSchemaAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsCustomEventSchemasGetResponseBody>> GetCustomEventSchemaWithHttpInfoAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Metadata Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasGetResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasGetResponseBody> GetMetadataSchema1Async(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Metadata Schema
        /// </summary>
        /// <remarks>
        /// Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsMetadataSchemasGetResponseBody>> GetMetadataSchema1WithHttpInfoAsync(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Retrieves an existing project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsGetResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsGetResponseBody> GetProjectAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Project
        /// </summary>
        /// <remarks>
        /// Retrieves an existing project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsGetResponseBody>> GetProjectWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Stacking Rules
        /// </summary>
        /// <remarks>
        /// Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesGetResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsStackingRulesGetResponseBody> GetStackingRulesAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Stacking Rules
        /// </summary>
        /// <remarks>
        /// Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsStackingRulesGetResponseBody>> GetStackingRulesWithHttpInfoAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves the project users details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersGetUserResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsUsersGetUserResponseBody> GetUserAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves the project users details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersGetUserResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsUsersGetUserResponseBody>> GetUserWithHttpInfoAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksGetResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsWebhooksGetResponseBody> GetWebhookAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsWebhooksGetResponseBody>> GetWebhookWithHttpInfoAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Invite a New User
        /// </summary>
        /// <remarks>
        /// Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InviteUserAsync(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Invite a New User
        /// </summary>
        /// <remarks>
        /// Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InviteUserWithHttpInfoAsync(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsBrandingListResponseBody> ListBrandsAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Brands
        /// </summary>
        /// <remarks>
        /// Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsBrandingListResponseBody>> ListBrandsWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Custom Event Schemas
        /// </summary>
        /// <remarks>
        /// Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasListResponseBody> ListCustomEventSchemasAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Custom Event Schemas
        /// </summary>
        /// <remarks>
        /// Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsCustomEventSchemasListResponseBody>> ListCustomEventSchemasWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Metadata Schemas
        /// </summary>
        /// <remarks>
        /// Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasListResponseBody> ListMetadataSchemas1Async(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Metadata Schemas
        /// </summary>
        /// <remarks>
        /// Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsMetadataSchemasListResponseBody>> ListMetadataSchemas1WithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsListResponseBody> ListProjectsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Projects
        /// </summary>
        /// <remarks>
        /// Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsListResponseBody>> ListProjectsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Stacking Rules
        /// </summary>
        /// <remarks>
        /// Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsStackingRulesListResponseBody> ListStackingRulesAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Stacking Rules
        /// </summary>
        /// <remarks>
        /// Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsStackingRulesListResponseBody>> ListStackingRulesWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Lists all users assigned to the project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsUsersListResponseBody> ListUsersAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Lists all users assigned to the project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsUsersListResponseBody>> ListUsersWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsWebhooksListResponseBody> ListWebhooksAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsWebhooksListResponseBody>> ListWebhooksWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Copy Campaign Template to a Project
        /// </summary>
        /// <remarks>
        /// Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsTemplatesCampaignsCopyCreateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody> ManagementCopyCampaignTemplateAsync(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Copy Campaign Template to a Project
        /// </summary>
        /// <remarks>
        /// Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsTemplatesCampaignsCopyCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody>> ManagementCopyCampaignTemplateWithHttpInfoAsync(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Campaign Templates
        /// </summary>
        /// <remarks>
        /// Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsTemplatesCampaignsListResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsTemplatesCampaignsListResponseBody> ManagementListCampaignTemplatesAsync(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Campaign Templates
        /// </summary>
        /// <remarks>
        /// Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsTemplatesCampaignsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsTemplatesCampaignsListResponseBody>> ManagementListCampaignTemplatesWithHttpInfoAsync(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Unassign User
        /// </summary>
        /// <remarks>
        /// Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnassignUserAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Unassign User
        /// </summary>
        /// <remarks>
        /// Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnassignUserWithHttpInfoAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsBrandingUpdateResponseBody> UpdateBrandAsync(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Brand
        /// </summary>
        /// <remarks>
        /// Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsBrandingUpdateResponseBody>> UpdateBrandWithHttpInfoAsync(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasUpdateResponseBody> UpdateCustomEventSchemaAsync(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Custom Event Schema
        /// </summary>
        /// <remarks>
        /// Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsCustomEventSchemasUpdateResponseBody>> UpdateCustomEventSchemaWithHttpInfoAsync(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Metadata Schema
        /// </summary>
        /// <remarks>
        /// Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasUpdateResponseBody> UpdateMetadataSchemaAsync(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Metadata Schema
        /// </summary>
        /// <remarks>
        /// Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsMetadataSchemasUpdateResponseBody>> UpdateMetadataSchemaWithHttpInfoAsync(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsUpdateResponseBody> UpdateProjectAsync(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Project
        /// </summary>
        /// <remarks>
        /// Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsUpdateResponseBody>> UpdateProjectWithHttpInfoAsync(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Stacking Rules
        /// </summary>
        /// <remarks>
        /// Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsStackingRulesUpdateResponseBody> UpdateStackingRulesAsync(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Stacking Rules
        /// </summary>
        /// <remarks>
        /// Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsStackingRulesUpdateResponseBody>> UpdateStackingRulesWithHttpInfoAsync(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates the users role.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersUpdateRoleResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsUsersUpdateRoleResponseBody> UpdateUserAsync(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates the users role.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersUpdateRoleResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsUsersUpdateRoleResponseBody>> UpdateUserWithHttpInfoAsync(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ManagementProjectsWebhooksUpdateResponseBody> UpdateWebhookAsync(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Webhook
        /// </summary>
        /// <remarks>
        /// Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ManagementProjectsWebhooksUpdateResponseBody>> UpdateWebhookWithHttpInfoAsync(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApi : IManagementApiSync, IManagementApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManagementApi : IManagementApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManagementApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManagementApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assign User Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersAssignResponseBody</returns>
        public ManagementProjectsUsersAssignResponseBody AssignUser(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersAssignResponseBody> localVarResponse = AssignUserWithHttpInfo(projectId, managementProjectsUsersAssignRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign User Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersAssignResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsUsersAssignResponseBody> AssignUserWithHttpInfo(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->AssignUser");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsUsersAssignRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.AssignUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsUsersAssignResponseBody>("/management/v1/projects/{projectId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign User Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersAssignResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsUsersAssignResponseBody> AssignUserAsync(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersAssignResponseBody> localVarResponse = await AssignUserWithHttpInfoAsync(projectId, managementProjectsUsersAssignRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign User Assigns a user to a given project. The user must be an existing user in Voucherify.  🚧 Correct Use of Data To avoid errors, use the role key with either id or login keys.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUsersAssignRequestBody">Defines the user details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersAssignResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsUsersAssignResponseBody>> AssignUserWithHttpInfoAsync(string projectId, ManagementProjectsUsersAssignRequestBody managementProjectsUsersAssignRequestBody = default(ManagementProjectsUsersAssignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->AssignUser");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsUsersAssignRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.AssignUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsUsersAssignResponseBody>("/management/v1/projects/{projectId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Brand Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingCreateResponseBody</returns>
        public ManagementProjectsBrandingCreateResponseBody CreateBrand(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingCreateResponseBody> localVarResponse = CreateBrandWithHttpInfo(projectId, managementProjectsBrandingCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Brand Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsBrandingCreateResponseBody> CreateBrandWithHttpInfo(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateBrand");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsBrandingCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsBrandingCreateResponseBody>("/management/v1/projects/{projectId}/branding", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Brand Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsBrandingCreateResponseBody> CreateBrandAsync(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingCreateResponseBody> localVarResponse = await CreateBrandWithHttpInfoAsync(projectId, managementProjectsBrandingCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Brand Creates a new brand configuration. You can have only one brand configured for a project.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsBrandingCreateRequestBody">Defines a brand configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsBrandingCreateResponseBody>> CreateBrandWithHttpInfoAsync(string projectId, ManagementProjectsBrandingCreateRequestBody managementProjectsBrandingCreateRequestBody = default(ManagementProjectsBrandingCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateBrand");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsBrandingCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsBrandingCreateResponseBody>("/management/v1/projects/{projectId}/branding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Custom Event Schema Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasCreateResponseBody</returns>
        public ManagementProjectsCustomEventSchemasCreateResponseBody CreateCustomEventSchema(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasCreateResponseBody> localVarResponse = CreateCustomEventSchemaWithHttpInfo(projectId, managementProjectsCustomEventSchemasCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Custom Event Schema Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasCreateResponseBody> CreateCustomEventSchemaWithHttpInfo(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateCustomEventSchema");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsCustomEventSchemasCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsCustomEventSchemasCreateResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Custom Event Schema Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasCreateResponseBody> CreateCustomEventSchemaAsync(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasCreateResponseBody> localVarResponse = await CreateCustomEventSchemaWithHttpInfoAsync(projectId, managementProjectsCustomEventSchemasCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Custom Event Schema Creates a custom event schema. The properties object is required, but it can be empty, however. This object is for optional custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsCustomEventSchemasCreateRequestBody">Defines the custom event schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasCreateResponseBody>> CreateCustomEventSchemaWithHttpInfoAsync(string projectId, ManagementProjectsCustomEventSchemasCreateRequestBody managementProjectsCustomEventSchemasCreateRequestBody = default(ManagementProjectsCustomEventSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateCustomEventSchema");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsCustomEventSchemasCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsCustomEventSchemasCreateResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Metadata Schema Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasCreateResponseBody</returns>
        public ManagementProjectsMetadataSchemasCreateResponseBody CreateMetadataSchema(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasCreateResponseBody> localVarResponse = CreateMetadataSchemaWithHttpInfo(projectId, managementProjectsMetadataSchemasCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Metadata Schema Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasCreateResponseBody> CreateMetadataSchemaWithHttpInfo(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateMetadataSchema");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsMetadataSchemasCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsMetadataSchemasCreateResponseBody>("/management/v1/projects/{projectId}/metadata-schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Metadata Schema Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasCreateResponseBody> CreateMetadataSchemaAsync(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasCreateResponseBody> localVarResponse = await CreateMetadataSchemaWithHttpInfoAsync(projectId, managementProjectsMetadataSchemasCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Metadata Schema Creates a new metadata (custom attribute) schema. The schema consists of a set of key-value pairs to customize Voucherify resources.  You can nest your object within a standard metadata schema, e.g. within a campaign or customer schema. However, your nested object cannot include another nested object. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsMetadataSchemasCreateRequestBody">Defines the metadata schema. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasCreateResponseBody>> CreateMetadataSchemaWithHttpInfoAsync(string projectId, ManagementProjectsMetadataSchemasCreateRequestBody managementProjectsMetadataSchemasCreateRequestBody = default(ManagementProjectsMetadataSchemasCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateMetadataSchema");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsMetadataSchemasCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsMetadataSchemasCreateResponseBody>("/management/v1/projects/{projectId}/metadata-schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCreateResponseBody</returns>
        public ManagementProjectsCreateResponseBody CreateProject(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCreateResponseBody> localVarResponse = CreateProjectWithHttpInfo(managementProjectsCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsCreateResponseBody> CreateProjectWithHttpInfo(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = managementProjectsCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsCreateResponseBody>("/management/v1/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Project Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsCreateResponseBody> CreateProjectAsync(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCreateResponseBody> localVarResponse = await CreateProjectWithHttpInfoAsync(managementProjectsCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Project Creates a new project. You can add users, specify the cluster, timezone, currency, and other details. All owners are added to the project by default.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsCreateRequestBody">Define project details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsCreateResponseBody>> CreateProjectWithHttpInfoAsync(ManagementProjectsCreateRequestBody managementProjectsCreateRequestBody = default(ManagementProjectsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = managementProjectsCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsCreateResponseBody>("/management/v1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Stacking Rules Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesCreateResponseBody</returns>
        public ManagementProjectsStackingRulesCreateResponseBody CreateStackingRules(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesCreateResponseBody> localVarResponse = CreateStackingRulesWithHttpInfo(projectId, managementProjectsStackingRulesCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Stacking Rules Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesCreateResponseBody> CreateStackingRulesWithHttpInfo(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateStackingRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsStackingRulesCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsStackingRulesCreateResponseBody>("/management/v1/projects/{projectId}/stacking-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Stacking Rules Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsStackingRulesCreateResponseBody> CreateStackingRulesAsync(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesCreateResponseBody> localVarResponse = await CreateStackingRulesWithHttpInfoAsync(projectId, managementProjectsStackingRulesCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Stacking Rules Overwrites the default stacking rules. If new stacking rules have been created for the project earlier (e.g. in the user interface), it returns an error. Use Update Stacking Rules endpoint to change the rules.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsStackingRulesCreateRequestBody">Defines the stacking rule parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesCreateResponseBody>> CreateStackingRulesWithHttpInfoAsync(string projectId, ManagementProjectsStackingRulesCreateRequestBody managementProjectsStackingRulesCreateRequestBody = default(ManagementProjectsStackingRulesCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateStackingRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsStackingRulesCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsStackingRulesCreateResponseBody>("/management/v1/projects/{projectId}/stacking-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Webhook Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksCreateResponseBody</returns>
        public ManagementProjectsWebhooksCreateResponseBody CreateWebhook(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksCreateResponseBody> localVarResponse = CreateWebhookWithHttpInfo(projectId, managementProjectsWebhooksCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsWebhooksCreateResponseBody> CreateWebhookWithHttpInfo(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateWebhook");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsWebhooksCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsWebhooksCreateResponseBody>("/management/v1/projects/{projectId}/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Webhook Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsWebhooksCreateResponseBody> CreateWebhookAsync(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksCreateResponseBody> localVarResponse = await CreateWebhookWithHttpInfoAsync(projectId, managementProjectsWebhooksCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Webhook Creates a new webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-01 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsWebhooksCreateRequestBody">Defines a webhook configuration. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsWebhooksCreateResponseBody>> CreateWebhookWithHttpInfoAsync(string projectId, ManagementProjectsWebhooksCreateRequestBody managementProjectsWebhooksCreateRequestBody = default(ManagementProjectsWebhooksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->CreateWebhook");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsWebhooksCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.CreateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsWebhooksCreateResponseBody>("/management/v1/projects/{projectId}/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Brand Deletes permanently a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteBrand(string projectId, string brandingId, int operationIndex = 0)
        {
            DeleteBrandWithHttpInfo(projectId, brandingId);
        }

        /// <summary>
        /// Delete Brand Deletes permanently a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteBrandWithHttpInfo(string projectId, string brandingId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteBrand");
            }

            // verify the required parameter 'brandingId' is set
            if (brandingId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'brandingId' when calling ManagementApi->DeleteBrand");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("brandingId", Voucherify.Client.ClientUtils.ParameterToString(brandingId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/management/v1/projects/{projectId}/branding/{brandingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Brand Deletes permanently a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteBrandAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteBrandWithHttpInfoAsync(projectId, brandingId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Brand Deletes permanently a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteBrandWithHttpInfoAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteBrand");
            }

            // verify the required parameter 'brandingId' is set
            if (brandingId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'brandingId' when calling ManagementApi->DeleteBrand");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("brandingId", Voucherify.Client.ClientUtils.ParameterToString(brandingId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/management/v1/projects/{projectId}/branding/{brandingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Custom Event Schema Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCustomEventSchema(string projectId, string customEventSchemaId, int operationIndex = 0)
        {
            DeleteCustomEventSchemaWithHttpInfo(projectId, customEventSchemaId);
        }

        /// <summary>
        /// Delete Custom Event Schema Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteCustomEventSchemaWithHttpInfo(string projectId, string customEventSchemaId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteCustomEventSchema");
            }

            // verify the required parameter 'customEventSchemaId' is set
            if (customEventSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customEventSchemaId' when calling ManagementApi->DeleteCustomEventSchema");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customEventSchemaId", Voucherify.Client.ClientUtils.ParameterToString(customEventSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Custom Event Schema Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomEventSchemaAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteCustomEventSchemaWithHttpInfoAsync(projectId, customEventSchemaId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Custom Event Schema Deletes permanently the custom event schema with its custom properties (metadata).  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteCustomEventSchemaWithHttpInfoAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteCustomEventSchema");
            }

            // verify the required parameter 'customEventSchemaId' is set
            if (customEventSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customEventSchemaId' when calling ManagementApi->DeleteCustomEventSchema");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customEventSchemaId", Voucherify.Client.ClientUtils.ParameterToString(customEventSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Metadata Schema Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteMetadataSchema(string projectId, string metadataSchemaId, int operationIndex = 0)
        {
            DeleteMetadataSchemaWithHttpInfo(projectId, metadataSchemaId);
        }

        /// <summary>
        /// Delete Metadata Schema Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteMetadataSchemaWithHttpInfo(string projectId, string metadataSchemaId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteMetadataSchema");
            }

            // verify the required parameter 'metadataSchemaId' is set
            if (metadataSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'metadataSchemaId' when calling ManagementApi->DeleteMetadataSchema");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metadataSchemaId", Voucherify.Client.ClientUtils.ParameterToString(metadataSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Metadata Schema Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMetadataSchemaAsync(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteMetadataSchemaWithHttpInfoAsync(projectId, metadataSchemaId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Metadata Schema Deletes permanently the metadata schema. In standard metadata schemas, this endpoint removes permanently all definitions. The standard metadata schemas are: - Campaign - Voucher - Publication - Redemption - Product - Customer - Order - Order line item - Loyalty Tier - Promotion Tier - Earning rule - Reward If you want to delete only one definition, use the Update Metadata Schema endpoint. In the request, provide the deleted: true pair in the definition object. This definition will be moved to Removed definitions. If you want to create a new standard metadata schema, use the Create Metadata Schema endpoint.  🚧 Metadata Purging This endpoint deletes permanently the metadata schemas only. However, it does not purge the metadata from associated entities, so the metadata added to those entities will remain. If you want to purge metadata from the entities: 1. Remove all the definitions you want to purge. You can do this either in Voucherify Project Settings &gt; Metadata Schema tab or with the Update Metadata Schema endpoint. 2. In Voucherify Project Settings &gt; Metadata Schema tab, go to the relevant metadata schema. 3. In Removed definitions, click the bin button next to the definitions whose metadata you want to purge from entities. Note: - This is an asynchronous action. You will be notified when it has been completed. - You cannot purge metadata for the Redemption and Publication schemas. 4. Use the Delete Metadata Schema request to delete the metadata schema from Voucherify.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteMetadataSchemaWithHttpInfoAsync(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteMetadataSchema");
            }

            // verify the required parameter 'metadataSchemaId' is set
            if (metadataSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'metadataSchemaId' when calling ManagementApi->DeleteMetadataSchema");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metadataSchemaId", Voucherify.Client.ClientUtils.ParameterToString(metadataSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteProject(string projectId, int operationIndex = 0)
        {
            DeleteProjectWithHttpInfo(projectId);
        }

        /// <summary>
        /// Delete Project Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteProjectWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteProject");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/management/v1/projects/{projectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Project Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProjectAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteProjectWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Project Deletes an existing project. The users currently using the deleted project will be automatically logged out.  🚧 Sandbox Project The sandbox project cannot be deleted.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteProjectWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteProject");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/management/v1/projects/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Stacking Rules Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteStackingRules(string projectId, string stackingRulesId, int operationIndex = 0)
        {
            DeleteStackingRulesWithHttpInfo(projectId, stackingRulesId);
        }

        /// <summary>
        /// Delete Stacking Rules Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteStackingRulesWithHttpInfo(string projectId, string stackingRulesId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteStackingRules");
            }

            // verify the required parameter 'stackingRulesId' is set
            if (stackingRulesId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackingRulesId' when calling ManagementApi->DeleteStackingRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackingRulesId", Voucherify.Client.ClientUtils.ParameterToString(stackingRulesId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Stacking Rules Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStackingRulesAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteStackingRulesWithHttpInfoAsync(projectId, stackingRulesId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Stacking Rules Deletes permanently the current settings for the stacking rules. The stacking rules are restored to default values.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteStackingRulesWithHttpInfoAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteStackingRules");
            }

            // verify the required parameter 'stackingRulesId' is set
            if (stackingRulesId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackingRulesId' when calling ManagementApi->DeleteStackingRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackingRulesId", Voucherify.Client.ClientUtils.ParameterToString(stackingRulesId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteWebhook(string projectId, string webhookId, int operationIndex = 0)
        {
            DeleteWebhookWithHttpInfo(projectId, webhookId);
        }

        /// <summary>
        /// Delete Webhook Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteWebhookWithHttpInfo(string projectId, string webhookId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteWebhook");
            }

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->DeleteWebhook");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", Voucherify.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/management/v1/projects/{projectId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Webhook Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteWebhookAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteWebhookWithHttpInfoAsync(projectId, webhookId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Webhook Deletes a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteWebhookWithHttpInfoAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->DeleteWebhook");
            }

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->DeleteWebhook");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", Voucherify.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.DeleteWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/management/v1/projects/{projectId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Retrieves a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingGetResponseBody</returns>
        public ManagementProjectsBrandingGetResponseBody GetBrand(string projectId, string brandingId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingGetResponseBody> localVarResponse = GetBrandWithHttpInfo(projectId, brandingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Retrieves a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsBrandingGetResponseBody> GetBrandWithHttpInfo(string projectId, string brandingId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetBrand");
            }

            // verify the required parameter 'brandingId' is set
            if (brandingId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'brandingId' when calling ManagementApi->GetBrand");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("brandingId", Voucherify.Client.ClientUtils.ParameterToString(brandingId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsBrandingGetResponseBody>("/management/v1/projects/{projectId}/branding/{brandingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Brand Retrieves a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsBrandingGetResponseBody> GetBrandAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingGetResponseBody> localVarResponse = await GetBrandWithHttpInfoAsync(projectId, brandingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Brand Retrieves a brand configuration.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsBrandingGetResponseBody>> GetBrandWithHttpInfoAsync(string projectId, string brandingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetBrand");
            }

            // verify the required parameter 'brandingId' is set
            if (brandingId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'brandingId' when calling ManagementApi->GetBrand");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("brandingId", Voucherify.Client.ClientUtils.ParameterToString(brandingId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsBrandingGetResponseBody>("/management/v1/projects/{projectId}/branding/{brandingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Custom Event Schema Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasGetResponseBody</returns>
        public ManagementProjectsCustomEventSchemasGetResponseBody GetCustomEventSchema(string projectId, string customEventSchemaId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasGetResponseBody> localVarResponse = GetCustomEventSchemaWithHttpInfo(projectId, customEventSchemaId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Event Schema Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasGetResponseBody> GetCustomEventSchemaWithHttpInfo(string projectId, string customEventSchemaId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetCustomEventSchema");
            }

            // verify the required parameter 'customEventSchemaId' is set
            if (customEventSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customEventSchemaId' when calling ManagementApi->GetCustomEventSchema");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customEventSchemaId", Voucherify.Client.ClientUtils.ParameterToString(customEventSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsCustomEventSchemasGetResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Custom Event Schema Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasGetResponseBody> GetCustomEventSchemaAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasGetResponseBody> localVarResponse = await GetCustomEventSchemaWithHttpInfoAsync(projectId, customEventSchemaId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Event Schema Retrieves a custom event schema.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasGetResponseBody>> GetCustomEventSchemaWithHttpInfoAsync(string projectId, string customEventSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetCustomEventSchema");
            }

            // verify the required parameter 'customEventSchemaId' is set
            if (customEventSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customEventSchemaId' when calling ManagementApi->GetCustomEventSchema");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customEventSchemaId", Voucherify.Client.ClientUtils.ParameterToString(customEventSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsCustomEventSchemasGetResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metadata Schema Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasGetResponseBody</returns>
        public ManagementProjectsMetadataSchemasGetResponseBody GetMetadataSchema1(string projectId, string metadataSchemaId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasGetResponseBody> localVarResponse = GetMetadataSchema1WithHttpInfo(projectId, metadataSchemaId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metadata Schema Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasGetResponseBody> GetMetadataSchema1WithHttpInfo(string projectId, string metadataSchemaId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetMetadataSchema1");
            }

            // verify the required parameter 'metadataSchemaId' is set
            if (metadataSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'metadataSchemaId' when calling ManagementApi->GetMetadataSchema1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metadataSchemaId", Voucherify.Client.ClientUtils.ParameterToString(metadataSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetMetadataSchema1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsMetadataSchemasGetResponseBody>("/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataSchema1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Metadata Schema Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasGetResponseBody> GetMetadataSchema1Async(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasGetResponseBody> localVarResponse = await GetMetadataSchema1WithHttpInfoAsync(projectId, metadataSchemaId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metadata Schema Retrieves a metadata schema.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasGetResponseBody>> GetMetadataSchema1WithHttpInfoAsync(string projectId, string metadataSchemaId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetMetadataSchema1");
            }

            // verify the required parameter 'metadataSchemaId' is set
            if (metadataSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'metadataSchemaId' when calling ManagementApi->GetMetadataSchema1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metadataSchemaId", Voucherify.Client.ClientUtils.ParameterToString(metadataSchemaId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetMetadataSchema1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsMetadataSchemasGetResponseBody>("/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMetadataSchema1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Retrieves an existing project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsGetResponseBody</returns>
        public ManagementProjectsGetResponseBody GetProject(string projectId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsGetResponseBody> localVarResponse = GetProjectWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Retrieves an existing project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsGetResponseBody> GetProjectWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetProject");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsGetResponseBody>("/management/v1/projects/{projectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Project Retrieves an existing project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsGetResponseBody> GetProjectAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsGetResponseBody> localVarResponse = await GetProjectWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Project Retrieves an existing project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsGetResponseBody>> GetProjectWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetProject");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsGetResponseBody>("/management/v1/projects/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Stacking Rules Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesGetResponseBody</returns>
        public ManagementProjectsStackingRulesGetResponseBody GetStackingRules(string projectId, string stackingRulesId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesGetResponseBody> localVarResponse = GetStackingRulesWithHttpInfo(projectId, stackingRulesId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stacking Rules Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesGetResponseBody> GetStackingRulesWithHttpInfo(string projectId, string stackingRulesId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetStackingRules");
            }

            // verify the required parameter 'stackingRulesId' is set
            if (stackingRulesId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackingRulesId' when calling ManagementApi->GetStackingRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackingRulesId", Voucherify.Client.ClientUtils.ParameterToString(stackingRulesId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsStackingRulesGetResponseBody>("/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Stacking Rules Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsStackingRulesGetResponseBody> GetStackingRulesAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesGetResponseBody> localVarResponse = await GetStackingRulesWithHttpInfoAsync(projectId, stackingRulesId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stacking Rules Retrieves the stacking rules for the project.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesGetResponseBody>> GetStackingRulesWithHttpInfoAsync(string projectId, string stackingRulesId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetStackingRules");
            }

            // verify the required parameter 'stackingRulesId' is set
            if (stackingRulesId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackingRulesId' when calling ManagementApi->GetStackingRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackingRulesId", Voucherify.Client.ClientUtils.ParameterToString(stackingRulesId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsStackingRulesGetResponseBody>("/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Retrieves the project users details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersGetUserResponseBody</returns>
        public ManagementProjectsUsersGetUserResponseBody GetUser(string projectId, string userId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersGetUserResponseBody> localVarResponse = GetUserWithHttpInfo(projectId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Retrieves the project users details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersGetUserResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsUsersGetUserResponseBody> GetUserWithHttpInfo(string projectId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->GetUser");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Voucherify.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsUsersGetUserResponseBody>("/management/v1/projects/{projectId}/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Retrieves the project users details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersGetUserResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsUsersGetUserResponseBody> GetUserAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersGetUserResponseBody> localVarResponse = await GetUserWithHttpInfoAsync(projectId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Retrieves the project users details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersGetUserResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsUsersGetUserResponseBody>> GetUserWithHttpInfoAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->GetUser");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Voucherify.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsUsersGetUserResponseBody>("/management/v1/projects/{projectId}/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhook Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksGetResponseBody</returns>
        public ManagementProjectsWebhooksGetResponseBody GetWebhook(string projectId, string webhookId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksGetResponseBody> localVarResponse = GetWebhookWithHttpInfo(projectId, webhookId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsWebhooksGetResponseBody> GetWebhookWithHttpInfo(string projectId, string webhookId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetWebhook");
            }

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->GetWebhook");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", Voucherify.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsWebhooksGetResponseBody>("/management/v1/projects/{projectId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Webhook Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsWebhooksGetResponseBody> GetWebhookAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksGetResponseBody> localVarResponse = await GetWebhookWithHttpInfoAsync(projectId, webhookId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook Retrieves a webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsWebhooksGetResponseBody>> GetWebhookWithHttpInfoAsync(string projectId, string webhookId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->GetWebhook");
            }

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->GetWebhook");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", Voucherify.Client.ClientUtils.ParameterToString(webhookId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.GetWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsWebhooksGetResponseBody>("/management/v1/projects/{projectId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite a New User Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void InviteUser(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0)
        {
            InviteUserWithHttpInfo(managementProjectsUsersInviteCreateRequestBody);
        }

        /// <summary>
        /// Invite a New User Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> InviteUserWithHttpInfo(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = managementProjectsUsersInviteCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.InviteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/management/v1/projects/users/invite", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Invite a New User Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InviteUserAsync(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await InviteUserWithHttpInfoAsync(managementProjectsUsersInviteCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Invite a New User Sends an invitation to an email address that has not been used yet as a Voucherify user login. You can specify the projects to which the invited user will be assigned and define their roles.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="managementProjectsUsersInviteCreateRequestBody">Defines the details of the invitation, the project, and roles to which the user will be assigned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> InviteUserWithHttpInfoAsync(ManagementProjectsUsersInviteCreateRequestBody managementProjectsUsersInviteCreateRequestBody = default(ManagementProjectsUsersInviteCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = managementProjectsUsersInviteCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.InviteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/management/v1/projects/users/invite", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InviteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Brands Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingListResponseBody</returns>
        public ManagementProjectsBrandingListResponseBody ListBrands(string projectId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingListResponseBody> localVarResponse = ListBrandsWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Brands Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsBrandingListResponseBody> ListBrandsWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListBrands");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsBrandingListResponseBody>("/management/v1/projects/{projectId}/branding", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Brands Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsBrandingListResponseBody> ListBrandsAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingListResponseBody> localVarResponse = await ListBrandsWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Brands Lists all brand configurations. Because a project can have only one brand, it always returns a list with one item. This endpoint can be used to retrieve the brand configuration created with the Voucherify Dashboard and the ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsBrandingListResponseBody>> ListBrandsWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListBrands");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListBrands";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsBrandingListResponseBody>("/management/v1/projects/{projectId}/branding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListBrands", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Custom Event Schemas Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasListResponseBody</returns>
        public ManagementProjectsCustomEventSchemasListResponseBody ListCustomEventSchemas(string projectId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasListResponseBody> localVarResponse = ListCustomEventSchemasWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Custom Event Schemas Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasListResponseBody> ListCustomEventSchemasWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListCustomEventSchemas");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListCustomEventSchemas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsCustomEventSchemasListResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomEventSchemas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Custom Event Schemas Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasListResponseBody> ListCustomEventSchemasAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasListResponseBody> localVarResponse = await ListCustomEventSchemasWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Custom Event Schemas Lists all custom event schemas available in the project.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasListResponseBody>> ListCustomEventSchemasWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListCustomEventSchemas");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListCustomEventSchemas";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsCustomEventSchemasListResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomEventSchemas", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Metadata Schemas Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasListResponseBody</returns>
        public ManagementProjectsMetadataSchemasListResponseBody ListMetadataSchemas1(string projectId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasListResponseBody> localVarResponse = ListMetadataSchemas1WithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Metadata Schemas Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasListResponseBody> ListMetadataSchemas1WithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListMetadataSchemas1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListMetadataSchemas1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsMetadataSchemasListResponseBody>("/management/v1/projects/{projectId}/metadata-schemas", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMetadataSchemas1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Metadata Schemas Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasListResponseBody> ListMetadataSchemas1Async(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasListResponseBody> localVarResponse = await ListMetadataSchemas1WithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Metadata Schemas Lists all metadata schemas available in the project.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasListResponseBody>> ListMetadataSchemas1WithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListMetadataSchemas1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListMetadataSchemas1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsMetadataSchemasListResponseBody>("/management/v1/projects/{projectId}/metadata-schemas", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMetadataSchemas1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Projects Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsListResponseBody</returns>
        public ManagementProjectsListResponseBody ListProjects(int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsListResponseBody> localVarResponse = ListProjectsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Projects Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsListResponseBody> ListProjectsWithHttpInfo(int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ManagementApi.ListProjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsListResponseBody>("/management/v1/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Projects Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsListResponseBody> ListProjectsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsListResponseBody> localVarResponse = await ListProjectsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Projects Lists all projects for the organization. The endpoint does not require any query parameters.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsListResponseBody>> ListProjectsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ManagementApi.ListProjects";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsListResponseBody>("/management/v1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Stacking Rules Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesListResponseBody</returns>
        public ManagementProjectsStackingRulesListResponseBody ListStackingRules(string projectId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesListResponseBody> localVarResponse = ListStackingRulesWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Stacking Rules Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesListResponseBody> ListStackingRulesWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListStackingRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsStackingRulesListResponseBody>("/management/v1/projects/{projectId}/stacking-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Stacking Rules Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsStackingRulesListResponseBody> ListStackingRulesAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesListResponseBody> localVarResponse = await ListStackingRulesWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Stacking Rules Lists all stacking rules. Returns always a list with one item. This endpoint can be used to retrieve the default stacking rules. The default stacking rules do not have an ID that could be used with the Get Stacking Rules or Update Stacking Rules endpoints.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesListResponseBody>> ListStackingRulesWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListStackingRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsStackingRulesListResponseBody>("/management/v1/projects/{projectId}/stacking-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users Lists all users assigned to the project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersListResponseBody</returns>
        public ManagementProjectsUsersListResponseBody ListUsers(string projectId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersListResponseBody> localVarResponse = ListUsersWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Lists all users assigned to the project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsUsersListResponseBody> ListUsersWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListUsers");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsUsersListResponseBody>("/management/v1/projects/{projectId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users Lists all users assigned to the project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsUsersListResponseBody> ListUsersAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersListResponseBody> localVarResponse = await ListUsersWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Lists all users assigned to the project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsUsersListResponseBody>> ListUsersWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListUsers");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsUsersListResponseBody>("/management/v1/projects/{projectId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksListResponseBody</returns>
        public ManagementProjectsWebhooksListResponseBody ListWebhooks(string projectId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksListResponseBody> localVarResponse = ListWebhooksWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsWebhooksListResponseBody> ListWebhooksWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListWebhooks");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsWebhooksListResponseBody>("/management/v1/projects/{projectId}/webhooks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Webhooks Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsWebhooksListResponseBody> ListWebhooksAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksListResponseBody> localVarResponse = await ListWebhooksWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks Lists all webhook configurations for the project.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsWebhooksListResponseBody>> ListWebhooksWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ListWebhooks");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.ListWebhooks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsWebhooksListResponseBody>("/management/v1/projects/{projectId}/webhooks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWebhooks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Campaign Template to a Project Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsTemplatesCampaignsCopyCreateResponseBody</returns>
        public ManagementProjectsTemplatesCampaignsCopyCreateResponseBody ManagementCopyCampaignTemplate(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody> localVarResponse = ManagementCopyCampaignTemplateWithHttpInfo(projectId, campaignTemplateId, managementProjectsTemplatesCampaignsCopyCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Campaign Template to a Project Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsTemplatesCampaignsCopyCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody> ManagementCopyCampaignTemplateWithHttpInfo(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ManagementCopyCampaignTemplate");
            }

            // verify the required parameter 'campaignTemplateId' is set
            if (campaignTemplateId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignTemplateId' when calling ManagementApi->ManagementCopyCampaignTemplate");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignTemplateId", Voucherify.Client.ClientUtils.ParameterToString(campaignTemplateId)); // path parameter
            localVarRequestOptions.Data = managementProjectsTemplatesCampaignsCopyCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.ManagementCopyCampaignTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody>("/management/v1/projects/{projectId}/templates/campaigns/{campaignTemplateId}/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementCopyCampaignTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copy Campaign Template to a Project Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsTemplatesCampaignsCopyCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody> ManagementCopyCampaignTemplateAsync(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody> localVarResponse = await ManagementCopyCampaignTemplateWithHttpInfoAsync(projectId, campaignTemplateId, managementProjectsTemplatesCampaignsCopyCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Copy Campaign Template to a Project Copies a campaign template to another project. The resources, like validation rules or products, will not be copied to the destination project yet. When the template is used to create a new campaign or add a new promotion tier, the resources will be created in the destination project.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="campaignTemplateId">Provide the unique identifier of the campaign template.</param>
        /// <param name="managementProjectsTemplatesCampaignsCopyCreateRequestBody">Determines the details about the template in the destination project as well as the destination project itself. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsTemplatesCampaignsCopyCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody>> ManagementCopyCampaignTemplateWithHttpInfoAsync(string projectId, string campaignTemplateId, ManagementProjectsTemplatesCampaignsCopyCreateRequestBody managementProjectsTemplatesCampaignsCopyCreateRequestBody = default(ManagementProjectsTemplatesCampaignsCopyCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ManagementCopyCampaignTemplate");
            }

            // verify the required parameter 'campaignTemplateId' is set
            if (campaignTemplateId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignTemplateId' when calling ManagementApi->ManagementCopyCampaignTemplate");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("campaignTemplateId", Voucherify.Client.ClientUtils.ParameterToString(campaignTemplateId)); // path parameter
            localVarRequestOptions.Data = managementProjectsTemplatesCampaignsCopyCreateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.ManagementCopyCampaignTemplate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ManagementProjectsTemplatesCampaignsCopyCreateResponseBody>("/management/v1/projects/{projectId}/templates/campaigns/{campaignTemplateId}/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementCopyCampaignTemplate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaign Templates Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsTemplatesCampaignsListResponseBody</returns>
        public ManagementProjectsTemplatesCampaignsListResponseBody ManagementListCampaignTemplates(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsListResponseBody> localVarResponse = ManagementListCampaignTemplatesWithHttpInfo(projectId, limit, startingAfterId, order, includeTotal, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaign Templates Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsTemplatesCampaignsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsListResponseBody> ManagementListCampaignTemplatesWithHttpInfo(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ManagementListCampaignTemplates");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (includeTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "include_total", includeTotal));
            }
            if (filters != null)
            {
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.Name != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[name]", filters.Name));
                }
                if (filters.CampaignType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaignType]", filters.CampaignType));
                }
            }

            localVarRequestOptions.Operation = "ManagementApi.ManagementListCampaignTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ManagementProjectsTemplatesCampaignsListResponseBody>("/management/v1/projects/{projectId}/templates/campaigns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementListCampaignTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaign Templates Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsTemplatesCampaignsListResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsTemplatesCampaignsListResponseBody> ManagementListCampaignTemplatesAsync(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsListResponseBody> localVarResponse = await ManagementListCampaignTemplatesWithHttpInfoAsync(projectId, limit, startingAfterId, order, includeTotal, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaign Templates Lists all campaign templates available in the project.  👍 List Campaign Templates  This endpoint works in the same way as the List Campaign Templates endpoint.  📘 Campaign Templates – Documentation Read the [Campaign Templates documentation](https://support.voucherify.io/article/620-campaign-templates) to learn more about this feature.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the campaign templates created after a template with the given ID. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="includeTotal">If set to true, the response returns the number of all campaign templates, regardless of the applied filters or limits. Set to false by default. (optional)</param>
        /// <param name="filters">Filters for listing templates. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsTemplatesCampaignsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsTemplatesCampaignsListResponseBody>> ManagementListCampaignTemplatesWithHttpInfoAsync(string projectId, int? limit = default(int?), string startingAfterId = default(string), ParameterTemplatesList? order = default(ParameterTemplatesList?), bool? includeTotal = default(bool?), ParameterFiltersListTemplates filters = default(ParameterFiltersListTemplates), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->ManagementListCampaignTemplates");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (includeTotal != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "include_total", includeTotal));
            }
            if (filters != null)
            {
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.Name != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[name]", filters.Name));
                }
                if (filters.CampaignType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaignType]", filters.CampaignType));
                }
            }

            localVarRequestOptions.Operation = "ManagementApi.ManagementListCampaignTemplates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ManagementProjectsTemplatesCampaignsListResponseBody>("/management/v1/projects/{projectId}/templates/campaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementListCampaignTemplates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign User Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UnassignUser(string projectId, string userId, int operationIndex = 0)
        {
            UnassignUserWithHttpInfo(projectId, userId);
        }

        /// <summary>
        /// Unassign User Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> UnassignUserWithHttpInfo(string projectId, string userId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UnassignUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->UnassignUser");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Voucherify.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.UnassignUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/management/v1/projects/{projectId}/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnassignUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unassign User Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnassignUserAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UnassignUserWithHttpInfoAsync(projectId, userId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Unassign User Unassigns the user from the project. If the user is currently logged in, they are automatically logged out. If the user is assigned to only one project, they cannot be unassigned from that project.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> UnassignUserWithHttpInfoAsync(string projectId, string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UnassignUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->UnassignUser");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Voucherify.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "ManagementApi.UnassignUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/management/v1/projects/{projectId}/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnassignUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Brand Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsBrandingUpdateResponseBody</returns>
        public ManagementProjectsBrandingUpdateResponseBody UpdateBrand(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingUpdateResponseBody> localVarResponse = UpdateBrandWithHttpInfo(projectId, brandingId, managementProjectsBrandingUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Brand Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsBrandingUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsBrandingUpdateResponseBody> UpdateBrandWithHttpInfo(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateBrand");
            }

            // verify the required parameter 'brandingId' is set
            if (brandingId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'brandingId' when calling ManagementApi->UpdateBrand");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("brandingId", Voucherify.Client.ClientUtils.ParameterToString(brandingId)); // path parameter
            localVarRequestOptions.Data = managementProjectsBrandingUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementProjectsBrandingUpdateResponseBody>("/management/v1/projects/{projectId}/branding/{brandingId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Brand Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsBrandingUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsBrandingUpdateResponseBody> UpdateBrandAsync(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsBrandingUpdateResponseBody> localVarResponse = await UpdateBrandWithHttpInfoAsync(projectId, brandingId, managementProjectsBrandingUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Brand Updates a brand configuration. Only the fields sent in the request will be updated. The fields omitted in the request will remain unchanged.  📘 White Labelling  The white labelling settings which can be found in Project Settings &gt; Brand Details and which are available only for Enterprise clients as a separate service can be configured only in the user interface.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="brandingId">Provide the unique identifier of the brand configuration.</param>
        /// <param name="managementProjectsBrandingUpdateRequestBody">Defines the brand configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsBrandingUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsBrandingUpdateResponseBody>> UpdateBrandWithHttpInfoAsync(string projectId, string brandingId, ManagementProjectsBrandingUpdateRequestBody managementProjectsBrandingUpdateRequestBody = default(ManagementProjectsBrandingUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateBrand");
            }

            // verify the required parameter 'brandingId' is set
            if (brandingId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'brandingId' when calling ManagementApi->UpdateBrand");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("brandingId", Voucherify.Client.ClientUtils.ParameterToString(brandingId)); // path parameter
            localVarRequestOptions.Data = managementProjectsBrandingUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateBrand";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementProjectsBrandingUpdateResponseBody>("/management/v1/projects/{projectId}/branding/{brandingId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateBrand", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Custom Event Schema Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsCustomEventSchemasUpdateResponseBody</returns>
        public ManagementProjectsCustomEventSchemasUpdateResponseBody UpdateCustomEventSchema(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasUpdateResponseBody> localVarResponse = UpdateCustomEventSchemaWithHttpInfo(projectId, customEventSchemaId, managementProjectsCustomEventSchemasUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom Event Schema Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsCustomEventSchemasUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasUpdateResponseBody> UpdateCustomEventSchemaWithHttpInfo(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateCustomEventSchema");
            }

            // verify the required parameter 'customEventSchemaId' is set
            if (customEventSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customEventSchemaId' when calling ManagementApi->UpdateCustomEventSchema");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customEventSchemaId", Voucherify.Client.ClientUtils.ParameterToString(customEventSchemaId)); // path parameter
            localVarRequestOptions.Data = managementProjectsCustomEventSchemasUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementProjectsCustomEventSchemasUpdateResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Custom Event Schema Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsCustomEventSchemasUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsCustomEventSchemasUpdateResponseBody> UpdateCustomEventSchemaAsync(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasUpdateResponseBody> localVarResponse = await UpdateCustomEventSchemaWithHttpInfoAsync(projectId, customEventSchemaId, managementProjectsCustomEventSchemasUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom Event Schema Updates a custom event schema. With this request, you can: - Add a nonexistent property to a custom event schema. - Update an existing property. In the request, you can provide only those properties you want to add or update. Definitions omitted in the request remain unchanged.  👍 Additional Notes - You can change the type of an existing property, e.g. from string to number. - You can remove a custom property with this endpoint by providing deleted: true in the request. However, you cannot permanently remove an event definition or its property with this endpoint.  📘 Custom Event Documentation  Read [Custom Events](https://support.voucherify.io/article/111-custom-events) article to learn how custom events work in Voucherify. Read also the details about the Track Custom Event endpoint and the Custom Event Object.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="customEventSchemaId">Provide the unique identifier of the custom event schema.</param>
        /// <param name="managementProjectsCustomEventSchemasUpdateRequestBody">Defines the custom event schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsCustomEventSchemasUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsCustomEventSchemasUpdateResponseBody>> UpdateCustomEventSchemaWithHttpInfoAsync(string projectId, string customEventSchemaId, ManagementProjectsCustomEventSchemasUpdateRequestBody managementProjectsCustomEventSchemasUpdateRequestBody = default(ManagementProjectsCustomEventSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateCustomEventSchema");
            }

            // verify the required parameter 'customEventSchemaId' is set
            if (customEventSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customEventSchemaId' when calling ManagementApi->UpdateCustomEventSchema");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("customEventSchemaId", Voucherify.Client.ClientUtils.ParameterToString(customEventSchemaId)); // path parameter
            localVarRequestOptions.Data = managementProjectsCustomEventSchemasUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateCustomEventSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementProjectsCustomEventSchemasUpdateResponseBody>("/management/v1/projects/{projectId}/custom-event-schemas/{customEventSchemaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomEventSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metadata Schema Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsMetadataSchemasUpdateResponseBody</returns>
        public ManagementProjectsMetadataSchemasUpdateResponseBody UpdateMetadataSchema(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasUpdateResponseBody> localVarResponse = UpdateMetadataSchemaWithHttpInfo(projectId, metadataSchemaId, managementProjectsMetadataSchemasUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Metadata Schema Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsMetadataSchemasUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasUpdateResponseBody> UpdateMetadataSchemaWithHttpInfo(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateMetadataSchema");
            }

            // verify the required parameter 'metadataSchemaId' is set
            if (metadataSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'metadataSchemaId' when calling ManagementApi->UpdateMetadataSchema");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metadataSchemaId", Voucherify.Client.ClientUtils.ParameterToString(metadataSchemaId)); // path parameter
            localVarRequestOptions.Data = managementProjectsMetadataSchemasUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementProjectsMetadataSchemasUpdateResponseBody>("/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Metadata Schema Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsMetadataSchemasUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsMetadataSchemasUpdateResponseBody> UpdateMetadataSchemaAsync(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasUpdateResponseBody> localVarResponse = await UpdateMetadataSchemaWithHttpInfoAsync(projectId, metadataSchemaId, managementProjectsMetadataSchemasUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Metadata Schema Updates a metadata schema. With this request, you can: - Add a nonexistent attribute definition to the metadata schema. - Update an existing attribute definition by overwriting its current values. In the request, you can provide only those definitions you want to add or update. Definitions omitted in the request remain unchanged. However, if you want to update a definition, you will have to add all its current key-value pairs as well. Only the pairs sent in the request are saved for this definition. This means that the key-value pairs that are not sent in a request are restored to default values. For example, if your definition has an array with values and it is not sent in an update request, the array values will be deleted.  👍 Additional Notes - You cannot change the type of an existing schema, e.g. from string to number. - You can remove a definition with this endpoint by providing deleted: true in the request. It will be moved to the Removed definitions section in the user interface. However, you cannot permanently remove a definition with this endpoint.  📘 Metadata Documentation  Read the Getting Started with Metadata articles to learn how metadata work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="metadataSchemaId">Provide the unique identifier of the metadata schema.</param>
        /// <param name="managementProjectsMetadataSchemasUpdateRequestBody">Defines the metadata schema to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsMetadataSchemasUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsMetadataSchemasUpdateResponseBody>> UpdateMetadataSchemaWithHttpInfoAsync(string projectId, string metadataSchemaId, ManagementProjectsMetadataSchemasUpdateRequestBody managementProjectsMetadataSchemasUpdateRequestBody = default(ManagementProjectsMetadataSchemasUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateMetadataSchema");
            }

            // verify the required parameter 'metadataSchemaId' is set
            if (metadataSchemaId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'metadataSchemaId' when calling ManagementApi->UpdateMetadataSchema");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("metadataSchemaId", Voucherify.Client.ClientUtils.ParameterToString(metadataSchemaId)); // path parameter
            localVarRequestOptions.Data = managementProjectsMetadataSchemasUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateMetadataSchema";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementProjectsMetadataSchemasUpdateResponseBody>("/management/v1/projects/{projectId}/metadata-schemas/{metadataSchemaId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMetadataSchema", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUpdateResponseBody</returns>
        public ManagementProjectsUpdateResponseBody UpdateProject(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUpdateResponseBody> localVarResponse = UpdateProjectWithHttpInfo(projectId, managementProjectsUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Project Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsUpdateResponseBody> UpdateProjectWithHttpInfo(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateProject");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementProjectsUpdateResponseBody>("/management/v1/projects/{projectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Project Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsUpdateResponseBody> UpdateProjectAsync(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUpdateResponseBody> localVarResponse = await UpdateProjectWithHttpInfoAsync(projectId, managementProjectsUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Project Updates an existing project. You can add or modify settings for timezone, currency, notifications, and other details. Only the fields sent in the request will be updated.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="managementProjectsUpdateRequestBody">Define the project details to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsUpdateResponseBody>> UpdateProjectWithHttpInfoAsync(string projectId, ManagementProjectsUpdateRequestBody managementProjectsUpdateRequestBody = default(ManagementProjectsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateProject");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = managementProjectsUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateProject";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementProjectsUpdateResponseBody>("/management/v1/projects/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Stacking Rules Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsStackingRulesUpdateResponseBody</returns>
        public ManagementProjectsStackingRulesUpdateResponseBody UpdateStackingRules(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesUpdateResponseBody> localVarResponse = UpdateStackingRulesWithHttpInfo(projectId, stackingRulesId, managementProjectsStackingRulesUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Stacking Rules Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsStackingRulesUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesUpdateResponseBody> UpdateStackingRulesWithHttpInfo(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateStackingRules");
            }

            // verify the required parameter 'stackingRulesId' is set
            if (stackingRulesId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackingRulesId' when calling ManagementApi->UpdateStackingRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackingRulesId", Voucherify.Client.ClientUtils.ParameterToString(stackingRulesId)); // path parameter
            localVarRequestOptions.Data = managementProjectsStackingRulesUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementProjectsStackingRulesUpdateResponseBody>("/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Stacking Rules Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsStackingRulesUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsStackingRulesUpdateResponseBody> UpdateStackingRulesAsync(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesUpdateResponseBody> localVarResponse = await UpdateStackingRulesWithHttpInfoAsync(projectId, stackingRulesId, managementProjectsStackingRulesUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Stacking Rules Updates the stacking rules. Only the provided fields will be updated. However, if you update an array, the content of the array is overwritten. This means that if you want to add new values to an array and retain existing ones, you need to provide both the existing and new values in the request.  📘 Stacking Rules Documentation  Read [the Stacking Rules article](https://support.voucherify.io/article/604-stacking-rules) to learn how they work.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="stackingRulesId">Provide the unique identifier of the stacking rules.</param>
        /// <param name="managementProjectsStackingRulesUpdateRequestBody">Defines the stacking rules to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsStackingRulesUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsStackingRulesUpdateResponseBody>> UpdateStackingRulesWithHttpInfoAsync(string projectId, string stackingRulesId, ManagementProjectsStackingRulesUpdateRequestBody managementProjectsStackingRulesUpdateRequestBody = default(ManagementProjectsStackingRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateStackingRules");
            }

            // verify the required parameter 'stackingRulesId' is set
            if (stackingRulesId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackingRulesId' when calling ManagementApi->UpdateStackingRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackingRulesId", Voucherify.Client.ClientUtils.ParameterToString(stackingRulesId)); // path parameter
            localVarRequestOptions.Data = managementProjectsStackingRulesUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateStackingRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementProjectsStackingRulesUpdateResponseBody>("/management/v1/projects/{projectId}/stacking-rules/{stackingRulesId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStackingRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Updates the users role.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsUsersUpdateRoleResponseBody</returns>
        public ManagementProjectsUsersUpdateRoleResponseBody UpdateUser(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersUpdateRoleResponseBody> localVarResponse = UpdateUserWithHttpInfo(projectId, userId, managementProjectsUsersUpdateRoleRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Updates the users role.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsUsersUpdateRoleResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsUsersUpdateRoleResponseBody> UpdateUserWithHttpInfo(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->UpdateUser");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Voucherify.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = managementProjectsUsersUpdateRoleRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementProjectsUsersUpdateRoleResponseBody>("/management/v1/projects/{projectId}/users/{userId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Updates the users role.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsUsersUpdateRoleResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsUsersUpdateRoleResponseBody> UpdateUserAsync(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsUsersUpdateRoleResponseBody> localVarResponse = await UpdateUserWithHttpInfoAsync(projectId, userId, managementProjectsUsersUpdateRoleRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Updates the users role.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="userId">Provide the unique identifier of the user. Alternatively, provide the users login.</param>
        /// <param name="managementProjectsUsersUpdateRoleRequestBody">Defines the users new role. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsUsersUpdateRoleResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsUsersUpdateRoleResponseBody>> UpdateUserWithHttpInfoAsync(string projectId, string userId, ManagementProjectsUsersUpdateRoleRequestBody managementProjectsUsersUpdateRoleRequestBody = default(ManagementProjectsUsersUpdateRoleRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateUser");
            }

            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->UpdateUser");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", Voucherify.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = managementProjectsUsersUpdateRoleRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementProjectsUsersUpdateRoleResponseBody>("/management/v1/projects/{projectId}/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ManagementProjectsWebhooksUpdateResponseBody</returns>
        public ManagementProjectsWebhooksUpdateResponseBody UpdateWebhook(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksUpdateResponseBody> localVarResponse = UpdateWebhookWithHttpInfo(projectId, webhookId, managementProjectsWebhooksUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ManagementProjectsWebhooksUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ManagementProjectsWebhooksUpdateResponseBody> UpdateWebhookWithHttpInfo(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateWebhook");
            }

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->UpdateWebhook");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", Voucherify.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            localVarRequestOptions.Data = managementProjectsWebhooksUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ManagementProjectsWebhooksUpdateResponseBody>("/management/v1/projects/{projectId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Webhook Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ManagementProjectsWebhooksUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ManagementProjectsWebhooksUpdateResponseBody> UpdateWebhookAsync(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ManagementProjectsWebhooksUpdateResponseBody> localVarResponse = await UpdateWebhookWithHttpInfoAsync(projectId, webhookId, managementProjectsWebhooksUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Webhook Updates a webhook configuration. The events listed in the request are overwritten. If you want to add more events, provide also the events that are already in the webhook configuration.  📘 Webhook Documentation  Read Webhooks v2024-01-1 article to learn how webhooks work in Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">Provide the unique identifier of the project.</param>
        /// <param name="webhookId">Provide the unique identifier of the webhook configuration.</param>
        /// <param name="managementProjectsWebhooksUpdateRequestBody">Defines the webhook configuration to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ManagementProjectsWebhooksUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ManagementProjectsWebhooksUpdateResponseBody>> UpdateWebhookWithHttpInfoAsync(string projectId, string webhookId, ManagementProjectsWebhooksUpdateRequestBody managementProjectsWebhooksUpdateRequestBody = default(ManagementProjectsWebhooksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'projectId' when calling ManagementApi->UpdateWebhook");
            }

            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->UpdateWebhook");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", Voucherify.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.PathParameters.Add("webhookId", Voucherify.Client.ClientUtils.ParameterToString(webhookId)); // path parameter
            localVarRequestOptions.Data = managementProjectsWebhooksUpdateRequestBody;

            localVarRequestOptions.Operation = "ManagementApi.UpdateWebhook";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-Management-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Token", this.Configuration.GetApiKeyWithPrefix("X-Management-Token"));
            }
            // authentication (X-Management-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Management-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Management-Id", this.Configuration.GetApiKeyWithPrefix("X-Management-Id"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ManagementProjectsWebhooksUpdateResponseBody>("/management/v1/projects/{projectId}/webhooks/{webhookId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWebhook", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
