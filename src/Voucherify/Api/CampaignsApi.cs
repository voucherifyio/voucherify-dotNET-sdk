/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Voucher with Specific Code to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsVouchersCreateResponseBody</returns>
        CampaignsVouchersCreateResponseBody AddVoucherWithSpecificCodeToCampaign(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Add Voucher with Specific Code to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsVouchersCreateResponseBody</returns>
        ApiResponse<CampaignsVouchersCreateResponseBody> AddVoucherWithSpecificCodeToCampaignWithHttpInfo(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Add Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsVouchersCreateCombinedResponseBody</returns>
        CampaignsVouchersCreateCombinedResponseBody AddVouchersToCampaign(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0);

        /// <summary>
        /// Add Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsVouchersCreateCombinedResponseBody</returns>
        ApiResponse<CampaignsVouchersCreateCombinedResponseBody> AddVouchersToCampaignWithHttpInfo(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Campaign
        /// </summary>
        /// <remarks>
        /// Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsCreateResponseBody</returns>
        CampaignsCreateResponseBody CreateCampaign(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Campaign
        /// </summary>
        /// <remarks>
        /// Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsCreateResponseBody</returns>
        ApiResponse<CampaignsCreateResponseBody> CreateCampaignWithHttpInfo(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsDeleteResponseBody</returns>
        CampaignsDeleteResponseBody DeleteCampaign(string campaignId, bool? force = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsDeleteResponseBody</returns>
        ApiResponse<CampaignsDeleteResponseBody> DeleteCampaignWithHttpInfo(string campaignId, bool? force = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Disable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object DisableCampaign(string campaignId, int operationIndex = 0);

        /// <summary>
        /// Disable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DisableCampaignWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// Enable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object EnableCampaign(string campaignId, int operationIndex = 0);

        /// <summary>
        /// Enable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> EnableCampaignWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// Export Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsTransactionsExportCreateResponseBody</returns>
        CampaignsTransactionsExportCreateResponseBody ExportCampaignTransactions(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Export Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsTransactionsExportCreateResponseBody</returns>
        ApiResponse<CampaignsTransactionsExportCreateResponseBody> ExportCampaignTransactionsWithHttpInfo(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Get Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsGetResponseBody</returns>
        CampaignsGetResponseBody GetCampaign(string campaignId, int operationIndex = 0);

        /// <summary>
        /// Get Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsGetResponseBody</returns>
        ApiResponse<CampaignsGetResponseBody> GetCampaignWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// Import Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsImportCreateResponseBody</returns>
        CampaignsImportCreateResponseBody ImportVouchersToCampaign(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0);

        /// <summary>
        /// Import Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsImportCreateResponseBody</returns>
        ApiResponse<CampaignsImportCreateResponseBody> ImportVouchersToCampaignWithHttpInfo(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0);
        /// <summary>
        /// Import Vouchers to Campaign by CSV
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsImportCsvCreateResponseBody</returns>
        CampaignsImportCsvCreateResponseBody ImportVouchersToCampaignUsingCsv(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Import Vouchers to Campaign by CSV
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsImportCsvCreateResponseBody</returns>
        ApiResponse<CampaignsImportCsvCreateResponseBody> ImportVouchersToCampaignUsingCsvWithHttpInfo(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// List Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsTransactionsListResponseBody</returns>
        CampaignsTransactionsListResponseBody ListCampaignTransactions(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0);

        /// <summary>
        /// List Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsTransactionsListResponseBody</returns>
        ApiResponse<CampaignsTransactionsListResponseBody> ListCampaignTransactionsWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0);
        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsListResponseBody</returns>
        CampaignsListResponseBody ListCampaigns(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0);

        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsListResponseBody</returns>
        ApiResponse<CampaignsListResponseBody> ListCampaignsWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0);
        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsUpdateResponseBody</returns>
        CampaignsUpdateResponseBody UpdateCampaign(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsUpdateResponseBody</returns>
        ApiResponse<CampaignsUpdateResponseBody> UpdateCampaignWithHttpInfo(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Voucher with Specific Code to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsVouchersCreateResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsVouchersCreateResponseBody> AddVoucherWithSpecificCodeToCampaignAsync(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Voucher with Specific Code to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsVouchersCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsVouchersCreateResponseBody>> AddVoucherWithSpecificCodeToCampaignWithHttpInfoAsync(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsVouchersCreateCombinedResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsVouchersCreateCombinedResponseBody> AddVouchersToCampaignAsync(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsVouchersCreateCombinedResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsVouchersCreateCombinedResponseBody>> AddVouchersToCampaignWithHttpInfoAsync(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Campaign
        /// </summary>
        /// <remarks>
        /// Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsCreateResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsCreateResponseBody> CreateCampaignAsync(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Campaign
        /// </summary>
        /// <remarks>
        /// Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsCreateResponseBody>> CreateCampaignWithHttpInfoAsync(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsDeleteResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsDeleteResponseBody> DeleteCampaignAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsDeleteResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsDeleteResponseBody>> DeleteCampaignWithHttpInfoAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Disable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DisableCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Disable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisableCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Enable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> EnableCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Enable Campaign
        /// </summary>
        /// <remarks>
        /// There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Export Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsTransactionsExportCreateResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsTransactionsExportCreateResponseBody> ExportCampaignTransactionsAsync(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsTransactionsExportCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsTransactionsExportCreateResponseBody>> ExportCampaignTransactionsWithHttpInfoAsync(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsGetResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsGetResponseBody> GetCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsGetResponseBody>> GetCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Import Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsImportCreateResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsImportCreateResponseBody> ImportVouchersToCampaignAsync(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Import Vouchers to Campaign
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsImportCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsImportCreateResponseBody>> ImportVouchersToCampaignWithHttpInfoAsync(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Import Vouchers to Campaign by CSV
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsImportCsvCreateResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsImportCsvCreateResponseBody> ImportVouchersToCampaignUsingCsvAsync(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Import Vouchers to Campaign by CSV
        /// </summary>
        /// <remarks>
        /// Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsImportCsvCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsImportCsvCreateResponseBody>> ImportVouchersToCampaignUsingCsvWithHttpInfoAsync(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsTransactionsListResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsTransactionsListResponseBody> ListCampaignTransactionsAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsTransactionsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsTransactionsListResponseBody>> ListCampaignTransactionsWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsListResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsListResponseBody> ListCampaignsAsync(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsListResponseBody>> ListCampaignsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsUpdateResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsUpdateResponseBody> UpdateCampaignAsync(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Campaign
        /// </summary>
        /// <remarks>
        /// Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsUpdateResponseBody>> UpdateCampaignWithHttpInfoAsync(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApi : ICampaignsApiSync, ICampaignsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignsApi : ICampaignsApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignsApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CampaignsApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Voucher with Specific Code to Campaign This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsVouchersCreateResponseBody</returns>
        public CampaignsVouchersCreateResponseBody AddVoucherWithSpecificCodeToCampaign(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsVouchersCreateResponseBody> localVarResponse = AddVoucherWithSpecificCodeToCampaignWithHttpInfo(campaignId, code, campaignsVouchersCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Voucher with Specific Code to Campaign This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsVouchersCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsVouchersCreateResponseBody> AddVoucherWithSpecificCodeToCampaignWithHttpInfo(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->AddVoucherWithSpecificCodeToCampaign");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'code' when calling CampaignsApi->AddVoucherWithSpecificCodeToCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Voucherify.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = campaignsVouchersCreateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.AddVoucherWithSpecificCodeToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignsVouchersCreateResponseBody>("/v1/campaigns/{campaignId}/vouchers/{code}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVoucherWithSpecificCodeToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Voucher with Specific Code to Campaign This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsVouchersCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsVouchersCreateResponseBody> AddVoucherWithSpecificCodeToCampaignAsync(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsVouchersCreateResponseBody> localVarResponse = await AddVoucherWithSpecificCodeToCampaignWithHttpInfoAsync(campaignId, code, campaignsVouchersCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Voucher with Specific Code to Campaign This method gives a possibility to add a new voucher to an existing campaign. The voucher definition will be inherited from the definition kept in the campaign profile. However, you are able to overwrite a few properties inherited from the campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="code">A custom **code** that identifies the voucher.</param>
        /// <param name="campaignsVouchersCreateRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsVouchersCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsVouchersCreateResponseBody>> AddVoucherWithSpecificCodeToCampaignWithHttpInfoAsync(string campaignId, string code, CampaignsVouchersCreateRequestBody campaignsVouchersCreateRequestBody = default(CampaignsVouchersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->AddVoucherWithSpecificCodeToCampaign");
            }

            // verify the required parameter 'code' is set
            if (code == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'code' when calling CampaignsApi->AddVoucherWithSpecificCodeToCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Voucherify.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = campaignsVouchersCreateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.AddVoucherWithSpecificCodeToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignsVouchersCreateResponseBody>("/v1/campaigns/{campaignId}/vouchers/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVoucherWithSpecificCodeToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Vouchers to Campaign This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsVouchersCreateCombinedResponseBody</returns>
        public CampaignsVouchersCreateCombinedResponseBody AddVouchersToCampaign(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsVouchersCreateCombinedResponseBody> localVarResponse = AddVouchersToCampaignWithHttpInfo(campaignId, vouchersCount, campaignsVouchersCreateInBulkRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Vouchers to Campaign This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsVouchersCreateCombinedResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsVouchersCreateCombinedResponseBody> AddVouchersToCampaignWithHttpInfo(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->AddVouchersToCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (vouchersCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "vouchers_count", vouchersCount));
            }
            localVarRequestOptions.Data = campaignsVouchersCreateInBulkRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.AddVouchersToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignsVouchersCreateCombinedResponseBody>("/v1/campaigns/{campaignId}/vouchers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVouchersToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Vouchers to Campaign This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsVouchersCreateCombinedResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsVouchersCreateCombinedResponseBody> AddVouchersToCampaignAsync(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsVouchersCreateCombinedResponseBody> localVarResponse = await AddVouchersToCampaignWithHttpInfoAsync(campaignId, vouchersCount, campaignsVouchersCreateInBulkRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Vouchers to Campaign This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body. If you provide an optional code_config parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign to which voucher(s) will be added. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="vouchersCount">Number of vouchers that should be added. (optional)</param>
        /// <param name="campaignsVouchersCreateInBulkRequestBody">Specify the voucher parameters that you would like to overwrite. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsVouchersCreateCombinedResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsVouchersCreateCombinedResponseBody>> AddVouchersToCampaignWithHttpInfoAsync(string campaignId, int? vouchersCount = default(int?), CampaignsVouchersCreateInBulkRequestBody campaignsVouchersCreateInBulkRequestBody = default(CampaignsVouchersCreateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->AddVouchersToCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (vouchersCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "vouchers_count", vouchersCount));
            }
            localVarRequestOptions.Data = campaignsVouchersCreateInBulkRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.AddVouchersToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignsVouchersCreateCombinedResponseBody>("/v1/campaigns/{campaignId}/vouchers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddVouchersToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Campaign Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsCreateResponseBody</returns>
        public CampaignsCreateResponseBody CreateCampaign(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsCreateResponseBody> localVarResponse = CreateCampaignWithHttpInfo(campaignsCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Campaign Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsCreateResponseBody> CreateCampaignWithHttpInfo(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = campaignsCreateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.CreateCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignsCreateResponseBody>("/v1/campaigns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Campaign Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsCreateResponseBody> CreateCampaignAsync(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsCreateResponseBody> localVarResponse = await CreateCampaignWithHttpInfoAsync(campaignsCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Campaign Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.    📘 Global uniqueness  All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.    🚧 Code generation status  This is an asynchronous action; you cant read or modify a newly created campaign until the code generation is completed. See the creation_status field in the campaign object description. 🚧 Standalone Vouchers and Campaigns In version [v20241004](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004), standalone vouchers created through the Voucherify dashboard create a campaign for that voucher. However, you cannot create a standalone discount or gift voucher campaign with the type: STANDALONE through the API. Voucherify developers work on adding that feature. Follow the [Voucherify Release Notes](https://support.voucherify.io/article/23-whats-new-in-voucherify#v20241004) for more details about released features.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignsCreateRequestBody">Specify the details of the campaign that you would like to create. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsCreateResponseBody>> CreateCampaignWithHttpInfoAsync(CampaignsCreateRequestBody campaignsCreateRequestBody = default(CampaignsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = campaignsCreateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.CreateCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignsCreateResponseBody>("/v1/campaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Campaign Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsDeleteResponseBody</returns>
        public CampaignsDeleteResponseBody DeleteCampaign(string campaignId, bool? force = default(bool?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsDeleteResponseBody> localVarResponse = DeleteCampaignWithHttpInfo(campaignId, force);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Campaign Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsDeleteResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsDeleteResponseBody> DeleteCampaignWithHttpInfo(string campaignId, bool? force = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->DeleteCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "CampaignsApi.DeleteCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CampaignsDeleteResponseBody>("/v1/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Campaign Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsDeleteResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsDeleteResponseBody> DeleteCampaignAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsDeleteResponseBody> localVarResponse = await DeleteCampaignWithHttpInfoAsync(campaignId, force, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Campaign Deletes a campaign and all related vouchers. This action cannot be undone. Also, this method immediately removes any redemptions on the voucher. If the force parameter is set to false or not set at all, the campaign and all related vouchers will be moved to the bin. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the campaign and related vouchers will be moved to the bin. Going forward, the user will be able to create the next campaign with exactly the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsDeleteResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsDeleteResponseBody>> DeleteCampaignWithHttpInfoAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->DeleteCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "CampaignsApi.DeleteCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CampaignsDeleteResponseBody>("/v1/campaigns/{campaignId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object DisableCampaign(string campaignId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<Object> localVarResponse = DisableCampaignWithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Voucherify.Client.ApiResponse<Object> DisableCampaignWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->DisableCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignsApi.DisableCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/campaigns/{campaignId}/disable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DisableCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<Object> localVarResponse = await DisableCampaignWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being disabled. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DisableCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->DisableCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignsApi.DisableCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/campaigns/{campaignId}/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object EnableCampaign(string campaignId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<Object> localVarResponse = EnableCampaignWithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Voucherify.Client.ApiResponse<Object> EnableCampaignWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->EnableCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignsApi.EnableCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/campaigns/{campaignId}/enable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> EnableCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<Object> localVarResponse = await EnableCampaignWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Campaign There are various times when youll want to manage a campaigns accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.   Sets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date of the campaign and voucher and the voucher and campaign are not expired.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> EnableCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->EnableCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignsApi.EnableCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/campaigns/{campaignId}/enable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsTransactionsExportCreateResponseBody</returns>
        public CampaignsTransactionsExportCreateResponseBody ExportCampaignTransactions(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody> localVarResponse = ExportCampaignTransactionsWithHttpInfo(campaignId, campaignsTransactionsExportCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsTransactionsExportCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody> ExportCampaignTransactionsWithHttpInfo(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ExportCampaignTransactions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = campaignsTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.ExportCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignsTransactionsExportCreateResponseBody>("/v1/campaigns/{campaignId}/transactions/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsTransactionsExportCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsTransactionsExportCreateResponseBody> ExportCampaignTransactionsAsync(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody> localVarResponse = await ExportCampaignTransactionsWithHttpInfoAsync(campaignId, campaignsTransactionsExportCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about credit movements on all gift cards or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    👍 Export Loyalty Campaign Transactions  For loyalty campaigns, this method works in the same way the POST Export Loyalty Campaign Transactions does.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsTransactionsExportCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody>> ExportCampaignTransactionsWithHttpInfoAsync(string campaignId, CampaignsTransactionsExportCreateRequestBody campaignsTransactionsExportCreateRequestBody = default(CampaignsTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ExportCampaignTransactions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = campaignsTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.ExportCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignsTransactionsExportCreateResponseBody>("/v1/campaigns/{campaignId}/transactions/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Campaign Retrieves the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsGetResponseBody</returns>
        public CampaignsGetResponseBody GetCampaign(string campaignId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsGetResponseBody> localVarResponse = GetCampaignWithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Campaign Retrieves the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsGetResponseBody> GetCampaignWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignsApi.GetCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CampaignsGetResponseBody>("/v1/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Campaign Retrieves the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsGetResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsGetResponseBody> GetCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsGetResponseBody> localVarResponse = await GetCampaignWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Campaign Retrieves the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsGetResponseBody>> GetCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->GetCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignsApi.GetCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CampaignsGetResponseBody>("/v1/campaigns/{campaignId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Vouchers to Campaign Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsImportCreateResponseBody</returns>
        public CampaignsImportCreateResponseBody ImportVouchersToCampaign(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsImportCreateResponseBody> localVarResponse = ImportVouchersToCampaignWithHttpInfo(campaignId, campaignsImportVoucherItem);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Vouchers to Campaign Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsImportCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsImportCreateResponseBody> ImportVouchersToCampaignWithHttpInfo(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ImportVouchersToCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = campaignsImportVoucherItem;

            localVarRequestOptions.Operation = "CampaignsApi.ImportVouchersToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignsImportCreateResponseBody>("/v1/campaigns/{campaignId}/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportVouchersToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Vouchers to Campaign Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsImportCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsImportCreateResponseBody> ImportVouchersToCampaignAsync(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsImportCreateResponseBody> localVarResponse = await ImportVouchersToCampaignWithHttpInfoAsync(campaignId, campaignsImportVoucherItem, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Vouchers to Campaign Imports vouchers to an **existing** campaign. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID of an existing campaign to which youre importing the codes. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsImportVoucherItem">Discount type, expiration date and the remaining attributes will be taken from the Campaign settings. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsImportCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsImportCreateResponseBody>> ImportVouchersToCampaignWithHttpInfoAsync(string campaignId, List<CampaignsImportVoucherItem> campaignsImportVoucherItem = default(List<CampaignsImportVoucherItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ImportVouchersToCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = campaignsImportVoucherItem;

            localVarRequestOptions.Operation = "CampaignsApi.ImportVouchersToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignsImportCreateResponseBody>("/v1/campaigns/{campaignId}/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportVouchersToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Vouchers to Campaign by CSV Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsImportCsvCreateResponseBody</returns>
        public CampaignsImportCsvCreateResponseBody ImportVouchersToCampaignUsingCsv(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsImportCsvCreateResponseBody> localVarResponse = ImportVouchersToCampaignUsingCsvWithHttpInfo(campaignId, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Vouchers to Campaign by CSV Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsImportCsvCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsImportCsvCreateResponseBody> ImportVouchersToCampaignUsingCsvWithHttpInfo(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ImportVouchersToCampaignUsingCsv");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CampaignsApi.ImportVouchersToCampaignUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignsImportCsvCreateResponseBody>("/v1/campaigns/{campaignId}/importCSV", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportVouchersToCampaignUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Vouchers to Campaign by CSV Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsImportCsvCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsImportCsvCreateResponseBody> ImportVouchersToCampaignUsingCsvAsync(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsImportCsvCreateResponseBody> localVarResponse = await ImportVouchersToCampaignUsingCsvWithHttpInfoAsync(campaignId, file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Vouchers to Campaign by CSV Imports vouchers to an **existing** campaign.   The CSV file has to include headers in the first line.  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the campaign being enabled. You can either pass the campaign ID, which was assigned by Voucherify or the name of the campaign as the path parameter value.</param>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsImportCsvCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsImportCsvCreateResponseBody>> ImportVouchersToCampaignUsingCsvWithHttpInfoAsync(string campaignId, System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ImportVouchersToCampaignUsingCsv");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CampaignsApi.ImportVouchersToCampaignUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignsImportCsvCreateResponseBody>("/v1/campaigns/{campaignId}/importCSV", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportVouchersToCampaignUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsTransactionsListResponseBody</returns>
        public CampaignsTransactionsListResponseBody ListCampaignTransactions(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsTransactionsListResponseBody> localVarResponse = ListCampaignTransactionsWithHttpInfo(campaignId, limit, order, startingAfterId, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsTransactionsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsTransactionsListResponseBody> ListCampaignTransactionsWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ListCampaignTransactions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.VoucherId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucher_id]", filters.VoucherId));
                }
            }

            localVarRequestOptions.Operation = "CampaignsApi.ListCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CampaignsTransactionsListResponseBody>("/v1/campaigns/{campaignId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsTransactionsListResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsTransactionsListResponseBody> ListCampaignTransactionsAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsTransactionsListResponseBody> localVarResponse = await ListCampaignTransactionsWithHttpInfoAsync(campaignId, limit, order, startingAfterId, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name. The id filter denotes the unique transaction identifier.  🚧  The endpoint works only for gift card and loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsTransactionsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsTransactionsListResponseBody>> ListCampaignTransactionsWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->ListCampaignTransactions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.VoucherId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucherId]", filters.VoucherId));
                }
            }

            localVarRequestOptions.Operation = "CampaignsApi.ListCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CampaignsTransactionsListResponseBody>("/v1/campaigns/{campaignId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaigns Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsListResponseBody</returns>
        public CampaignsListResponseBody ListCampaigns(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsListResponseBody> localVarResponse = ListCampaignsWithHttpInfo(limit, page, campaignType, expand, campaignStatus, isReferralCode, order, filters, accessSettings);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaigns Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsListResponseBody> ListCampaignsWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (campaignType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_type", campaignType));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (campaignStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_status", campaignStatus));
            }
            if (isReferralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "is_referral_code", isReferralCode));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (filters != null)
            {
                if (filters.Campaigns != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaigns]", filters.Campaigns));
                }
                if (filters.CampaignsId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaigns_id]", filters.CampaignsId));
                }
                if (filters.CampaignStatus != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaign_status]", filters.CampaignStatus));
                }
                if (filters.Status != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[status]", filters.Status));
                }
                if (filters.Active != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[active]", filters.Active));
                }
                if (filters.IsReferralCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[is_referral_code]", filters.IsReferralCode));
                }
                if (filters.ValidityTimeframe != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[validity_timeframe]", filters.ValidityTimeframe));
                }
                if (filters.VoucherType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucher_type]", filters.VoucherType));
                }
                if (filters.Categories != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[categories]", filters.Categories));
                }
                if (filters.CategoryIds != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[category_ids]", filters.CategoryIds));
                }
                if (filters.Type != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[type]", filters.Type));
                }
                if (filters.CreatedDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[created_date]", filters.CreatedDate));
                }
                if (filters.UpdatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[updated_at]", filters.UpdatedAt));
                }
                if (filters.StartDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[start_date]", filters.StartDate));
                }
                if (filters.ExpirationDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[expiration_date]", filters.ExpirationDate));
                }
                if (filters.ValidityDayOfWeek != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[validity_day_of_week]", filters.ValidityDayOfWeek));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }
            if (accessSettings != null)
            {
                if (accessSettings.Filter != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "access_settings[filter]", accessSettings.Filter));
                }
            }

            localVarRequestOptions.Operation = "CampaignsApi.ListCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CampaignsListResponseBody>("/v1/campaigns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaigns Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsListResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsListResponseBody> ListCampaignsAsync(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsListResponseBody> localVarResponse = await ListCampaignsWithHttpInfoAsync(limit, page, campaignType, expand, campaignStatus, isReferralCode, order, filters, accessSettings, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaigns Retrieve a list of campaigns in a project.  The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.   When you get a list of campaigns, you can optionally specify query parameters to customize the amount of campaigns returned per call using limit, which page of campaigns to return using page, sort the campaigns using the order query parameter and filter the results by the campaign_type. This method will return an error when trying to return a limit of more than 100 campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="campaignType">This attribute allows filtering by campaign type. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="campaignStatus">Sorts the results by the status of the campaign. (optional)</param>
        /// <param name="isReferralCode">Sorts the results that are or are not referral campaigns. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters the results by various campaign properties. (optional)</param>
        /// <param name="accessSettings">Filter by areas and stores IDs to return campaigns that are assigned to areas, stores, and all stores in an area. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsListResponseBody>> ListCampaignsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterCampaignStatusListCampaigns? campaignStatus = default(ParameterCampaignStatusListCampaigns?), bool? isReferralCode = default(bool?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), ParameterFiltersListCampaigns filters = default(ParameterFiltersListCampaigns), ParameterCampaignsAccessSetttings accessSettings = default(ParameterCampaignsAccessSetttings), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (campaignType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_type", campaignType));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (campaignStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_status", campaignStatus));
            }
            if (isReferralCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "is_referral_code", isReferralCode));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (filters != null)
            {
                if (filters.Campaigns != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaigns]", filters.Campaigns));
                }
                if (filters.CampaignsId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaignsId]", filters.CampaignsId));
                }
                if (filters.CampaignStatus != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaignStatus]", filters.CampaignStatus));
                }
                if (filters.Status != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[status]", filters.Status));
                }
                if (filters.Active != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[active]", filters.Active));
                }
                if (filters.IsReferralCode != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[isReferralCode]", filters.IsReferralCode));
                }
                if (filters.ValidityTimeframe != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[validityTimeframe]", filters.ValidityTimeframe));
                }
                if (filters.VoucherType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucherType]", filters.VoucherType));
                }
                if (filters.Categories != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[categories]", filters.Categories));
                }
                if (filters.CategoryIds != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[categoryIds]", filters.CategoryIds));
                }
                if (filters.Type != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[type]", filters.Type));
                }
                if (filters.CreatedDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[createdDate]", filters.CreatedDate));
                }
                if (filters.UpdatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[updatedAt]", filters.UpdatedAt));
                }
                if (filters.StartDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[startDate]", filters.StartDate));
                }
                if (filters.ExpirationDate != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[expirationDate]", filters.ExpirationDate));
                }
                if (filters.ValidityDayOfWeek != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[validityDayOfWeek]", filters.ValidityDayOfWeek));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }
            if (accessSettings != null)
            {
                if (accessSettings.Filter != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "accessSettings[filter]", accessSettings.Filter));
                }
            }

            localVarRequestOptions.Operation = "CampaignsApi.ListCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CampaignsListResponseBody>("/v1/campaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Campaign Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsUpdateResponseBody</returns>
        public CampaignsUpdateResponseBody UpdateCampaign(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsUpdateResponseBody> localVarResponse = UpdateCampaignWithHttpInfo(campaignId, campaignsUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Campaign Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsUpdateResponseBody> UpdateCampaignWithHttpInfo(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdateCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = campaignsUpdateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.UpdateCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CampaignsUpdateResponseBody>("/v1/campaigns/{campaignId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Campaign Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsUpdateResponseBody> UpdateCampaignAsync(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsUpdateResponseBody> localVarResponse = await UpdateCampaignWithHttpInfoAsync(campaignId, campaignsUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Campaign Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.  Fields other than the ones listed in the request body wont be modified. Even if provided, they will be silently skipped.     ## Vouchers will be affected  This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="campaignsUpdateRequestBody">Specify the campaign parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsUpdateResponseBody>> UpdateCampaignWithHttpInfoAsync(string campaignId, CampaignsUpdateRequestBody campaignsUpdateRequestBody = default(CampaignsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignsApi->UpdateCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = campaignsUpdateRequestBody;

            localVarRequestOptions.Operation = "CampaignsApi.UpdateCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CampaignsUpdateResponseBody>("/v1/campaigns/{campaignId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
