/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPromotionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Promotion Tier to Campaign
        /// </summary>
        /// <remarks>
        /// This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersCreateResponseBody</returns>
        PromotionsTiersCreateResponseBody AddPromotionTierToCampaign(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Add Promotion Tier to Campaign
        /// </summary>
        /// <remarks>
        /// This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersCreateResponseBody</returns>
        ApiResponse<PromotionsTiersCreateResponseBody> AddPromotionTierToCampaignWithHttpInfo(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksCreateResponseBody</returns>
        PromotionsStacksCreateResponseBody CreatePromotionStack(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksCreateResponseBody</returns>
        ApiResponse<PromotionsStacksCreateResponseBody> CreatePromotionStackWithHttpInfo(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Delete Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePromotionStack(string campaignId, string stackId, int operationIndex = 0);

        /// <summary>
        /// Delete Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePromotionStackWithHttpInfo(string campaignId, string stackId, int operationIndex = 0);
        /// <summary>
        /// Delete Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePromotionTier(string promotionTierId, int operationIndex = 0);

        /// <summary>
        /// Delete Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0);
        /// <summary>
        /// Disable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersDisableResponseBody</returns>
        PromotionsTiersDisableResponseBody DisablePromotionTier(string promotionTierId, int operationIndex = 0);

        /// <summary>
        /// Disable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersDisableResponseBody</returns>
        ApiResponse<PromotionsTiersDisableResponseBody> DisablePromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0);
        /// <summary>
        /// Enable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersEnableResponseBody</returns>
        PromotionsTiersEnableResponseBody EnablePromotionTier(string promotionTierId, int operationIndex = 0);

        /// <summary>
        /// Enable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersEnableResponseBody</returns>
        ApiResponse<PromotionsTiersEnableResponseBody> EnablePromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0);
        /// <summary>
        /// Get Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksGetResponseBody</returns>
        PromotionsStacksGetResponseBody GetPromotionStack(string campaignId, string stackId, int operationIndex = 0);

        /// <summary>
        /// Get Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksGetResponseBody</returns>
        ApiResponse<PromotionsStacksGetResponseBody> GetPromotionStackWithHttpInfo(string campaignId, string stackId, int operationIndex = 0);
        /// <summary>
        /// Get Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables you to retrieve a specific promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersGetResponseBody</returns>
        PromotionsTiersGetResponseBody GetPromotionTier(string promotionTierId, int operationIndex = 0);

        /// <summary>
        /// Get Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables you to retrieve a specific promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersGetResponseBody</returns>
        ApiResponse<PromotionsTiersGetResponseBody> GetPromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0);
        /// <summary>
        /// List Promotion Stacks
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksListResponseBody</returns>
        PromotionsStacksListResponseBody ListAllPromotionStacks(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0);

        /// <summary>
        /// List Promotion Stacks
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksListResponseBody</returns>
        ApiResponse<PromotionsStacksListResponseBody> ListAllPromotionStacksWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0);
        /// <summary>
        /// List Promotion Stacks in Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksListResponseBody</returns>
        PromotionsStacksListResponseBody ListPromotionStacksInCampaign(string campaignId, int operationIndex = 0);

        /// <summary>
        /// List Promotion Stacks in Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksListResponseBody</returns>
        ApiResponse<PromotionsStacksListResponseBody> ListPromotionStacksInCampaignWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// List Promotion Tiers
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersListResponseBody</returns>
        PromotionsTiersListResponseBody ListPromotionTiers(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0);

        /// <summary>
        /// List Promotion Tiers
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersListResponseBody</returns>
        ApiResponse<PromotionsTiersListResponseBody> ListPromotionTiersWithHttpInfo(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0);
        /// <summary>
        /// List Promotion Tiers from Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersListResponseBody</returns>
        PromotionsTiersListResponseBody ListPromotionTiersFromCampaign(string campaignId, int operationIndex = 0);

        /// <summary>
        /// List Promotion Tiers from Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersListResponseBody</returns>
        ApiResponse<PromotionsTiersListResponseBody> ListPromotionTiersFromCampaignWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// Update Promotion Stack
        /// </summary>
        /// <remarks>
        /// This methods allows for editing an existing stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksUpdateResponseBody</returns>
        PromotionsStacksUpdateResponseBody UpdatePromotionStack(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Promotion Stack
        /// </summary>
        /// <remarks>
        /// This methods allows for editing an existing stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksUpdateResponseBody</returns>
        ApiResponse<PromotionsStacksUpdateResponseBody> UpdatePromotionStackWithHttpInfo(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method updates a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersUpdateResponseBody</returns>
        PromotionsTiersUpdateResponseBody UpdatePromotionTier(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method updates a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersUpdateResponseBody</returns>
        ApiResponse<PromotionsTiersUpdateResponseBody> UpdatePromotionTierWithHttpInfo(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPromotionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Promotion Tier to Campaign
        /// </summary>
        /// <remarks>
        /// This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersCreateResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsTiersCreateResponseBody> AddPromotionTierToCampaignAsync(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Promotion Tier to Campaign
        /// </summary>
        /// <remarks>
        /// This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsTiersCreateResponseBody>> AddPromotionTierToCampaignWithHttpInfoAsync(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksCreateResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsStacksCreateResponseBody> CreatePromotionStackAsync(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsStacksCreateResponseBody>> CreatePromotionStackWithHttpInfoAsync(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePromotionStackAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePromotionStackWithHttpInfoAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method deletes a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Disable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersDisableResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsTiersDisableResponseBody> DisablePromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Disable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersDisableResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsTiersDisableResponseBody>> DisablePromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Enable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersEnableResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsTiersEnableResponseBody> EnablePromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Enable Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersEnableResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsTiersEnableResponseBody>> EnablePromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksGetResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsStacksGetResponseBody> GetPromotionStackAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Promotion Stack
        /// </summary>
        /// <remarks>
        /// This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsStacksGetResponseBody>> GetPromotionStackWithHttpInfoAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables you to retrieve a specific promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersGetResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsTiersGetResponseBody> GetPromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method enables you to retrieve a specific promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsTiersGetResponseBody>> GetPromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Promotion Stacks
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksListResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsStacksListResponseBody> ListAllPromotionStacksAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Promotion Stacks
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsStacksListResponseBody>> ListAllPromotionStacksWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Promotion Stacks in Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksListResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsStacksListResponseBody> ListPromotionStacksInCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Promotion Stacks in Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion stacks from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsStacksListResponseBody>> ListPromotionStacksInCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Promotion Tiers
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersListResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsTiersListResponseBody> ListPromotionTiersAsync(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Promotion Tiers
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsTiersListResponseBody>> ListPromotionTiersWithHttpInfoAsync(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Promotion Tiers from Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersListResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsTiersListResponseBody> ListPromotionTiersFromCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Promotion Tiers from Campaign
        /// </summary>
        /// <remarks>
        /// This method enables you to list promotion tiers from a specified campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsTiersListResponseBody>> ListPromotionTiersFromCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Promotion Stack
        /// </summary>
        /// <remarks>
        /// This methods allows for editing an existing stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksUpdateResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsStacksUpdateResponseBody> UpdatePromotionStackAsync(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Promotion Stack
        /// </summary>
        /// <remarks>
        /// This methods allows for editing an existing stack.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsStacksUpdateResponseBody>> UpdatePromotionStackWithHttpInfoAsync(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method updates a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersUpdateResponseBody</returns>
        System.Threading.Tasks.Task<PromotionsTiersUpdateResponseBody> UpdatePromotionTierAsync(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Promotion Tier
        /// </summary>
        /// <remarks>
        /// This method updates a promotion tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PromotionsTiersUpdateResponseBody>> UpdatePromotionTierWithHttpInfoAsync(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPromotionsApi : IPromotionsApiSync, IPromotionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PromotionsApi : IPromotionsApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PromotionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PromotionsApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PromotionsApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PromotionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PromotionsApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Promotion Tier to Campaign This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersCreateResponseBody</returns>
        public PromotionsTiersCreateResponseBody AddPromotionTierToCampaign(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsTiersCreateResponseBody> localVarResponse = AddPromotionTierToCampaignWithHttpInfo(campaignId, promotionsTiersCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Promotion Tier to Campaign This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsTiersCreateResponseBody> AddPromotionTierToCampaignWithHttpInfo(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->AddPromotionTierToCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = promotionsTiersCreateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.AddPromotionTierToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PromotionsTiersCreateResponseBody>("/v1/promotions/{campaignId}/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPromotionTierToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Promotion Tier to Campaign This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsTiersCreateResponseBody> AddPromotionTierToCampaignAsync(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsTiersCreateResponseBody> localVarResponse = await AddPromotionTierToCampaignWithHttpInfoAsync(campaignId, promotionsTiersCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Promotion Tier to Campaign This method allows you to add a new promotion tier to an existing campaign. The tier hierarchy will be set as the next consequtive integer following the lowest ranking tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="promotionsTiersCreateRequestBody">Specify the promotion tier parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsTiersCreateResponseBody>> AddPromotionTierToCampaignWithHttpInfoAsync(string campaignId, PromotionsTiersCreateRequestBody promotionsTiersCreateRequestBody = default(PromotionsTiersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->AddPromotionTierToCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = promotionsTiersCreateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.AddPromotionTierToCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PromotionsTiersCreateResponseBody>("/v1/promotions/{campaignId}/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPromotionTierToCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Promotion Stack This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksCreateResponseBody</returns>
        public PromotionsStacksCreateResponseBody CreatePromotionStack(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsStacksCreateResponseBody> localVarResponse = CreatePromotionStackWithHttpInfo(campaignId, promotionsStacksCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Promotion Stack This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsStacksCreateResponseBody> CreatePromotionStackWithHttpInfo(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->CreatePromotionStack");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = promotionsStacksCreateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.CreatePromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PromotionsStacksCreateResponseBody>("/v1/promotions/{campaignId}/stacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Promotion Stack This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsStacksCreateResponseBody> CreatePromotionStackAsync(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsStacksCreateResponseBody> localVarResponse = await CreatePromotionStackWithHttpInfoAsync(campaignId, promotionsStacksCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Promotion Stack This method creates one promotion stack. The sequence of promotion tier IDs will determine the promotion stacking order.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="promotionsStacksCreateRequestBody">Specify the order of promotion tiers for the promotion stack. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsStacksCreateResponseBody>> CreatePromotionStackWithHttpInfoAsync(string campaignId, PromotionsStacksCreateRequestBody promotionsStacksCreateRequestBody = default(PromotionsStacksCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->CreatePromotionStack");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = promotionsStacksCreateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.CreatePromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PromotionsStacksCreateResponseBody>("/v1/promotions/{campaignId}/stacks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Promotion Stack This method deletes a promotion stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePromotionStack(string campaignId, string stackId, int operationIndex = 0)
        {
            DeletePromotionStackWithHttpInfo(campaignId, stackId);
        }

        /// <summary>
        /// Delete Promotion Stack This method deletes a promotion stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeletePromotionStackWithHttpInfo(string campaignId, string stackId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->DeletePromotionStack");
            }

            // verify the required parameter 'stackId' is set
            if (stackId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackId' when calling PromotionsApi->DeletePromotionStack");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackId", Voucherify.Client.ClientUtils.ParameterToString(stackId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.DeletePromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/promotions/{campaignId}/stacks/{stackId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Promotion Stack This method deletes a promotion stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePromotionStackAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeletePromotionStackWithHttpInfoAsync(campaignId, stackId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Promotion Stack This method deletes a promotion stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeletePromotionStackWithHttpInfoAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->DeletePromotionStack");
            }

            // verify the required parameter 'stackId' is set
            if (stackId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackId' when calling PromotionsApi->DeletePromotionStack");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackId", Voucherify.Client.ClientUtils.ParameterToString(stackId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.DeletePromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/promotions/{campaignId}/stacks/{stackId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Promotion Tier This method deletes a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePromotionTier(string promotionTierId, int operationIndex = 0)
        {
            DeletePromotionTierWithHttpInfo(promotionTierId);
        }

        /// <summary>
        /// Delete Promotion Tier This method deletes a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeletePromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0)
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->DeletePromotionTier");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.DeletePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/promotions/tiers/{promotionTierId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Promotion Tier This method deletes a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeletePromotionTierWithHttpInfoAsync(promotionTierId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Promotion Tier This method deletes a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeletePromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->DeletePromotionTier");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.DeletePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/promotions/tiers/{promotionTierId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Promotion Tier This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersDisableResponseBody</returns>
        public PromotionsTiersDisableResponseBody DisablePromotionTier(string promotionTierId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsTiersDisableResponseBody> localVarResponse = DisablePromotionTierWithHttpInfo(promotionTierId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Promotion Tier This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersDisableResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsTiersDisableResponseBody> DisablePromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0)
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->DisablePromotionTier");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.DisablePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PromotionsTiersDisableResponseBody>("/v1/promotions/tiers/{promotionTierId}/disable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisablePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Promotion Tier This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersDisableResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsTiersDisableResponseBody> DisablePromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsTiersDisableResponseBody> localVarResponse = await DisablePromotionTierWithHttpInfoAsync(promotionTierId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Promotion Tier This method disables a promotion tier, i.e. makes the active parameter   false.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersDisableResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsTiersDisableResponseBody>> DisablePromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->DisablePromotionTier");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.DisablePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PromotionsTiersDisableResponseBody>("/v1/promotions/tiers/{promotionTierId}/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisablePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Promotion Tier This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersEnableResponseBody</returns>
        public PromotionsTiersEnableResponseBody EnablePromotionTier(string promotionTierId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsTiersEnableResponseBody> localVarResponse = EnablePromotionTierWithHttpInfo(promotionTierId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Promotion Tier This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersEnableResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsTiersEnableResponseBody> EnablePromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0)
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->EnablePromotionTier");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.EnablePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PromotionsTiersEnableResponseBody>("/v1/promotions/tiers/{promotionTierId}/enable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnablePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Promotion Tier This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersEnableResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsTiersEnableResponseBody> EnablePromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsTiersEnableResponseBody> localVarResponse = await EnablePromotionTierWithHttpInfoAsync(promotionTierId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Promotion Tier This method enables a promotion tier, i.e. makes the active parameter   true.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersEnableResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsTiersEnableResponseBody>> EnablePromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->EnablePromotionTier");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.EnablePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PromotionsTiersEnableResponseBody>("/v1/promotions/tiers/{promotionTierId}/enable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnablePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Promotion Stack This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksGetResponseBody</returns>
        public PromotionsStacksGetResponseBody GetPromotionStack(string campaignId, string stackId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsStacksGetResponseBody> localVarResponse = GetPromotionStackWithHttpInfo(campaignId, stackId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Promotion Stack This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsStacksGetResponseBody> GetPromotionStackWithHttpInfo(string campaignId, string stackId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->GetPromotionStack");
            }

            // verify the required parameter 'stackId' is set
            if (stackId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackId' when calling PromotionsApi->GetPromotionStack");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackId", Voucherify.Client.ClientUtils.ParameterToString(stackId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.GetPromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotionsStacksGetResponseBody>("/v1/promotions/{campaignId}/stacks/{stackId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Promotion Stack This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksGetResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsStacksGetResponseBody> GetPromotionStackAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsStacksGetResponseBody> localVarResponse = await GetPromotionStackWithHttpInfoAsync(campaignId, stackId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Promotion Stack This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsStacksGetResponseBody>> GetPromotionStackWithHttpInfoAsync(string campaignId, string stackId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->GetPromotionStack");
            }

            // verify the required parameter 'stackId' is set
            if (stackId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackId' when calling PromotionsApi->GetPromotionStack");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackId", Voucherify.Client.ClientUtils.ParameterToString(stackId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.GetPromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotionsStacksGetResponseBody>("/v1/promotions/{campaignId}/stacks/{stackId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Promotion Tier This method enables you to retrieve a specific promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersGetResponseBody</returns>
        public PromotionsTiersGetResponseBody GetPromotionTier(string promotionTierId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsTiersGetResponseBody> localVarResponse = GetPromotionTierWithHttpInfo(promotionTierId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Promotion Tier This method enables you to retrieve a specific promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsTiersGetResponseBody> GetPromotionTierWithHttpInfo(string promotionTierId, int operationIndex = 0)
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->GetPromotionTier");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.GetPromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotionsTiersGetResponseBody>("/v1/promotions/tiers/{promotionTierId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Promotion Tier This method enables you to retrieve a specific promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersGetResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsTiersGetResponseBody> GetPromotionTierAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsTiersGetResponseBody> localVarResponse = await GetPromotionTierWithHttpInfoAsync(promotionTierId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Promotion Tier This method enables you to retrieve a specific promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsTiersGetResponseBody>> GetPromotionTierWithHttpInfoAsync(string promotionTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->GetPromotionTier");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.GetPromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotionsTiersGetResponseBody>("/v1/promotions/tiers/{promotionTierId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Stacks This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksListResponseBody</returns>
        public PromotionsStacksListResponseBody ListAllPromotionStacks(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody> localVarResponse = ListAllPromotionStacksWithHttpInfo(limit, page, order, createdAt, updatedAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Stacks This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksListResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody> ListAllPromotionStacksWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (createdAt != null)
            {
                if (createdAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[before]", createdAt.Before));
                }
                if (createdAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[after]", createdAt.After));
                }
            }
            if (updatedAt != null)
            {
                if (updatedAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updatedAt[before]", updatedAt.Before));
                }
                if (updatedAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updatedAt[after]", updatedAt.After));
                }
            }

            localVarRequestOptions.Operation = "PromotionsApi.ListAllPromotionStacks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotionsStacksListResponseBody>("/v1/promotions/stacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllPromotionStacks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Stacks This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksListResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsStacksListResponseBody> ListAllPromotionStacksAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody> localVarResponse = await ListAllPromotionStacksWithHttpInfoAsync(limit, page, order, createdAt, updatedAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Stacks This method enables you to list promotion stacks irrespective of the campaign they are associated with.  You can use filters in the query parameters to specify the stacks to be returned in the response. # Advanced filters for fetching promotion stacks  
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody>> ListAllPromotionStacksWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterOrderListAllPromotionStacks? order = default(ParameterOrderListAllPromotionStacks?), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (createdAt != null)
            {
                if (createdAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[before]", createdAt.Before));
                }
                if (createdAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[after]", createdAt.After));
                }
            }
            if (updatedAt != null)
            {
                if (updatedAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updatedAt[before]", updatedAt.Before));
                }
                if (updatedAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updatedAt[after]", updatedAt.After));
                }
            }

            localVarRequestOptions.Operation = "PromotionsApi.ListAllPromotionStacks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotionsStacksListResponseBody>("/v1/promotions/stacks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllPromotionStacks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Stacks in Campaign This method enables you to list promotion stacks from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksListResponseBody</returns>
        public PromotionsStacksListResponseBody ListPromotionStacksInCampaign(string campaignId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody> localVarResponse = ListPromotionStacksInCampaignWithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Stacks in Campaign This method enables you to list promotion stacks from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksListResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody> ListPromotionStacksInCampaignWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->ListPromotionStacksInCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.ListPromotionStacksInCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotionsStacksListResponseBody>("/v1/promotions/{campaignId}/stacks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionStacksInCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Stacks in Campaign This method enables you to list promotion stacks from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksListResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsStacksListResponseBody> ListPromotionStacksInCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody> localVarResponse = await ListPromotionStacksInCampaignWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Stacks in Campaign This method enables you to list promotion stacks from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsStacksListResponseBody>> ListPromotionStacksInCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->ListPromotionStacksInCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.ListPromotionStacksInCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotionsStacksListResponseBody>("/v1/promotions/{campaignId}/stacks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionStacksInCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Tiers This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersListResponseBody</returns>
        public PromotionsTiersListResponseBody ListPromotionTiers(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody> localVarResponse = ListPromotionTiersWithHttpInfo(isAvailable, limit, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Tiers This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody> ListPromotionTiersWithHttpInfo(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "is_available", isAvailable));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "PromotionsApi.ListPromotionTiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotionsTiersListResponseBody>("/v1/promotions/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionTiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Tiers This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersListResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsTiersListResponseBody> ListPromotionTiersAsync(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody> localVarResponse = await ListPromotionTiersWithHttpInfoAsync(isAvailable, limit, page, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Tiers This method enables you to list promotion tiers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="isAvailable">This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions. (optional)</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody>> ListPromotionTiersWithHttpInfoAsync(bool? isAvailable = default(bool?), int? limit = default(int?), int? page = default(int?), ParameterOrderListPromotionTiers? order = default(ParameterOrderListPromotionTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (isAvailable != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "is_available", isAvailable));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "PromotionsApi.ListPromotionTiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotionsTiersListResponseBody>("/v1/promotions/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionTiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Tiers from Campaign This method enables you to list promotion tiers from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersListResponseBody</returns>
        public PromotionsTiersListResponseBody ListPromotionTiersFromCampaign(string campaignId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody> localVarResponse = ListPromotionTiersFromCampaignWithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Tiers from Campaign This method enables you to list promotion tiers from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody> ListPromotionTiersFromCampaignWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->ListPromotionTiersFromCampaign");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.ListPromotionTiersFromCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PromotionsTiersListResponseBody>("/v1/promotions/{campaignId}/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionTiersFromCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Promotion Tiers from Campaign This method enables you to list promotion tiers from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersListResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsTiersListResponseBody> ListPromotionTiersFromCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody> localVarResponse = await ListPromotionTiersFromCampaignWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Promotion Tiers from Campaign This method enables you to list promotion tiers from a specified campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsTiersListResponseBody>> ListPromotionTiersFromCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->ListPromotionTiersFromCampaign");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "PromotionsApi.ListPromotionTiersFromCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PromotionsTiersListResponseBody>("/v1/promotions/{campaignId}/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPromotionTiersFromCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Promotion Stack This methods allows for editing an existing stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsStacksUpdateResponseBody</returns>
        public PromotionsStacksUpdateResponseBody UpdatePromotionStack(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsStacksUpdateResponseBody> localVarResponse = UpdatePromotionStackWithHttpInfo(campaignId, stackId, promotionsStacksUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Promotion Stack This methods allows for editing an existing stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsStacksUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsStacksUpdateResponseBody> UpdatePromotionStackWithHttpInfo(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->UpdatePromotionStack");
            }

            // verify the required parameter 'stackId' is set
            if (stackId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackId' when calling PromotionsApi->UpdatePromotionStack");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackId", Voucherify.Client.ClientUtils.ParameterToString(stackId)); // path parameter
            localVarRequestOptions.Data = promotionsStacksUpdateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.UpdatePromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PromotionsStacksUpdateResponseBody>("/v1/promotions/{campaignId}/stacks/{stackId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Promotion Stack This methods allows for editing an existing stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsStacksUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsStacksUpdateResponseBody> UpdatePromotionStackAsync(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsStacksUpdateResponseBody> localVarResponse = await UpdatePromotionStackWithHttpInfoAsync(campaignId, stackId, promotionsStacksUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Promotion Stack This methods allows for editing an existing stack.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">ID of the promotion campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty Campaign. </param>
        /// <param name="stackId">Promotion stack ID.</param>
        /// <param name="promotionsStacksUpdateRequestBody">Specify the promotion stack parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsStacksUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsStacksUpdateResponseBody>> UpdatePromotionStackWithHttpInfoAsync(string campaignId, string stackId, PromotionsStacksUpdateRequestBody promotionsStacksUpdateRequestBody = default(PromotionsStacksUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling PromotionsApi->UpdatePromotionStack");
            }

            // verify the required parameter 'stackId' is set
            if (stackId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'stackId' when calling PromotionsApi->UpdatePromotionStack");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stackId", Voucherify.Client.ClientUtils.ParameterToString(stackId)); // path parameter
            localVarRequestOptions.Data = promotionsStacksUpdateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.UpdatePromotionStack";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PromotionsStacksUpdateResponseBody>("/v1/promotions/{campaignId}/stacks/{stackId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePromotionStack", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Promotion Tier This method updates a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PromotionsTiersUpdateResponseBody</returns>
        public PromotionsTiersUpdateResponseBody UpdatePromotionTier(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<PromotionsTiersUpdateResponseBody> localVarResponse = UpdatePromotionTierWithHttpInfo(promotionTierId, promotionsTiersUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Promotion Tier This method updates a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PromotionsTiersUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<PromotionsTiersUpdateResponseBody> UpdatePromotionTierWithHttpInfo(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->UpdatePromotionTier");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter
            localVarRequestOptions.Data = promotionsTiersUpdateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.UpdatePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PromotionsTiersUpdateResponseBody>("/v1/promotions/tiers/{promotionTierId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Promotion Tier This method updates a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PromotionsTiersUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<PromotionsTiersUpdateResponseBody> UpdatePromotionTierAsync(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<PromotionsTiersUpdateResponseBody> localVarResponse = await UpdatePromotionTierWithHttpInfoAsync(promotionTierId, promotionsTiersUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Promotion Tier This method updates a promotion tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="promotionTierId">Unique promotion tier ID.</param>
        /// <param name="promotionsTiersUpdateRequestBody">Specify the promotion tier parameters that you would like to update. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PromotionsTiersUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<PromotionsTiersUpdateResponseBody>> UpdatePromotionTierWithHttpInfoAsync(string promotionTierId, PromotionsTiersUpdateRequestBody promotionsTiersUpdateRequestBody = default(PromotionsTiersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'promotionTierId' is set
            if (promotionTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'promotionTierId' when calling PromotionsApi->UpdatePromotionTier");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("promotionTierId", Voucherify.Client.ClientUtils.ParameterToString(promotionTierId)); // path parameter
            localVarRequestOptions.Data = promotionsTiersUpdateRequestBody;

            localVarRequestOptions.Operation = "PromotionsApi.UpdatePromotionTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PromotionsTiersUpdateResponseBody>("/v1/promotions/tiers/{promotionTierId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePromotionTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
