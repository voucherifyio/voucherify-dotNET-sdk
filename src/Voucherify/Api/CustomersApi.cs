/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersCreateResponseBody</returns>
        CustomersCreateResponseBody CreateCustomer(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersCreateResponseBody</returns>
        ApiResponse<CustomersCreateResponseBody> CreateCustomerWithHttpInfo(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Delete Customer Permanently
        /// </summary>
        /// <remarks>
        /// The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersPermanentDeletionCreateResponseBody</returns>
        CustomersPermanentDeletionCreateResponseBody CustomerPermanentlyDeletion(string customerId, int operationIndex = 0);

        /// <summary>
        /// Delete Customer Permanently
        /// </summary>
        /// <remarks>
        /// The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersPermanentDeletionCreateResponseBody</returns>
        ApiResponse<CustomersPermanentDeletionCreateResponseBody> CustomerPermanentlyDeletionWithHttpInfo(string customerId, int operationIndex = 0);
        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// This method deletes a customer.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCustomer(string customerId, int operationIndex = 0);

        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// This method deletes a customer.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomerWithHttpInfo(string customerId, int operationIndex = 0);
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Retrieve customer details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersGetResponseBody</returns>
        CustomersGetResponseBody GetCustomer(string customerId, int operationIndex = 0);

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Retrieve customer details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersGetResponseBody</returns>
        ApiResponse<CustomersGetResponseBody> GetCustomerWithHttpInfo(string customerId, int operationIndex = 0);
        /// <summary>
        /// Import and Update Customers using CSV
        /// </summary>
        /// <remarks>
        /// This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersImportCsvCreateResponseBody</returns>
        CustomersImportCsvCreateResponseBody ImportCustomersUsingCsv(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Import and Update Customers using CSV
        /// </summary>
        /// <remarks>
        /// This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersImportCsvCreateResponseBody</returns>
        ApiResponse<CustomersImportCsvCreateResponseBody> ImportCustomersUsingCsvWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// List Customer Activity
        /// </summary>
        /// <remarks>
        /// Retrieve customer activities.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersActivityListResponseBody</returns>
        CustomersActivityListResponseBody ListCustomerActivity(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0);

        /// <summary>
        /// List Customer Activity
        /// </summary>
        /// <remarks>
        /// Retrieve customer activities.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersActivityListResponseBody</returns>
        ApiResponse<CustomersActivityListResponseBody> ListCustomerActivityWithHttpInfo(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0);
        /// <summary>
        /// List Customer&#39;s Redeemables
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersRedeemablesListResponseBody</returns>
        CustomersRedeemablesListResponseBody ListCustomerRedeemables(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0);

        /// <summary>
        /// List Customer&#39;s Redeemables
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersRedeemablesListResponseBody</returns>
        ApiResponse<CustomersRedeemablesListResponseBody> ListCustomerRedeemablesWithHttpInfo(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0);
        /// <summary>
        /// List Customer&#39;s Segments
        /// </summary>
        /// <remarks>
        /// Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersSegmentsListResponseBody</returns>
        CustomersSegmentsListResponseBody ListCustomerSegments(string customerId, int operationIndex = 0);

        /// <summary>
        /// List Customer&#39;s Segments
        /// </summary>
        /// <remarks>
        /// Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersSegmentsListResponseBody</returns>
        ApiResponse<CustomersSegmentsListResponseBody> ListCustomerSegmentsWithHttpInfo(string customerId, int operationIndex = 0);
        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Returns a list of customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersListResponseBody</returns>
        CustomersListResponseBody ListCustomers(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0);

        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Returns a list of customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersListResponseBody</returns>
        ApiResponse<CustomersListResponseBody> ListCustomersWithHttpInfo(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0);
        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersUpdateResponseBody</returns>
        CustomersUpdateResponseBody UpdateCustomer(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersUpdateResponseBody</returns>
        ApiResponse<CustomersUpdateResponseBody> UpdateCustomerWithHttpInfo(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Customers in Bulk
        /// </summary>
        /// <remarks>
        /// Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersUpdateInBulkResponseBody</returns>
        CustomersUpdateInBulkResponseBody UpdateCustomersInBulk(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0);

        /// <summary>
        /// Update Customers in Bulk
        /// </summary>
        /// <remarks>
        /// Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersUpdateInBulkResponseBody</returns>
        ApiResponse<CustomersUpdateInBulkResponseBody> UpdateCustomersInBulkWithHttpInfo(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0);
        /// <summary>
        /// Update Customers&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersMetadataUpdateInBulkResponseBody</returns>
        CustomersMetadataUpdateInBulkResponseBody UpdateCustomersMetadataInBulk(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Customers&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersMetadataUpdateInBulkResponseBody</returns>
        ApiResponse<CustomersMetadataUpdateInBulkResponseBody> UpdateCustomersMetadataInBulkWithHttpInfo(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersCreateResponseBody</returns>
        System.Threading.Tasks.Task<CustomersCreateResponseBody> CreateCustomerAsync(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Customer
        /// </summary>
        /// <remarks>
        /// Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersCreateResponseBody>> CreateCustomerWithHttpInfoAsync(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Customer Permanently
        /// </summary>
        /// <remarks>
        /// The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersPermanentDeletionCreateResponseBody</returns>
        System.Threading.Tasks.Task<CustomersPermanentDeletionCreateResponseBody> CustomerPermanentlyDeletionAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Customer Permanently
        /// </summary>
        /// <remarks>
        /// The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersPermanentDeletionCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersPermanentDeletionCreateResponseBody>> CustomerPermanentlyDeletionWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// This method deletes a customer.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomerAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Customer
        /// </summary>
        /// <remarks>
        /// This method deletes a customer.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomerWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Retrieve customer details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersGetResponseBody</returns>
        System.Threading.Tasks.Task<CustomersGetResponseBody> GetCustomerAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer
        /// </summary>
        /// <remarks>
        /// Retrieve customer details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersGetResponseBody>> GetCustomerWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Import and Update Customers using CSV
        /// </summary>
        /// <remarks>
        /// This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersImportCsvCreateResponseBody</returns>
        System.Threading.Tasks.Task<CustomersImportCsvCreateResponseBody> ImportCustomersUsingCsvAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Import and Update Customers using CSV
        /// </summary>
        /// <remarks>
        /// This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersImportCsvCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersImportCsvCreateResponseBody>> ImportCustomersUsingCsvWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Customer Activity
        /// </summary>
        /// <remarks>
        /// Retrieve customer activities.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersActivityListResponseBody</returns>
        System.Threading.Tasks.Task<CustomersActivityListResponseBody> ListCustomerActivityAsync(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Customer Activity
        /// </summary>
        /// <remarks>
        /// Retrieve customer activities.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersActivityListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersActivityListResponseBody>> ListCustomerActivityWithHttpInfoAsync(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Customer&#39;s Redeemables
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersRedeemablesListResponseBody</returns>
        System.Threading.Tasks.Task<CustomersRedeemablesListResponseBody> ListCustomerRedeemablesAsync(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Customer&#39;s Redeemables
        /// </summary>
        /// <remarks>
        /// Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersRedeemablesListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersRedeemablesListResponseBody>> ListCustomerRedeemablesWithHttpInfoAsync(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Customer&#39;s Segments
        /// </summary>
        /// <remarks>
        /// Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersSegmentsListResponseBody</returns>
        System.Threading.Tasks.Task<CustomersSegmentsListResponseBody> ListCustomerSegmentsAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Customer&#39;s Segments
        /// </summary>
        /// <remarks>
        /// Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersSegmentsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersSegmentsListResponseBody>> ListCustomerSegmentsWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Returns a list of customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersListResponseBody</returns>
        System.Threading.Tasks.Task<CustomersListResponseBody> ListCustomersAsync(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Customers
        /// </summary>
        /// <remarks>
        /// Returns a list of customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersListResponseBody>> ListCustomersWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersUpdateResponseBody</returns>
        System.Threading.Tasks.Task<CustomersUpdateResponseBody> UpdateCustomerAsync(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Customer
        /// </summary>
        /// <remarks>
        /// Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersUpdateResponseBody>> UpdateCustomerWithHttpInfoAsync(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Customers in Bulk
        /// </summary>
        /// <remarks>
        /// Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersUpdateInBulkResponseBody</returns>
        System.Threading.Tasks.Task<CustomersUpdateInBulkResponseBody> UpdateCustomersInBulkAsync(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Customers in Bulk
        /// </summary>
        /// <remarks>
        /// Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersUpdateInBulkResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersUpdateInBulkResponseBody>> UpdateCustomersInBulkWithHttpInfoAsync(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Customers&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersMetadataUpdateInBulkResponseBody</returns>
        System.Threading.Tasks.Task<CustomersMetadataUpdateInBulkResponseBody> UpdateCustomersMetadataInBulkAsync(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Customers&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersMetadataUpdateInBulkResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomersMetadataUpdateInBulkResponseBody>> UpdateCustomersMetadataInBulkWithHttpInfoAsync(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomersApi : ICustomersApiSync, ICustomersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomersApi : ICustomersApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomersApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomersApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomersApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Customer Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersCreateResponseBody</returns>
        public CustomersCreateResponseBody CreateCustomer(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersCreateResponseBody> localVarResponse = CreateCustomerWithHttpInfo(customersCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Customer Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersCreateResponseBody> CreateCustomerWithHttpInfo(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customersCreateRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomersCreateResponseBody>("/v1/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Customer Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersCreateResponseBody> CreateCustomerAsync(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersCreateResponseBody> localVarResponse = await CreateCustomerWithHttpInfoAsync(customersCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Customer Creates a customer object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the customer database, Voucherify will return a related customer object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersCreateRequestBody">Create a customer with specified parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersCreateResponseBody>> CreateCustomerWithHttpInfoAsync(CustomersCreateRequestBody customersCreateRequestBody = default(CustomersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customersCreateRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.CreateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomersCreateResponseBody>("/v1/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer Permanently The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersPermanentDeletionCreateResponseBody</returns>
        public CustomersPermanentDeletionCreateResponseBody CustomerPermanentlyDeletion(string customerId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersPermanentDeletionCreateResponseBody> localVarResponse = CustomerPermanentlyDeletionWithHttpInfo(customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Customer Permanently The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersPermanentDeletionCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersPermanentDeletionCreateResponseBody> CustomerPermanentlyDeletionWithHttpInfo(string customerId, int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->CustomerPermanentlyDeletion");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.CustomerPermanentlyDeletion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomersPermanentDeletionCreateResponseBody>("/v1/customers/{customerId}/permanent-deletion", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerPermanentlyDeletion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer Permanently The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersPermanentDeletionCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersPermanentDeletionCreateResponseBody> CustomerPermanentlyDeletionAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersPermanentDeletionCreateResponseBody> localVarResponse = await CustomerPermanentlyDeletionWithHttpInfoAsync(customerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Customer Permanently The organization user can remove consumer data permanently from the Voucherify system by using this API method. It deletes all customer data and connected resources. It makes the customer profile forgotten by Voucherify.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersPermanentDeletionCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersPermanentDeletionCreateResponseBody>> CustomerPermanentlyDeletionWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->CustomerPermanentlyDeletion");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.CustomerPermanentlyDeletion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomersPermanentDeletionCreateResponseBody>("/v1/customers/{customerId}/permanent-deletion", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CustomerPermanentlyDeletion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer This method deletes a customer.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCustomer(string customerId, int operationIndex = 0)
        {
            DeleteCustomerWithHttpInfo(customerId);
        }

        /// <summary>
        /// Delete Customer This method deletes a customer.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteCustomerWithHttpInfo(string customerId, int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DeleteCustomer");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DeleteCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Customer This method deletes a customer.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomerAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteCustomerWithHttpInfoAsync(customerId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Customer This method deletes a customer.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteCustomerWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->DeleteCustomer");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.DeleteCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Retrieve customer details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersGetResponseBody</returns>
        public CustomersGetResponseBody GetCustomer(string customerId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersGetResponseBody> localVarResponse = GetCustomerWithHttpInfo(customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Retrieve customer details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersGetResponseBody> GetCustomerWithHttpInfo(string customerId, int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomer");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.GetCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersGetResponseBody>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Retrieve customer details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersGetResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersGetResponseBody> GetCustomerAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersGetResponseBody> localVarResponse = await GetCustomerWithHttpInfoAsync(customerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Retrieve customer details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersGetResponseBody>> GetCustomerWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->GetCustomer");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.GetCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersGetResponseBody>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import and Update Customers using CSV This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersImportCsvCreateResponseBody</returns>
        public CustomersImportCsvCreateResponseBody ImportCustomersUsingCsv(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersImportCsvCreateResponseBody> localVarResponse = ImportCustomersUsingCsvWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import and Update Customers using CSV This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersImportCsvCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersImportCsvCreateResponseBody> ImportCustomersUsingCsvWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CustomersApi.ImportCustomersUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomersImportCsvCreateResponseBody>("/v1/customers/importCSV", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCustomersUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import and Update Customers using CSV This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersImportCsvCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersImportCsvCreateResponseBody> ImportCustomersUsingCsvAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersImportCsvCreateResponseBody> localVarResponse = await ImportCustomersUsingCsvWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import and Update Customers using CSV This API method lets you import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.   # Request Example # CSV File Format The CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.  ðŸ“˜ Standard customer fields mapping  **No spaces allowed in field names**    Id, Name, Email, Phone, Birthdate, Source_id, Address_line_1, Address_line_2, Address_Postal_Code, Address_City, Address_State, Address_Country, Description, Metadata_name_1, Metadata_name_2 # Update Customers using CSV If you would like to update customers data, you can do it using the CSV file with new data. However, remember to include a source_id in your CSV file to manage the update successfully. This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersImportCsvCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersImportCsvCreateResponseBody>> ImportCustomersUsingCsvWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "CustomersApi.ImportCustomersUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomersImportCsvCreateResponseBody>("/v1/customers/importCSV", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportCustomersUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customer Activity Retrieve customer activities.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersActivityListResponseBody</returns>
        public CustomersActivityListResponseBody ListCustomerActivity(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersActivityListResponseBody> localVarResponse = ListCustomerActivityWithHttpInfo(customerId, limit, order, startingAfterId, startDate, endDate, campaignId, campaignType, category, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer Activity Retrieve customer activities.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersActivityListResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersActivityListResponseBody> ListCustomerActivityWithHttpInfo(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->ListCustomerActivity");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_id", campaignId));
            }
            if (campaignType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_type", campaignType));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "CustomersApi.ListCustomerActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersActivityListResponseBody>("/v1/customers/{customerId}/activity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomerActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customer Activity Retrieve customer activities.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersActivityListResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersActivityListResponseBody> ListCustomerActivityAsync(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersActivityListResponseBody> localVarResponse = await ListCustomerActivityWithHttpInfoAsync(customerId, limit, order, startingAfterId, startDate, endDate, campaignId, campaignType, category, type, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer Activity Retrieve customer activities.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source ID of the customer who performed the activities.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created.  (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must begin on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="campaignId">Requests only events related to specific campaign identified by its ID. (optional)</param>
        /// <param name="campaignType">Filters related customers activity for the selected campaign types. Allowed values:  DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM. (optional)</param>
        /// <param name="category">Filters activities for actions or effects. Allowed values:  ACTION, EFFECT. (optional)</param>
        /// <param name="type">Event name of the customer event. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersActivityListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersActivityListResponseBody>> ListCustomerActivityWithHttpInfoAsync(string customerId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), string campaignId = default(string), ParameterCampaignType? campaignType = default(ParameterCampaignType?), ParameterActivityCategory? category = default(ParameterActivityCategory?), ParameterCustomerEvent? type = default(ParameterCustomerEvent?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->ListCustomerActivity");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }
            if (campaignId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_id", campaignId));
            }
            if (campaignType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "campaign_type", campaignType));
            }
            if (category != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "category", category));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            localVarRequestOptions.Operation = "CustomersApi.ListCustomerActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersActivityListResponseBody>("/v1/customers/{customerId}/activity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomerActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customer&#39;s Redeemables Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersRedeemablesListResponseBody</returns>
        public CustomersRedeemablesListResponseBody ListCustomerRedeemables(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersRedeemablesListResponseBody> localVarResponse = ListCustomerRedeemablesWithHttpInfo(customerId, limit, order, startingAfterId, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer&#39;s Redeemables Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersRedeemablesListResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersRedeemablesListResponseBody> ListCustomerRedeemablesWithHttpInfo(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->ListCustomerRedeemables");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[created_at]", filters.CreatedAt));
                }
                if (filters.RedeemableId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[redeemable_id]", filters.RedeemableId));
                }
                if (filters.RedeemableObject != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[redeemable_object]", filters.RedeemableObject));
                }
                if (filters.HolderRole != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[holder_role]", filters.HolderRole));
                }
                if (filters.CampaignId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaign_id]", filters.CampaignId));
                }
                if (filters.CampaignType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaign_type]", filters.CampaignType));
                }
                if (filters.VoucherType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucher_type]", filters.VoucherType));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "CustomersApi.ListCustomerRedeemables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersRedeemablesListResponseBody>("/v1/customers/{customerId}/redeemables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomerRedeemables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customer&#39;s Redeemables Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersRedeemablesListResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersRedeemablesListResponseBody> ListCustomerRedeemablesAsync(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersRedeemablesListResponseBody> localVarResponse = await ListCustomerRedeemablesWithHttpInfoAsync(customerId, limit, order, startingAfterId, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer&#39;s Redeemables Retrieves all the redeemables that have been assigned to the customer. To use this endpoint, you must have the following permissions: - Read Customers (customers.details.read)
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing customer redeemables. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersRedeemablesListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersRedeemablesListResponseBody>> ListCustomerRedeemablesWithHttpInfoAsync(string customerId, int? limit = default(int?), ParameterOrderListRedeemables? order = default(ParameterOrderListRedeemables?), string startingAfterId = default(string), ParameterFiltersListCustomerRedeemables filters = default(ParameterFiltersListCustomerRedeemables), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->ListCustomerRedeemables");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[created_at]", filters.CreatedAt));
                }
                if (filters.RedeemableId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[redeemable_id]", filters.RedeemableId));
                }
                if (filters.RedeemableObject != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[redeemable_object]", filters.RedeemableObject));
                }
                if (filters.HolderRole != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[holder_role]", filters.HolderRole));
                }
                if (filters.CampaignId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaign_id]", filters.CampaignId));
                }
                if (filters.CampaignType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[campaign_type]", filters.CampaignType));
                }
                if (filters.VoucherType != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucher_type]", filters.VoucherType));
                }
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
            }

            localVarRequestOptions.Operation = "CustomersApi.ListCustomerRedeemables";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersRedeemablesListResponseBody>("/v1/customers/{customerId}/redeemables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomerRedeemables", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customer&#39;s Segments Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersSegmentsListResponseBody</returns>
        public CustomersSegmentsListResponseBody ListCustomerSegments(string customerId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersSegmentsListResponseBody> localVarResponse = ListCustomerSegmentsWithHttpInfo(customerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer&#39;s Segments Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersSegmentsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersSegmentsListResponseBody> ListCustomerSegmentsWithHttpInfo(string customerId, int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->ListCustomerSegments");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.ListCustomerSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersSegmentsListResponseBody>("/v1/customers/{customerId}/segments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomerSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customer&#39;s Segments Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersSegmentsListResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersSegmentsListResponseBody> ListCustomerSegmentsAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersSegmentsListResponseBody> localVarResponse = await ListCustomerSegmentsWithHttpInfoAsync(customerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer&#39;s Segments Returns the list of segments IDs to which the customer belongs to.   If you pass a customerId which is not stored and recognized by Voucherify as an existing customer in the system, the response will generate a list of segments that the customer would potentialy qualify for if they were to become a customer tracked in the system.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">Unique identifier of a customer represented by an internal customer ID or customer source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersSegmentsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersSegmentsListResponseBody>> ListCustomerSegmentsWithHttpInfoAsync(string customerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->ListCustomerSegments");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter

            localVarRequestOptions.Operation = "CustomersApi.ListCustomerSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersSegmentsListResponseBody>("/v1/customers/{customerId}/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomerSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customers Returns a list of customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersListResponseBody</returns>
        public CustomersListResponseBody ListCustomers(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersListResponseBody> localVarResponse = ListCustomersWithHttpInfo(limit, page, email, city, name, segmentId, createdAtBefore, createdAtAfter, updatedAtBefore, updatedAtAfter, order, startingAfter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customers Returns a list of customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersListResponseBody> ListCustomersWithHttpInfo(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (city != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "city", city));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (segmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "segment_id", segmentId));
            }
            if (createdAtBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[before]", createdAtBefore));
            }
            if (createdAtAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[after]", createdAtAfter));
            }
            if (updatedAtBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updated_at[before]", updatedAtBefore));
            }
            if (updatedAtAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updated_at[after]", updatedAtAfter));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }

            localVarRequestOptions.Operation = "CustomersApi.ListCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomersListResponseBody>("/v1/customers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Customers Returns a list of customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersListResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersListResponseBody> ListCustomersAsync(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersListResponseBody> localVarResponse = await ListCustomersWithHttpInfoAsync(limit, page, email, city, name, segmentId, createdAtBefore, createdAtAfter, updatedAtBefore, updatedAtAfter, order, startingAfter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Customers Returns a list of customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1, the highest value is 99. (optional)</param>
        /// <param name="email">Limit the customers to the ones that have this specific email address. (optional)</param>
        /// <param name="city">Limit the customers to the ones that are located in the specified city. (optional)</param>
        /// <param name="name">Filter customers by the name property. (optional)</param>
        /// <param name="segmentId">Filter customers by the segment id. (optional)</param>
        /// <param name="createdAtBefore">Filter customers by date customer was created. (optional)</param>
        /// <param name="createdAtAfter">Filter customers by date customer was created. (optional)</param>
        /// <param name="updatedAtBefore">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="updatedAtAfter">Filter customers by date customer was updated last time. (optional)</param>
        /// <param name="order">This is a property that controls the sorting direction of the results. Sort the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfter">A cursor for pagination. This is a date-time value that defines your place in the list based on created_at property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after 2020-05-24T13:43:09.024Z in order to fetch the next page of the list.   (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersListResponseBody>> ListCustomersWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), string email = default(string), string city = default(string), string name = default(string), string segmentId = default(string), DateTimeOffset? createdAtBefore = default(DateTimeOffset?), DateTimeOffset? createdAtAfter = default(DateTimeOffset?), DateTimeOffset? updatedAtBefore = default(DateTimeOffset?), DateTimeOffset? updatedAtAfter = default(DateTimeOffset?), ParameterOrderListCustomers? order = default(ParameterOrderListCustomers?), DateTimeOffset? startingAfter = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (city != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "city", city));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (segmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "segment_id", segmentId));
            }
            if (createdAtBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[before]", createdAtBefore));
            }
            if (createdAtAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[after]", createdAtAfter));
            }
            if (updatedAtBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updated_at[before]", updatedAtBefore));
            }
            if (updatedAtAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updated_at[after]", updatedAtAfter));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after", startingAfter));
            }

            localVarRequestOptions.Operation = "CustomersApi.ListCustomers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomersListResponseBody>("/v1/customers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCustomers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customer Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersUpdateResponseBody</returns>
        public CustomersUpdateResponseBody UpdateCustomer(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersUpdateResponseBody> localVarResponse = UpdateCustomerWithHttpInfo(customerId, customersUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customer Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersUpdateResponseBody> UpdateCustomerWithHttpInfo(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomer");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.Data = customersUpdateRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CustomersUpdateResponseBody>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customer Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersUpdateResponseBody> UpdateCustomerAsync(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersUpdateResponseBody> localVarResponse = await UpdateCustomerWithHttpInfoAsync(customerId, customersUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customer Updates the specified customer by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId">A Voucherify customers id or source_id.</param>
        /// <param name="customersUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersUpdateResponseBody>> UpdateCustomerWithHttpInfoAsync(string customerId, CustomersUpdateRequestBody customersUpdateRequestBody = default(CustomersUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'customerId' when calling CustomersApi->UpdateCustomer");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("customerId", Voucherify.Client.ClientUtils.ParameterToString(customerId)); // path parameter
            localVarRequestOptions.Data = customersUpdateRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CustomersUpdateResponseBody>("/v1/customers/{customerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customers in Bulk Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersUpdateInBulkResponseBody</returns>
        public CustomersUpdateInBulkResponseBody UpdateCustomersInBulk(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersUpdateInBulkResponseBody> localVarResponse = UpdateCustomersInBulkWithHttpInfo(customersUpdateInBulkRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customers in Bulk Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersUpdateInBulkResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersUpdateInBulkResponseBody> UpdateCustomersInBulkWithHttpInfo(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customersUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomersInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomersUpdateInBulkResponseBody>("/v1/customers/bulk/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomersInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customers in Bulk Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersUpdateInBulkResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersUpdateInBulkResponseBody> UpdateCustomersInBulkAsync(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersUpdateInBulkResponseBody> localVarResponse = await UpdateCustomersInBulkWithHttpInfoAsync(customersUpdateInBulkRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customers in Bulk Updates customers in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a customer object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersUpdateInBulkRequestBody">List the customer fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersUpdateInBulkResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersUpdateInBulkResponseBody>> UpdateCustomersInBulkWithHttpInfoAsync(List<CustomersUpdateInBulkRequestBody> customersUpdateInBulkRequestBody = default(List<CustomersUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customersUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomersInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomersUpdateInBulkResponseBody>("/v1/customers/bulk/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomersInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customers&#39; Metadata in Bulk Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomersMetadataUpdateInBulkResponseBody</returns>
        public CustomersMetadataUpdateInBulkResponseBody UpdateCustomersMetadataInBulk(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CustomersMetadataUpdateInBulkResponseBody> localVarResponse = UpdateCustomersMetadataInBulkWithHttpInfo(customersMetadataUpdateInBulkRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customers&#39; Metadata in Bulk Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomersMetadataUpdateInBulkResponseBody</returns>
        public Voucherify.Client.ApiResponse<CustomersMetadataUpdateInBulkResponseBody> UpdateCustomersMetadataInBulkWithHttpInfo(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customersMetadataUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomersMetadataInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomersMetadataUpdateInBulkResponseBody>("/v1/customers/metadata/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomersMetadataInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Customers&#39; Metadata in Bulk Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomersMetadataUpdateInBulkResponseBody</returns>
        public async System.Threading.Tasks.Task<CustomersMetadataUpdateInBulkResponseBody> UpdateCustomersMetadataInBulkAsync(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CustomersMetadataUpdateInBulkResponseBody> localVarResponse = await UpdateCustomersMetadataInBulkWithHttpInfoAsync(customersMetadataUpdateInBulkRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Customers&#39; Metadata in Bulk Updates metadata parameters for a list of customers. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customersMetadataUpdateInBulkRequestBody">List the source_ids of the customers you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomersMetadataUpdateInBulkResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CustomersMetadataUpdateInBulkResponseBody>> UpdateCustomersMetadataInBulkWithHttpInfoAsync(CustomersMetadataUpdateInBulkRequestBody customersMetadataUpdateInBulkRequestBody = default(CustomersMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customersMetadataUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "CustomersApi.UpdateCustomersMetadataInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomersMetadataUpdateInBulkResponseBody>("/v1/customers/metadata/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomersMetadataInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
