/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Product
        /// </summary>
        /// <remarks>
        /// Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsCreateResponseBody</returns>
        ProductsCreateResponseBody CreateProduct(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Product
        /// </summary>
        /// <remarks>
        /// Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsCreateResponseBody</returns>
        ApiResponse<ProductsCreateResponseBody> CreateProductWithHttpInfo(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create SKU
        /// </summary>
        /// <remarks>
        /// This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsSkusCreateResponseBody</returns>
        ProductsSkusCreateResponseBody CreateSku(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create SKU
        /// </summary>
        /// <remarks>
        /// This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsSkusCreateResponseBody</returns>
        ApiResponse<ProductsSkusCreateResponseBody> CreateSkuWithHttpInfo(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Delete Product
        /// </summary>
        /// <remarks>
        /// Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteProduct(string productId, bool? force = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete Product
        /// </summary>
        /// <remarks>
        /// Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductWithHttpInfo(string productId, bool? force = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Delete SKU
        /// </summary>
        /// <remarks>
        /// Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSku(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete SKU
        /// </summary>
        /// <remarks>
        /// Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSkuWithHttpInfo(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Get Product
        /// </summary>
        /// <remarks>
        /// Retrieve product details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsGetResponseBody</returns>
        ProductsGetResponseBody GetProduct(string productId, int operationIndex = 0);

        /// <summary>
        /// Get Product
        /// </summary>
        /// <remarks>
        /// Retrieve product details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsGetResponseBody</returns>
        ApiResponse<ProductsGetResponseBody> GetProductWithHttpInfo(string productId, int operationIndex = 0);
        /// <summary>
        /// Get SKU
        /// </summary>
        /// <remarks>
        /// Retrieve details of a SKU.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SkusGetResponseBody</returns>
        SkusGetResponseBody GetSku(string skuId, int operationIndex = 0);

        /// <summary>
        /// Get SKU
        /// </summary>
        /// <remarks>
        /// Retrieve details of a SKU.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SkusGetResponseBody</returns>
        ApiResponse<SkusGetResponseBody> GetSkuWithHttpInfo(string skuId, int operationIndex = 0);
        /// <summary>
        /// Import Products using CSV
        /// </summary>
        /// <remarks>
        /// Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsImportCsvCreateResponseBody</returns>
        ProductsImportCsvCreateResponseBody ImportProductsUsingCsv(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Import Products using CSV
        /// </summary>
        /// <remarks>
        /// Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsImportCsvCreateResponseBody</returns>
        ApiResponse<ProductsImportCsvCreateResponseBody> ImportProductsUsingCsvWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// Import SKUs using CSV
        /// </summary>
        /// <remarks>
        /// Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SkusImportCsvCreateResponseBody</returns>
        SkusImportCsvCreateResponseBody ImportSkusUsingCsv(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// Import SKUs using CSV
        /// </summary>
        /// <remarks>
        /// Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SkusImportCsvCreateResponseBody</returns>
        ApiResponse<SkusImportCsvCreateResponseBody> ImportSkusUsingCsvWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0);
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsListResponseBody</returns>
        ProductsListResponseBody ListProducts(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0);

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsListResponseBody</returns>
        ApiResponse<ProductsListResponseBody> ListProductsWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0);
        /// <summary>
        /// List SKUs in Product
        /// </summary>
        /// <remarks>
        /// Retrieve all SKUs for a given product.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsSkusListResponseBody</returns>
        ProductsSkusListResponseBody ListSkusInProduct(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0);

        /// <summary>
        /// List SKUs in Product
        /// </summary>
        /// <remarks>
        /// Retrieve all SKUs for a given product.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsSkusListResponseBody</returns>
        ApiResponse<ProductsSkusListResponseBody> ListSkusInProductWithHttpInfo(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0);
        /// <summary>
        /// Update Product
        /// </summary>
        /// <remarks>
        /// Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsUpdateResponseBody</returns>
        ProductsUpdateResponseBody UpdateProduct(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Product
        /// </summary>
        /// <remarks>
        /// Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsUpdateResponseBody</returns>
        ApiResponse<ProductsUpdateResponseBody> UpdateProductWithHttpInfo(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Products in Bulk
        /// </summary>
        /// <remarks>
        /// Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsUpdateInBulkResponseBody</returns>
        ProductsUpdateInBulkResponseBody UpdateProductsInBulk(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0);

        /// <summary>
        /// Update Products in Bulk
        /// </summary>
        /// <remarks>
        /// Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsUpdateInBulkResponseBody</returns>
        ApiResponse<ProductsUpdateInBulkResponseBody> UpdateProductsInBulkWithHttpInfo(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0);
        /// <summary>
        /// Update Products&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsMetadataUpdateInBulkResponseBody</returns>
        ProductsMetadataUpdateInBulkResponseBody UpdateProductsMetadataInBulk(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Products&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsMetadataUpdateInBulkResponseBody</returns>
        ApiResponse<ProductsMetadataUpdateInBulkResponseBody> UpdateProductsMetadataInBulkWithHttpInfo(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update SKU
        /// </summary>
        /// <remarks>
        /// Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsSkusUpdateResponseBody</returns>
        ProductsSkusUpdateResponseBody UpdateSku(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update SKU
        /// </summary>
        /// <remarks>
        /// Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsSkusUpdateResponseBody</returns>
        ApiResponse<ProductsSkusUpdateResponseBody> UpdateSkuWithHttpInfo(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Product
        /// </summary>
        /// <remarks>
        /// Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsCreateResponseBody</returns>
        System.Threading.Tasks.Task<ProductsCreateResponseBody> CreateProductAsync(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Product
        /// </summary>
        /// <remarks>
        /// Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsCreateResponseBody>> CreateProductWithHttpInfoAsync(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create SKU
        /// </summary>
        /// <remarks>
        /// This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsSkusCreateResponseBody</returns>
        System.Threading.Tasks.Task<ProductsSkusCreateResponseBody> CreateSkuAsync(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create SKU
        /// </summary>
        /// <remarks>
        /// This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsSkusCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsSkusCreateResponseBody>> CreateSkuWithHttpInfoAsync(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Product
        /// </summary>
        /// <remarks>
        /// Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductAsync(string productId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Product
        /// </summary>
        /// <remarks>
        /// Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductWithHttpInfoAsync(string productId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete SKU
        /// </summary>
        /// <remarks>
        /// Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSkuAsync(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete SKU
        /// </summary>
        /// <remarks>
        /// Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSkuWithHttpInfoAsync(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Product
        /// </summary>
        /// <remarks>
        /// Retrieve product details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsGetResponseBody</returns>
        System.Threading.Tasks.Task<ProductsGetResponseBody> GetProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Product
        /// </summary>
        /// <remarks>
        /// Retrieve product details.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsGetResponseBody>> GetProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get SKU
        /// </summary>
        /// <remarks>
        /// Retrieve details of a SKU.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkusGetResponseBody</returns>
        System.Threading.Tasks.Task<SkusGetResponseBody> GetSkuAsync(string skuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get SKU
        /// </summary>
        /// <remarks>
        /// Retrieve details of a SKU.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkusGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SkusGetResponseBody>> GetSkuWithHttpInfoAsync(string skuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Import Products using CSV
        /// </summary>
        /// <remarks>
        /// Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsImportCsvCreateResponseBody</returns>
        System.Threading.Tasks.Task<ProductsImportCsvCreateResponseBody> ImportProductsUsingCsvAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Import Products using CSV
        /// </summary>
        /// <remarks>
        /// Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsImportCsvCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsImportCsvCreateResponseBody>> ImportProductsUsingCsvWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Import SKUs using CSV
        /// </summary>
        /// <remarks>
        /// Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkusImportCsvCreateResponseBody</returns>
        System.Threading.Tasks.Task<SkusImportCsvCreateResponseBody> ImportSkusUsingCsvAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Import SKUs using CSV
        /// </summary>
        /// <remarks>
        /// Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkusImportCsvCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SkusImportCsvCreateResponseBody>> ImportSkusUsingCsvWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsListResponseBody</returns>
        System.Threading.Tasks.Task<ProductsListResponseBody> ListProductsAsync(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieve a list of products.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsListResponseBody>> ListProductsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List SKUs in Product
        /// </summary>
        /// <remarks>
        /// Retrieve all SKUs for a given product.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsSkusListResponseBody</returns>
        System.Threading.Tasks.Task<ProductsSkusListResponseBody> ListSkusInProductAsync(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List SKUs in Product
        /// </summary>
        /// <remarks>
        /// Retrieve all SKUs for a given product.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsSkusListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsSkusListResponseBody>> ListSkusInProductWithHttpInfoAsync(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Product
        /// </summary>
        /// <remarks>
        /// Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ProductsUpdateResponseBody> UpdateProductAsync(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Product
        /// </summary>
        /// <remarks>
        /// Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsUpdateResponseBody>> UpdateProductWithHttpInfoAsync(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Products in Bulk
        /// </summary>
        /// <remarks>
        /// Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsUpdateInBulkResponseBody</returns>
        System.Threading.Tasks.Task<ProductsUpdateInBulkResponseBody> UpdateProductsInBulkAsync(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Products in Bulk
        /// </summary>
        /// <remarks>
        /// Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsUpdateInBulkResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsUpdateInBulkResponseBody>> UpdateProductsInBulkWithHttpInfoAsync(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Products&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsMetadataUpdateInBulkResponseBody</returns>
        System.Threading.Tasks.Task<ProductsMetadataUpdateInBulkResponseBody> UpdateProductsMetadataInBulkAsync(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Products&#39; Metadata in Bulk
        /// </summary>
        /// <remarks>
        /// Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsMetadataUpdateInBulkResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsMetadataUpdateInBulkResponseBody>> UpdateProductsMetadataInBulkWithHttpInfoAsync(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update SKU
        /// </summary>
        /// <remarks>
        /// Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsSkusUpdateResponseBody</returns>
        System.Threading.Tasks.Task<ProductsSkusUpdateResponseBody> UpdateSkuAsync(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update SKU
        /// </summary>
        /// <remarks>
        /// Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsSkusUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductsSkusUpdateResponseBody>> UpdateSkuWithHttpInfoAsync(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductsApi : IProductsApiSync, IProductsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductsApi : IProductsApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductsApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductsApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductsApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Product Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsCreateResponseBody</returns>
        public ProductsCreateResponseBody CreateProduct(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsCreateResponseBody> localVarResponse = CreateProductWithHttpInfo(productsCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Product Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsCreateResponseBody> CreateProductWithHttpInfo(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productsCreateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.CreateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductsCreateResponseBody>("/v1/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Product Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsCreateResponseBody> CreateProductAsync(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsCreateResponseBody> localVarResponse = await CreateProductWithHttpInfoAsync(productsCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Product Creates a product object.  ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the product database, Voucherify will return a related product object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsCreateRequestBody">Specify the product parameters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsCreateResponseBody>> CreateProductWithHttpInfoAsync(ProductsCreateRequestBody productsCreateRequestBody = default(ProductsCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productsCreateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.CreateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductsCreateResponseBody>("/v1/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create SKU This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsSkusCreateResponseBody</returns>
        public ProductsSkusCreateResponseBody CreateSku(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsSkusCreateResponseBody> localVarResponse = CreateSkuWithHttpInfo(productId, productsSkusCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create SKU This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsSkusCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsSkusCreateResponseBody> CreateSkuWithHttpInfo(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CreateSku");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = productsSkusCreateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.CreateSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductsSkusCreateResponseBody>("/v1/products/{productId}/skus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create SKU This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsSkusCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsSkusCreateResponseBody> CreateSkuAsync(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsSkusCreateResponseBody> localVarResponse = await CreateSkuWithHttpInfoAsync(productId, productsSkusCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create SKU This method adds product variants to a created product.   ðŸ“˜ Upsert Mode  If you pass an id or a source_id that already exists in the sku database, Voucherify will return a related sku object with updated fields.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="productsSkusCreateRequestBody">Specify the SKU parameters to be created. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsSkusCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsSkusCreateResponseBody>> CreateSkuWithHttpInfoAsync(string productId, ProductsSkusCreateRequestBody productsSkusCreateRequestBody = default(ProductsSkusCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->CreateSku");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = productsSkusCreateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.CreateSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductsSkusCreateResponseBody>("/v1/products/{productId}/skus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Product Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteProduct(string productId, bool? force = default(bool?), int operationIndex = 0)
        {
            DeleteProductWithHttpInfo(productId, force);
        }

        /// <summary>
        /// Delete Product Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteProductWithHttpInfo(string productId, bool? force = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProduct");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "ProductsApi.DeleteProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/products/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Product Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductAsync(string productId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteProductWithHttpInfoAsync(productId, force, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Product Deletes a product and all related SKUs. This operation cannot be undone.  If the force parameter is set to false or not set at all, the product and all related SKUs will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="force">If this flag is set to true, the product and all related SKUs will be removed permanently. If it is set to false or not set at all, the product and all related SKUs will be moved to the bin. Going forward, the user will be able to create another product with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteProductWithHttpInfoAsync(string productId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteProduct");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "ProductsApi.DeleteProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/products/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SKU Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSku(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0)
        {
            DeleteSkuWithHttpInfo(productId, skuId, force);
        }

        /// <summary>
        /// Delete SKU Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteSkuWithHttpInfo(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteSku");
            }

            // verify the required parameter 'skuId' is set
            if (skuId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'skuId' when calling ProductsApi->DeleteSku");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("skuId", Voucherify.Client.ClientUtils.ParameterToString(skuId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "ProductsApi.DeleteSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/products/{productId}/skus/{skuId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete SKU Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSkuAsync(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteSkuWithHttpInfoAsync(productId, skuId, force, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete SKU Deletes a product SKU. This operation cannot be undone.  If the force parameter is set to false or not set at all, the SKU will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="force">If this flag is set to true, the SKU will be removed permanently. If it is set to false or not set at all, the SKU will be moved to the bin. Going forward, the user will be able to create another SKU with exactly the same source_id. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteSkuWithHttpInfoAsync(string productId, string skuId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->DeleteSku");
            }

            // verify the required parameter 'skuId' is set
            if (skuId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'skuId' when calling ProductsApi->DeleteSku");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("skuId", Voucherify.Client.ClientUtils.ParameterToString(skuId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "ProductsApi.DeleteSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/products/{productId}/skus/{skuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Retrieve product details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsGetResponseBody</returns>
        public ProductsGetResponseBody GetProduct(string productId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsGetResponseBody> localVarResponse = GetProductWithHttpInfo(productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Retrieve product details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsGetResponseBody> GetProductWithHttpInfo(string productId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProduct");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductsGetResponseBody>("/v1/products/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Product Retrieve product details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsGetResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsGetResponseBody> GetProductAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsGetResponseBody> localVarResponse = await GetProductWithHttpInfoAsync(productId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Product Retrieve product details.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsGetResponseBody>> GetProductWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->GetProduct");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductsGetResponseBody>("/v1/products/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SKU Retrieve details of a SKU.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SkusGetResponseBody</returns>
        public SkusGetResponseBody GetSku(string skuId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<SkusGetResponseBody> localVarResponse = GetSkuWithHttpInfo(skuId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get SKU Retrieve details of a SKU.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SkusGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<SkusGetResponseBody> GetSkuWithHttpInfo(string skuId, int operationIndex = 0)
        {
            // verify the required parameter 'skuId' is set
            if (skuId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'skuId' when calling ProductsApi->GetSku");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("skuId", Voucherify.Client.ClientUtils.ParameterToString(skuId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SkusGetResponseBody>("/v1/skus/{skuId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get SKU Retrieve details of a SKU.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkusGetResponseBody</returns>
        public async System.Threading.Tasks.Task<SkusGetResponseBody> GetSkuAsync(string skuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<SkusGetResponseBody> localVarResponse = await GetSkuWithHttpInfoAsync(skuId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get SKU Retrieve details of a SKU.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="skuId">A Voucherify SKU identifier or SKU source ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkusGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<SkusGetResponseBody>> GetSkuWithHttpInfoAsync(string skuId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'skuId' is set
            if (skuId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'skuId' when calling ProductsApi->GetSku");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("skuId", Voucherify.Client.ClientUtils.ParameterToString(skuId)); // path parameter

            localVarRequestOptions.Operation = "ProductsApi.GetSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SkusGetResponseBody>("/v1/skus/{skuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Products using CSV Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsImportCsvCreateResponseBody</returns>
        public ProductsImportCsvCreateResponseBody ImportProductsUsingCsv(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsImportCsvCreateResponseBody> localVarResponse = ImportProductsUsingCsvWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Products using CSV Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsImportCsvCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsImportCsvCreateResponseBody> ImportProductsUsingCsvWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "ProductsApi.ImportProductsUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductsImportCsvCreateResponseBody>("/v1/products/importCSV", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductsUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Products using CSV Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsImportCsvCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsImportCsvCreateResponseBody> ImportProductsUsingCsvAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsImportCsvCreateResponseBody> localVarResponse = await ImportProductsUsingCsvWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Products using CSV Import products into the repository using a CSV file.   This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsImportCsvCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsImportCsvCreateResponseBody>> ImportProductsUsingCsvWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "ProductsApi.ImportProductsUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductsImportCsvCreateResponseBody>("/v1/products/importCSV", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportProductsUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import SKUs using CSV Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SkusImportCsvCreateResponseBody</returns>
        public SkusImportCsvCreateResponseBody ImportSkusUsingCsv(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<SkusImportCsvCreateResponseBody> localVarResponse = ImportSkusUsingCsvWithHttpInfo(file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import SKUs using CSV Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SkusImportCsvCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<SkusImportCsvCreateResponseBody> ImportSkusUsingCsvWithHttpInfo(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "ProductsApi.ImportSkusUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SkusImportCsvCreateResponseBody>("/v1/skus/importCSV", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportSkusUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import SKUs using CSV Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkusImportCsvCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<SkusImportCsvCreateResponseBody> ImportSkusUsingCsvAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<SkusImportCsvCreateResponseBody> localVarResponse = await ImportSkusUsingCsvWithHttpInfoAsync(file, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import SKUs using CSV Import SKUs into the repository using a CSV file. The CSV file has to include headers in the first line. All properties which cannot be mapped to standard SKU fields will be added to the metadata object. You can find an example template [here](https://s3.amazonaws.com/helpscout.net/docs/assets/5902f1c12c7d3a057f88a36d/attachments/627b98d08c9b585083488a4c/Import_SKUS_template.csv).  This API request starts a process that affects Voucherify data in bulk.  In case of small jobs (like bulk update) the request is put into a queue and processed once every other bulk request placed in the queue prior to this request is finished. However, when the job takes a longer time (like vouchers generation) then it is processed in small portions in a round-robin fashion. When there is a list of vouchers generation scheduled, then they will all have the IN_PROGRESS status shortly. This way, small jobs added just after scheduling big jobs of the same type will be processed in a short time window.  The result will return the async ID. You can verify the status of your request via this API request.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">File path. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkusImportCsvCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<SkusImportCsvCreateResponseBody>> ImportSkusUsingCsvWithHttpInfoAsync(System.IO.Stream file = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }

            localVarRequestOptions.Operation = "ProductsApi.ImportSkusUsingCsv";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SkusImportCsvCreateResponseBody>("/v1/skus/importCSV", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportSkusUsingCsv", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Products Retrieve a list of products.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsListResponseBody</returns>
        public ProductsListResponseBody ListProducts(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsListResponseBody> localVarResponse = ListProductsWithHttpInfo(limit, page, order, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Products Retrieve a list of products.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsListResponseBody> ListProductsWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            localVarRequestOptions.Operation = "ProductsApi.ListProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductsListResponseBody>("/v1/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Products Retrieve a list of products.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsListResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsListResponseBody> ListProductsAsync(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsListResponseBody> localVarResponse = await ListProductsWithHttpInfoAsync(limit, page, order, startDate, endDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Products Retrieve a list of products.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsListResponseBody>> ListProductsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            localVarRequestOptions.Operation = "ProductsApi.ListProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductsListResponseBody>("/v1/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SKUs in Product Retrieve all SKUs for a given product.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsSkusListResponseBody</returns>
        public ProductsSkusListResponseBody ListSkusInProduct(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsSkusListResponseBody> localVarResponse = ListSkusInProductWithHttpInfo(productId, limit, page, order, startDate, endDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SKUs in Product Retrieve all SKUs for a given product.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsSkusListResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsSkusListResponseBody> ListSkusInProductWithHttpInfo(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ListSkusInProduct");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            localVarRequestOptions.Operation = "ProductsApi.ListSkusInProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ProductsSkusListResponseBody>("/v1/products/{productId}/skus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSkusInProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List SKUs in Product Retrieve all SKUs for a given product.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsSkusListResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsSkusListResponseBody> ListSkusInProductAsync(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsSkusListResponseBody> localVarResponse = await ListSkusInProductWithHttpInfoAsync(productId, limit, page, order, startDate, endDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List SKUs in Product Retrieve all SKUs for a given product.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or product source ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="endDate">Timestamp representing the date and time which results must end on. Represented in ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsSkusListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsSkusListResponseBody>> ListSkusInProductWithHttpInfoAsync(string productId, int? limit = default(int?), int? page = default(int?), ParameterOrder? order = default(ParameterOrder?), DateTimeOffset? startDate = default(DateTimeOffset?), DateTimeOffset? endDate = default(DateTimeOffset?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->ListSkusInProduct");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "start_date", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "end_date", endDate));
            }

            localVarRequestOptions.Operation = "ProductsApi.ListSkusInProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ProductsSkusListResponseBody>("/v1/products/{productId}/skus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSkusInProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Product Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsUpdateResponseBody</returns>
        public ProductsUpdateResponseBody UpdateProduct(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsUpdateResponseBody> localVarResponse = UpdateProductWithHttpInfo(productId, productsUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Product Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsUpdateResponseBody> UpdateProductWithHttpInfo(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProduct");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = productsUpdateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductsUpdateResponseBody>("/v1/products/{productId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Product Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsUpdateResponseBody> UpdateProductAsync(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsUpdateResponseBody> localVarResponse = await UpdateProductWithHttpInfoAsync(productId, productsUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Product Updates the specified product by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A Voucherify product ID or source ID.</param>
        /// <param name="productsUpdateRequestBody">Specify the parameters of the product that are to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsUpdateResponseBody>> UpdateProductWithHttpInfoAsync(string productId, ProductsUpdateRequestBody productsUpdateRequestBody = default(ProductsUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateProduct");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = productsUpdateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProduct";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductsUpdateResponseBody>("/v1/products/{productId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProduct", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Products in Bulk Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsUpdateInBulkResponseBody</returns>
        public ProductsUpdateInBulkResponseBody UpdateProductsInBulk(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsUpdateInBulkResponseBody> localVarResponse = UpdateProductsInBulkWithHttpInfo(productsUpdateInBulkRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Products in Bulk Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsUpdateInBulkResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsUpdateInBulkResponseBody> UpdateProductsInBulkWithHttpInfo(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productsUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProductsInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductsUpdateInBulkResponseBody>("/v1/products/bulk/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductsInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Products in Bulk Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsUpdateInBulkResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsUpdateInBulkResponseBody> UpdateProductsInBulkAsync(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsUpdateInBulkResponseBody> localVarResponse = await UpdateProductsInBulkWithHttpInfoAsync(productsUpdateInBulkRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Products in Bulk Update products in one asynchronous operation. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsUpdateInBulkRequestBody">List the product fields to be updated in each customer object. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsUpdateInBulkResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsUpdateInBulkResponseBody>> UpdateProductsInBulkWithHttpInfoAsync(List<ProductsUpdateInBulkRequestBody> productsUpdateInBulkRequestBody = default(List<ProductsUpdateInBulkRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productsUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProductsInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductsUpdateInBulkResponseBody>("/v1/products/bulk/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductsInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Products&#39; Metadata in Bulk Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsMetadataUpdateInBulkResponseBody</returns>
        public ProductsMetadataUpdateInBulkResponseBody UpdateProductsMetadataInBulk(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsMetadataUpdateInBulkResponseBody> localVarResponse = UpdateProductsMetadataInBulkWithHttpInfo(productsMetadataUpdateInBulkRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Products&#39; Metadata in Bulk Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsMetadataUpdateInBulkResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsMetadataUpdateInBulkResponseBody> UpdateProductsMetadataInBulkWithHttpInfo(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productsMetadataUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProductsMetadataInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductsMetadataUpdateInBulkResponseBody>("/v1/products/metadata/async", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductsMetadataInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Products&#39; Metadata in Bulk Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsMetadataUpdateInBulkResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsMetadataUpdateInBulkResponseBody> UpdateProductsMetadataInBulkAsync(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsMetadataUpdateInBulkResponseBody> localVarResponse = await UpdateProductsMetadataInBulkWithHttpInfoAsync(productsMetadataUpdateInBulkRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Products&#39; Metadata in Bulk Updates metadata parameters for a list of products. Every resource in the list will receive the metadata defined in the request. The request can include up to **10 MB** of data. The response returns a unique asynchronous action ID. Use this ID in the query paramater of the GET Async Action endpoint to check, e.g.: - The status of your request (in queue, in progress, done, or failed) - Resources that failed to be updated - The report file with details about the update If a product object is not found, it is **upserted**. This is shown in the report file in the **GET** Async Action endpoint. The upserted resources have value false in the found column and true in the updated column. This API request starts a process that affects Voucherify data in bulk. In the case of small jobs (like bulk update), the request is put into a queue and processed when every other bulk request placed in the queue prior to this request is finished.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productsMetadataUpdateInBulkRequestBody">List the source_ids of the products you would like to update with the metadata key/value pairs. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsMetadataUpdateInBulkResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsMetadataUpdateInBulkResponseBody>> UpdateProductsMetadataInBulkWithHttpInfoAsync(ProductsMetadataUpdateInBulkRequestBody productsMetadataUpdateInBulkRequestBody = default(ProductsMetadataUpdateInBulkRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = productsMetadataUpdateInBulkRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateProductsMetadataInBulk";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductsMetadataUpdateInBulkResponseBody>("/v1/products/metadata/async", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProductsMetadataInBulk", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SKU Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductsSkusUpdateResponseBody</returns>
        public ProductsSkusUpdateResponseBody UpdateSku(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<ProductsSkusUpdateResponseBody> localVarResponse = UpdateSkuWithHttpInfo(productId, skuId, productsSkusUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update SKU Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductsSkusUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<ProductsSkusUpdateResponseBody> UpdateSkuWithHttpInfo(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateSku");
            }

            // verify the required parameter 'skuId' is set
            if (skuId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'skuId' when calling ProductsApi->UpdateSku");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("skuId", Voucherify.Client.ClientUtils.ParameterToString(skuId)); // path parameter
            localVarRequestOptions.Data = productsSkusUpdateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ProductsSkusUpdateResponseBody>("/v1/products/{productId}/skus/{skuId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update SKU Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductsSkusUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<ProductsSkusUpdateResponseBody> UpdateSkuAsync(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<ProductsSkusUpdateResponseBody> localVarResponse = await UpdateSkuWithHttpInfoAsync(productId, skuId, productsSkusUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update SKU Updates the specified SKU by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. Fields other than the ones listed in the request body schema wont be modified. Even if provided, they will be silently skipped.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">A unique Voucherify product ID or product source ID.</param>
        /// <param name="skuId">A Voucherify SKU ID or SKU source ID.</param>
        /// <param name="productsSkusUpdateRequestBody">Specify the parameters to be updated. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductsSkusUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<ProductsSkusUpdateResponseBody>> UpdateSkuWithHttpInfoAsync(string productId, string skuId, ProductsSkusUpdateRequestBody productsSkusUpdateRequestBody = default(ProductsSkusUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'productId' when calling ProductsApi->UpdateSku");
            }

            // verify the required parameter 'skuId' is set
            if (skuId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'skuId' when calling ProductsApi->UpdateSku");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("productId", Voucherify.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.PathParameters.Add("skuId", Voucherify.Client.ClientUtils.ParameterToString(skuId)); // path parameter
            localVarRequestOptions.Data = productsSkusUpdateRequestBody;

            localVarRequestOptions.Operation = "ProductsApi.UpdateSku";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ProductsSkusUpdateResponseBody>("/v1/products/{productId}/skus/{skuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSku", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
