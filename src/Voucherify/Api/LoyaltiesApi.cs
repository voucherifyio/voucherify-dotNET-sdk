/*
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Voucherify.Client;
using Voucherify.Client.Auth;
using Voucherify.Model;

namespace Voucherify.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoyaltiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPendingPointsActivateResponseBody</returns>
        LoyaltiesMembersPendingPointsActivateResponseBody ActivateMemberPendingPoints(string memberId, string pendingPointsId, int operationIndex = 0);

        /// <summary>
        /// Activate Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPendingPointsActivateResponseBody</returns>
        ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody> ActivateMemberPendingPointsWithHttpInfo(string memberId, string pendingPointsId, int operationIndex = 0);
        /// <summary>
        /// Add Member
        /// </summary>
        /// <remarks>
        /// This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersCreateResponseBody</returns>
        LoyaltiesMembersCreateResponseBody AddMember(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Add Member
        /// </summary>
        /// <remarks>
        /// This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersCreateResponseBody</returns>
        ApiResponse<LoyaltiesMembersCreateResponseBody> AddMemberWithHttpInfo(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Cancel Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelMemberPendingPoints(string memberId, string pendingPointsId, int operationIndex = 0);

        /// <summary>
        /// Cancel Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelMemberPendingPointsWithHttpInfo(string memberId, string pendingPointsId, int operationIndex = 0);
        /// <summary>
        /// Create Earning Rule
        /// </summary>
        /// <remarks>
        /// Create earning rules for a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;</returns>
        List<LoyaltiesEarningRulesCreateResponseBody> CreateEarningRule(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0);

        /// <summary>
        /// Create Earning Rule
        /// </summary>
        /// <remarks>
        /// Create earning rules for a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;</returns>
        ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>> CreateEarningRuleWithHttpInfo(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0);
        /// <summary>
        /// Create loyalty tiers
        /// </summary>
        /// <remarks>
        /// Creates loyalty tiers for desired campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LoyaltyTier&gt;</returns>
        List<LoyaltyTier> CreateInBulkLoyaltyTiers(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0);

        /// <summary>
        /// Create loyalty tiers
        /// </summary>
        /// <remarks>
        /// Creates loyalty tiers for desired campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LoyaltyTier&gt;</returns>
        ApiResponse<List<LoyaltyTier>> CreateInBulkLoyaltyTiersWithHttpInfo(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0);
        /// <summary>
        /// Create Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesCreateCampaignResponseBody</returns>
        LoyaltiesCreateCampaignResponseBody CreateLoyaltyProgram(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0);

        /// <summary>
        /// Create Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesCreateCampaignResponseBody</returns>
        ApiResponse<LoyaltiesCreateCampaignResponseBody> CreateLoyaltyProgramWithHttpInfo(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0);
        /// <summary>
        /// Export Loyalty Campaign Point Expiration
        /// </summary>
        /// <remarks>
        /// Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesPointsExpirationExportCreateResponseBody</returns>
        LoyaltiesPointsExpirationExportCreateResponseBody CreatePointsExpirationExport(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Export Loyalty Campaign Point Expiration
        /// </summary>
        /// <remarks>
        /// Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesPointsExpirationExportCreateResponseBody</returns>
        ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody> CreatePointsExpirationExportWithHttpInfo(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Add rewards to a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsCreateAssignmentResponseBody</returns>
        LoyaltiesRewardsCreateAssignmentResponseBody CreateRewardAssignment1(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0);

        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Add rewards to a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsCreateAssignmentResponseBody</returns>
        ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody> CreateRewardAssignment1WithHttpInfo(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0);
        /// <summary>
        /// Delete Earning Rule
        /// </summary>
        /// <remarks>
        /// This method deletes an earning rule for a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteEarningRule(string campaignId, string earningRuleId, int operationIndex = 0);

        /// <summary>
        /// Delete Earning Rule
        /// </summary>
        /// <remarks>
        /// This method deletes an earning rule for a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0);
        /// <summary>
        /// Delete Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesDeleteResponseBody</returns>
        LoyaltiesDeleteResponseBody DeleteLoyaltyProgram(string campaignId, bool? force = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Delete Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesDeleteResponseBody</returns>
        ApiResponse<LoyaltiesDeleteResponseBody> DeleteLoyaltyProgramWithHttpInfo(string campaignId, bool? force = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRewardAssignment1(string campaignId, string assignmentId, int operationIndex = 0);

        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRewardAssignment1WithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0);
        /// <summary>
        /// Disable Earning Rule
        /// </summary>
        /// <remarks>
        /// Disable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesDisableResponseBody</returns>
        LoyaltiesEarningRulesDisableResponseBody DisableEarningRule(string campaignId, string earningRuleId, int operationIndex = 0);

        /// <summary>
        /// Disable Earning Rule
        /// </summary>
        /// <remarks>
        /// Disable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesDisableResponseBody</returns>
        ApiResponse<LoyaltiesEarningRulesDisableResponseBody> DisableEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0);
        /// <summary>
        /// Enable Earning Rule
        /// </summary>
        /// <remarks>
        /// Enable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesEnableResponseBody</returns>
        LoyaltiesEarningRulesEnableResponseBody EnableEarningRule(string campaignId, string earningRuleId, int operationIndex = 0);

        /// <summary>
        /// Enable Earning Rule
        /// </summary>
        /// <remarks>
        /// Enable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesEnableResponseBody</returns>
        ApiResponse<LoyaltiesEarningRulesEnableResponseBody> EnableEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0);
        /// <summary>
        /// Export Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsTransactionsExportCreateResponseBody</returns>
        CampaignsTransactionsExportCreateResponseBody ExportLoyaltyCampaignTransactions(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Export Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsTransactionsExportCreateResponseBody</returns>
        ApiResponse<CampaignsTransactionsExportCreateResponseBody> ExportLoyaltyCampaignTransactionsWithHttpInfo(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        LoyaltiesMembersTransactionsExportCreateResponseBody ExportLoyaltyCardTransactions(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactionsWithHttpInfo(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        LoyaltiesMembersTransactionsExportCreateResponseBody ExportLoyaltyCardTransactions1(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactions1WithHttpInfo(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Get Earning Rule
        /// </summary>
        /// <remarks>
        /// Retrieves an earning rule assigned to a campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesGetResponseBody</returns>
        LoyaltiesEarningRulesGetResponseBody GetEarningRule(string campaignId, string earningRuleId, int operationIndex = 0);

        /// <summary>
        /// Get Earning Rule
        /// </summary>
        /// <remarks>
        /// Retrieves an earning rule assigned to a campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesGetResponseBody</returns>
        ApiResponse<LoyaltiesEarningRulesGetResponseBody> GetEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0);
        /// <summary>
        /// Get Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Retrieve a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesGetCampaignResponseBody</returns>
        LoyaltiesGetCampaignResponseBody GetLoyaltyProgram(string campaignId, int operationIndex = 0);

        /// <summary>
        /// Get Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Retrieve a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesGetCampaignResponseBody</returns>
        ApiResponse<LoyaltiesGetCampaignResponseBody> GetLoyaltyProgramWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// Get Loyalty Tier
        /// </summary>
        /// <remarks>
        /// Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersGetResponseBody</returns>
        LoyaltiesTiersGetResponseBody GetLoyaltyTier(string campaignId, string loyaltyTierId, int operationIndex = 0);

        /// <summary>
        /// Get Loyalty Tier
        /// </summary>
        /// <remarks>
        /// Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersGetResponseBody</returns>
        ApiResponse<LoyaltiesTiersGetResponseBody> GetLoyaltyTierWithHttpInfo(string campaignId, string loyaltyTierId, int operationIndex = 0);
        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersGetResponseBody</returns>
        LoyaltiesMembersGetResponseBody GetMember(string memberId, int operationIndex = 0);

        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersGetResponseBody</returns>
        ApiResponse<LoyaltiesMembersGetResponseBody> GetMemberWithHttpInfo(string memberId, int operationIndex = 0);
        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersGetResponseBody</returns>
        LoyaltiesMembersGetResponseBody GetMember1(string campaignId, string memberId, int operationIndex = 0);

        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersGetResponseBody</returns>
        ApiResponse<LoyaltiesMembersGetResponseBody> GetMember1WithHttpInfo(string campaignId, string memberId, int operationIndex = 0);
        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardAssignmentsGetResponseBody</returns>
        LoyaltiesRewardAssignmentsGetResponseBody GetRewardAssignment1(string campaignId, string assignmentId, int operationIndex = 0);

        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardAssignmentsGetResponseBody</returns>
        ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> GetRewardAssignment1WithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0);
        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsGetResponseBody</returns>
        LoyaltiesRewardsGetResponseBody GetRewardAssignment2(string campaignId, string assignmentId, int operationIndex = 0);

        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsGetResponseBody</returns>
        ApiResponse<LoyaltiesRewardsGetResponseBody> GetRewardAssignment2WithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0);
        /// <summary>
        /// Get Reward Details
        /// </summary>
        /// <remarks>
        /// Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardAssignmentsRewardGetResponseBody</returns>
        LoyaltiesRewardAssignmentsRewardGetResponseBody GetRewardDetails(string campaignId, string assignmentId, int operationIndex = 0);

        /// <summary>
        /// Get Reward Details
        /// </summary>
        /// <remarks>
        /// Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardAssignmentsRewardGetResponseBody</returns>
        ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> GetRewardDetailsWithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0);
        /// <summary>
        /// List Campaign Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesPendingPointsListResponseBody</returns>
        LoyaltiesPendingPointsListResponseBody ListCampaignPendingPoints(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Campaign Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesPendingPointsListResponseBody</returns>
        ApiResponse<LoyaltiesPendingPointsListResponseBody> ListCampaignPendingPointsWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Earning Rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all earning rules within a given campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesListResponseBody</returns>
        LoyaltiesEarningRulesListResponseBody ListEarningRules(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0);

        /// <summary>
        /// List Earning Rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all earning rules within a given campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesListResponseBody</returns>
        ApiResponse<LoyaltiesEarningRulesListResponseBody> ListEarningRulesWithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0);
        /// <summary>
        /// List Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTransactionsListResponseBody</returns>
        LoyaltiesTransactionsListResponseBody ListLoyaltyCampaignTransactions(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0);

        /// <summary>
        /// List Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTransactionsListResponseBody</returns>
        ApiResponse<LoyaltiesTransactionsListResponseBody> ListLoyaltyCampaignTransactionsWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0);
        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsListResponseBody</returns>
        LoyaltiesMembersTransactionsListResponseBody ListLoyaltyCardTransactions(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsListResponseBody</returns>
        ApiResponse<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactionsWithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsListResponseBody</returns>
        LoyaltiesMembersTransactionsListResponseBody ListLoyaltyCardTransactions1(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsListResponseBody</returns>
        ApiResponse<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactions1WithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Loyalty Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesListCampaignsResponseBody</returns>
        LoyaltiesListCampaignsResponseBody ListLoyaltyPrograms(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0);

        /// <summary>
        /// List Loyalty Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesListCampaignsResponseBody</returns>
        ApiResponse<LoyaltiesListCampaignsResponseBody> ListLoyaltyProgramsWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0);
        /// <summary>
        /// List Loyalty Tier Earning Rules
        /// </summary>
        /// <remarks>
        /// Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersEarningRulesListResponseBody</returns>
        LoyaltiesTiersEarningRulesListResponseBody ListLoyaltyTierEarningRules(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List Loyalty Tier Earning Rules
        /// </summary>
        /// <remarks>
        /// Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersEarningRulesListResponseBody</returns>
        ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> ListLoyaltyTierEarningRulesWithHttpInfo(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List Loyalty Tier Rewards
        /// </summary>
        /// <remarks>
        /// Get available rewards for a given tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersRewardsListResponseBody</returns>
        LoyaltiesTiersRewardsListResponseBody ListLoyaltyTierRewards(string campaignId, string loyaltyTierId, int operationIndex = 0);

        /// <summary>
        /// List Loyalty Tier Rewards
        /// </summary>
        /// <remarks>
        /// Get available rewards for a given tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersRewardsListResponseBody</returns>
        ApiResponse<LoyaltiesTiersRewardsListResponseBody> ListLoyaltyTierRewardsWithHttpInfo(string campaignId, string loyaltyTierId, int operationIndex = 0);
        /// <summary>
        /// List Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersListResponseBody</returns>
        LoyaltiesTiersListResponseBody ListLoyaltyTiers(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0);

        /// <summary>
        /// List Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersListResponseBody</returns>
        ApiResponse<LoyaltiesTiersListResponseBody> ListLoyaltyTiersWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0);
        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMemberActivityListResponseBody</returns>
        LoyaltiesMemberActivityListResponseBody ListMemberActivity(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMemberActivityListResponseBody</returns>
        ApiResponse<LoyaltiesMemberActivityListResponseBody> ListMemberActivityWithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        /// Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMemberActivityListResponseBody</returns>
        LoyaltiesMemberActivityListResponseBody ListMemberActivity1(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        /// Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMemberActivityListResponseBody</returns>
        ApiResponse<LoyaltiesMemberActivityListResponseBody> ListMemberActivity1WithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Member&#39;s Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve member tiers using the loyalty card ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTiersListResponseBody</returns>
        LoyaltiesMembersTiersListResponseBody ListMemberLoyaltyTier(string memberId, int operationIndex = 0);

        /// <summary>
        /// List Member&#39;s Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve member tiers using the loyalty card ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTiersListResponseBody</returns>
        ApiResponse<LoyaltiesMembersTiersListResponseBody> ListMemberLoyaltyTierWithHttpInfo(string memberId, int operationIndex = 0);
        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPendingPointsListResponseBody</returns>
        LoyaltiesMembersPendingPointsListResponseBody ListMemberPendingPoints(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPendingPointsListResponseBody</returns>
        ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPointsWithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPendingPointsListResponseBody</returns>
        LoyaltiesMembersPendingPointsListResponseBody ListMemberPendingPoints1(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPendingPointsListResponseBody</returns>
        ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPoints1WithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Member Rewards
        /// </summary>
        /// <remarks>
        /// Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersRewardsListResponseBody</returns>
        LoyaltiesMembersRewardsListResponseBody ListMemberRewards(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Member Rewards
        /// </summary>
        /// <remarks>
        /// Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersRewardsListResponseBody</returns>
        ApiResponse<LoyaltiesMembersRewardsListResponseBody> ListMemberRewardsWithHttpInfo(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List Members
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesListMembersResponseBody</returns>
        LoyaltiesListMembersResponseBody ListMembers(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0);

        /// <summary>
        /// List Members
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesListMembersResponseBody</returns>
        ApiResponse<LoyaltiesListMembersResponseBody> ListMembersWithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0);
        /// <summary>
        /// List Loyalty Card Point Expiration
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPointsExpirationListResponseBody</returns>
        LoyaltiesMembersPointsExpirationListResponseBody ListPointsExpiration(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);

        /// <summary>
        /// List Loyalty Card Point Expiration
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPointsExpirationListResponseBody</returns>
        ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> ListPointsExpirationWithHttpInfo(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0);
        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardAssignmentsListResponseBody</returns>
        LoyaltiesRewardAssignmentsListResponseBody ListRewardAssignments1(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardAssignmentsListResponseBody</returns>
        ApiResponse<LoyaltiesRewardAssignmentsListResponseBody> ListRewardAssignments1WithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0);
        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns active rewards from a given loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsListAssignmentsResponseBody</returns>
        LoyaltiesRewardsListAssignmentsResponseBody ListRewardAssignments2(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0);

        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns active rewards from a given loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsListAssignmentsResponseBody</returns>
        ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody> ListRewardAssignments2WithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0);
        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        LoyaltiesMembersRedemptionRedeemResponseBody RedeemReward(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0);

        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemRewardWithHttpInfo(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0);
        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        /// Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        LoyaltiesMembersRedemptionRedeemResponseBody RedeemReward1(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0);

        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        /// Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemReward1WithHttpInfo(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0);
        /// <summary>
        /// Transfer Loyalty Points
        /// </summary>
        /// <remarks>
        /// Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransfersCreateResponseBody</returns>
        LoyaltiesMembersTransfersCreateResponseBody TransferPoints(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0);

        /// <summary>
        /// Transfer Loyalty Points
        /// </summary>
        /// <remarks>
        /// Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransfersCreateResponseBody</returns>
        ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> TransferPointsWithHttpInfo(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0);
        /// <summary>
        /// Update Earning Rule
        /// </summary>
        /// <remarks>
        /// Update an earning rule definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesUpdateResponseBody</returns>
        LoyaltiesEarningRulesUpdateResponseBody UpdateEarningRule(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Earning Rule
        /// </summary>
        /// <remarks>
        /// Update an earning rule definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesUpdateResponseBody</returns>
        ApiResponse<LoyaltiesEarningRulesUpdateResponseBody> UpdateEarningRuleWithHttpInfo(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersBalanceUpdateResponseBody</returns>
        LoyaltiesMembersBalanceUpdateResponseBody UpdateLoyaltyCardBalance(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalanceWithHttpInfo(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersBalanceUpdateResponseBody</returns>
        LoyaltiesMembersBalanceUpdateResponseBody UpdateLoyaltyCardBalance1(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0);

        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalance1WithHttpInfo(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesUpdateCampaignResponseBody</returns>
        LoyaltiesUpdateCampaignResponseBody UpdateLoyaltyProgram(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesUpdateCampaignResponseBody</returns>
        ApiResponse<LoyaltiesUpdateCampaignResponseBody> UpdateLoyaltyProgramWithHttpInfo(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0);
        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsUpdateAssignmentResponseBody</returns>
        LoyaltiesRewardsUpdateAssignmentResponseBody UpdateRewardAssignment1(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0);

        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsUpdateAssignmentResponseBody</returns>
        ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody> UpdateRewardAssignment1WithHttpInfo(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoyaltiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPendingPointsActivateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersPendingPointsActivateResponseBody> ActivateMemberPendingPointsAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Activate Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPendingPointsActivateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody>> ActivateMemberPendingPointsWithHttpInfoAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Add Member
        /// </summary>
        /// <remarks>
        /// This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersCreateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersCreateResponseBody> AddMemberAsync(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Member
        /// </summary>
        /// <remarks>
        /// This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersCreateResponseBody>> AddMemberWithHttpInfoAsync(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelMemberPendingPointsAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelMemberPendingPointsWithHttpInfoAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Earning Rule
        /// </summary>
        /// <remarks>
        /// Create earning rules for a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;</returns>
        System.Threading.Tasks.Task<List<LoyaltiesEarningRulesCreateResponseBody>> CreateEarningRuleAsync(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Earning Rule
        /// </summary>
        /// <remarks>
        /// Create earning rules for a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>>> CreateEarningRuleWithHttpInfoAsync(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create loyalty tiers
        /// </summary>
        /// <remarks>
        /// Creates loyalty tiers for desired campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LoyaltyTier&gt;</returns>
        System.Threading.Tasks.Task<List<LoyaltyTier>> CreateInBulkLoyaltyTiersAsync(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create loyalty tiers
        /// </summary>
        /// <remarks>
        /// Creates loyalty tiers for desired campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LoyaltyTier&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LoyaltyTier>>> CreateInBulkLoyaltyTiersWithHttpInfoAsync(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesCreateCampaignResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesCreateCampaignResponseBody> CreateLoyaltyProgramAsync(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesCreateCampaignResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesCreateCampaignResponseBody>> CreateLoyaltyProgramWithHttpInfoAsync(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Export Loyalty Campaign Point Expiration
        /// </summary>
        /// <remarks>
        /// Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesPointsExpirationExportCreateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesPointsExpirationExportCreateResponseBody> CreatePointsExpirationExportAsync(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Loyalty Campaign Point Expiration
        /// </summary>
        /// <remarks>
        /// Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesPointsExpirationExportCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody>> CreatePointsExpirationExportWithHttpInfoAsync(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Add rewards to a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsCreateAssignmentResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesRewardsCreateAssignmentResponseBody> CreateRewardAssignment1Async(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Reward Assignment
        /// </summary>
        /// <remarks>
        /// Add rewards to a loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsCreateAssignmentResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody>> CreateRewardAssignment1WithHttpInfoAsync(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Earning Rule
        /// </summary>
        /// <remarks>
        /// This method deletes an earning rule for a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Earning Rule
        /// </summary>
        /// <remarks>
        /// This method deletes an earning rule for a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesDeleteResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesDeleteResponseBody> DeleteLoyaltyProgramAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesDeleteResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesDeleteResponseBody>> DeleteLoyaltyProgramWithHttpInfoAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRewardAssignment1Async(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Reward Assignment
        /// </summary>
        /// <remarks>
        /// This method deletes a reward assignment for a particular loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRewardAssignment1WithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Disable Earning Rule
        /// </summary>
        /// <remarks>
        /// Disable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesDisableResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesEarningRulesDisableResponseBody> DisableEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Disable Earning Rule
        /// </summary>
        /// <remarks>
        /// Disable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesDisableResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesEarningRulesDisableResponseBody>> DisableEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Enable Earning Rule
        /// </summary>
        /// <remarks>
        /// Enable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesEnableResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesEarningRulesEnableResponseBody> EnableEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Enable Earning Rule
        /// </summary>
        /// <remarks>
        /// Enable an earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesEnableResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesEarningRulesEnableResponseBody>> EnableEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Export Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsTransactionsExportCreateResponseBody</returns>
        System.Threading.Tasks.Task<CampaignsTransactionsExportCreateResponseBody> ExportLoyaltyCampaignTransactionsAsync(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsTransactionsExportCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignsTransactionsExportCreateResponseBody>> ExportLoyaltyCampaignTransactionsWithHttpInfoAsync(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactionsAsync(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsExportCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody>> ExportLoyaltyCardTransactionsWithHttpInfoAsync(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactions1Async(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Export Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Export transactions that are associated with point movements on a loyalty card.   
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsExportCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody>> ExportLoyaltyCardTransactions1WithHttpInfoAsync(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Earning Rule
        /// </summary>
        /// <remarks>
        /// Retrieves an earning rule assigned to a campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesGetResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesEarningRulesGetResponseBody> GetEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Earning Rule
        /// </summary>
        /// <remarks>
        /// Retrieves an earning rule assigned to a campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesEarningRulesGetResponseBody>> GetEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Retrieve a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesGetCampaignResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesGetCampaignResponseBody> GetLoyaltyProgramAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Retrieve a specific loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesGetCampaignResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesGetCampaignResponseBody>> GetLoyaltyProgramWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Loyalty Tier
        /// </summary>
        /// <remarks>
        /// Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersGetResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesTiersGetResponseBody> GetLoyaltyTierAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Loyalty Tier
        /// </summary>
        /// <remarks>
        /// Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesTiersGetResponseBody>> GetLoyaltyTierWithHttpInfoAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersGetResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersGetResponseBody> GetMemberAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersGetResponseBody>> GetMemberWithHttpInfoAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersGetResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersGetResponseBody> GetMember1Async(string campaignId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Member
        /// </summary>
        /// <remarks>
        /// Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersGetResponseBody>> GetMember1WithHttpInfoAsync(string campaignId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardAssignmentsGetResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesRewardAssignmentsGetResponseBody> GetRewardAssignment1Async(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardAssignmentsGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody>> GetRewardAssignment1WithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsGetResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesRewardsGetResponseBody> GetRewardAssignment2Async(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Reward Assignment
        /// </summary>
        /// <remarks>
        /// Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesRewardsGetResponseBody>> GetRewardAssignment2WithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get Reward Details
        /// </summary>
        /// <remarks>
        /// Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardAssignmentsRewardGetResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesRewardAssignmentsRewardGetResponseBody> GetRewardDetailsAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get Reward Details
        /// </summary>
        /// <remarks>
        /// Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardAssignmentsRewardGetResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody>> GetRewardDetailsWithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Campaign Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesPendingPointsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesPendingPointsListResponseBody> ListCampaignPendingPointsAsync(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Campaign Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesPendingPointsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesPendingPointsListResponseBody>> ListCampaignPendingPointsWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Earning Rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all earning rules within a given campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesEarningRulesListResponseBody> ListEarningRulesAsync(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Earning Rules
        /// </summary>
        /// <remarks>
        /// Returns a list of all earning rules within a given campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesEarningRulesListResponseBody>> ListEarningRulesWithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTransactionsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesTransactionsListResponseBody> ListLoyaltyCampaignTransactionsAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Campaign Transactions
        /// </summary>
        /// <remarks>
        /// Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTransactionsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesTransactionsListResponseBody>> ListLoyaltyCampaignTransactionsWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactionsAsync(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersTransactionsListResponseBody>> ListLoyaltyCardTransactionsWithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactions1Async(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Card Transactions
        /// </summary>
        /// <remarks>
        /// Retrieve transaction data related to point movements for a specific loyalty card.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersTransactionsListResponseBody>> ListLoyaltyCardTransactions1WithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesListCampaignsResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesListCampaignsResponseBody> ListLoyaltyProgramsAsync(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty campaigns.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesListCampaignsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesListCampaignsResponseBody>> ListLoyaltyProgramsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Tier Earning Rules
        /// </summary>
        /// <remarks>
        /// Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersEarningRulesListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesTiersEarningRulesListResponseBody> ListLoyaltyTierEarningRulesAsync(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Tier Earning Rules
        /// </summary>
        /// <remarks>
        /// Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersEarningRulesListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesTiersEarningRulesListResponseBody>> ListLoyaltyTierEarningRulesWithHttpInfoAsync(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Tier Rewards
        /// </summary>
        /// <remarks>
        /// Get available rewards for a given tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersRewardsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesTiersRewardsListResponseBody> ListLoyaltyTierRewardsAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Tier Rewards
        /// </summary>
        /// <remarks>
        /// Get available rewards for a given tier.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersRewardsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesTiersRewardsListResponseBody>> ListLoyaltyTierRewardsWithHttpInfoAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesTiersListResponseBody> ListLoyaltyTiersAsync(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesTiersListResponseBody>> ListLoyaltyTiersWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMemberActivityListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMemberActivityListResponseBody> ListMemberActivityAsync(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMemberActivityListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMemberActivityListResponseBody>> ListMemberActivityWithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        /// Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMemberActivityListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMemberActivityListResponseBody> ListMemberActivity1Async(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Member Activity
        /// </summary>
        /// <remarks>
        /// Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMemberActivityListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMemberActivityListResponseBody>> ListMemberActivity1WithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Member&#39;s Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve member tiers using the loyalty card ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTiersListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersTiersListResponseBody> ListMemberLoyaltyTierAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Member&#39;s Loyalty Tiers
        /// </summary>
        /// <remarks>
        /// Retrieve member tiers using the loyalty card ID.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTiersListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersTiersListResponseBody>> ListMemberLoyaltyTierWithHttpInfoAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPendingPointsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPointsAsync(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPendingPointsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersPendingPointsListResponseBody>> ListMemberPendingPointsWithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPendingPointsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPoints1Async(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Member Pending Points
        /// </summary>
        /// <remarks>
        /// &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPendingPointsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersPendingPointsListResponseBody>> ListMemberPendingPoints1WithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Member Rewards
        /// </summary>
        /// <remarks>
        /// Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersRewardsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersRewardsListResponseBody> ListMemberRewardsAsync(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Member Rewards
        /// </summary>
        /// <remarks>
        /// Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersRewardsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersRewardsListResponseBody>> ListMemberRewardsWithHttpInfoAsync(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Members
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesListMembersResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesListMembersResponseBody> ListMembersAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Members
        /// </summary>
        /// <remarks>
        /// Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesListMembersResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesListMembersResponseBody>> ListMembersWithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Loyalty Card Point Expiration
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPointsExpirationListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersPointsExpirationListResponseBody> ListPointsExpirationAsync(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Loyalty Card Point Expiration
        /// </summary>
        /// <remarks>
        /// Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPointsExpirationListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody>> ListPointsExpirationWithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardAssignmentsListResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesRewardAssignmentsListResponseBody> ListRewardAssignments1Async(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardAssignmentsListResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesRewardAssignmentsListResponseBody>> ListRewardAssignments1WithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns active rewards from a given loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsListAssignmentsResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesRewardsListAssignmentsResponseBody> ListRewardAssignments2Async(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Reward Assignments
        /// </summary>
        /// <remarks>
        /// Returns active rewards from a given loyalty campaign.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsListAssignmentsResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody>> ListRewardAssignments2WithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemRewardAsync(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        ///   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersRedemptionRedeemResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody>> RedeemRewardWithHttpInfoAsync(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        /// Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemReward1Async(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Redeem Reward
        /// </summary>
        /// <remarks>
        /// Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersRedemptionRedeemResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody>> RedeemReward1WithHttpInfoAsync(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Transfer Loyalty Points
        /// </summary>
        /// <remarks>
        /// Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransfersCreateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersTransfersCreateResponseBody> TransferPointsAsync(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Transfer Loyalty Points
        /// </summary>
        /// <remarks>
        /// Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransfersCreateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersTransfersCreateResponseBody>> TransferPointsWithHttpInfoAsync(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Earning Rule
        /// </summary>
        /// <remarks>
        /// Update an earning rule definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesUpdateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesEarningRulesUpdateResponseBody> UpdateEarningRuleAsync(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Earning Rule
        /// </summary>
        /// <remarks>
        /// Update an earning rule definition.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesEarningRulesUpdateResponseBody>> UpdateEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalanceAsync(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersBalanceUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody>> UpdateLoyaltyCardBalanceWithHttpInfoAsync(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalance1Async(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Adjust Loyalty Card Balance
        /// </summary>
        /// <remarks>
        /// This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersBalanceUpdateResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody>> UpdateLoyaltyCardBalance1WithHttpInfoAsync(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesUpdateCampaignResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesUpdateCampaignResponseBody> UpdateLoyaltyProgramAsync(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Loyalty Campaign
        /// </summary>
        /// <remarks>
        /// Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesUpdateCampaignResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesUpdateCampaignResponseBody>> UpdateLoyaltyProgramWithHttpInfoAsync(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsUpdateAssignmentResponseBody</returns>
        System.Threading.Tasks.Task<LoyaltiesRewardsUpdateAssignmentResponseBody> UpdateRewardAssignment1Async(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update Reward Assignment
        /// </summary>
        /// <remarks>
        /// Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </remarks>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsUpdateAssignmentResponseBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody>> UpdateRewardAssignment1WithHttpInfoAsync(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILoyaltiesApi : ILoyaltiesApiSync, ILoyaltiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LoyaltiesApi : ILoyaltiesApi
    {
        private Voucherify.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoyaltiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LoyaltiesApi(string basePath)
        {
            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                new Voucherify.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LoyaltiesApi(Voucherify.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Voucherify.Client.Configuration.MergeConfigurations(
                Voucherify.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Voucherify.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LoyaltiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LoyaltiesApi(Voucherify.Client.ISynchronousClient client, Voucherify.Client.IAsynchronousClient asyncClient, Voucherify.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Voucherify.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Voucherify.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Voucherify.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Voucherify.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Voucherify.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Activate Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPendingPointsActivateResponseBody</returns>
        public LoyaltiesMembersPendingPointsActivateResponseBody ActivateMemberPendingPoints(string memberId, string pendingPointsId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody> localVarResponse = ActivateMemberPendingPointsWithHttpInfo(memberId, pendingPointsId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPendingPointsActivateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody> ActivateMemberPendingPointsWithHttpInfo(string memberId, string pendingPointsId, int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ActivateMemberPendingPoints");
            }

            // verify the required parameter 'pendingPointsId' is set
            if (pendingPointsId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'pendingPointsId' when calling LoyaltiesApi->ActivateMemberPendingPoints");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pendingPointsId", Voucherify.Client.ClientUtils.ParameterToString(pendingPointsId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.ActivateMemberPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersPendingPointsActivateResponseBody>("/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/activate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateMemberPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPendingPointsActivateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersPendingPointsActivateResponseBody> ActivateMemberPendingPointsAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody> localVarResponse = await ActivateMemberPendingPointsWithHttpInfoAsync(memberId, pendingPointsId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Activate manually the pending points and add them to the loyalty card. The pending points are determined by the pending point ID. Once activated, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPendingPointsActivateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsActivateResponseBody>> ActivateMemberPendingPointsWithHttpInfoAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ActivateMemberPendingPoints");
            }

            // verify the required parameter 'pendingPointsId' is set
            if (pendingPointsId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'pendingPointsId' when calling LoyaltiesApi->ActivateMemberPendingPoints");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pendingPointsId", Voucherify.Client.ClientUtils.ParameterToString(pendingPointsId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.ActivateMemberPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersPendingPointsActivateResponseBody>("/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/activate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ActivateMemberPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Member This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersCreateResponseBody</returns>
        public LoyaltiesMembersCreateResponseBody AddMember(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersCreateResponseBody> localVarResponse = AddMemberWithHttpInfo(campaignId, loyaltiesMembersCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Member This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersCreateResponseBody> AddMemberWithHttpInfo(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->AddMember");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.AddMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersCreateResponseBody>("/v1/loyalties/{campaignId}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Member This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersCreateResponseBody> AddMemberAsync(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersCreateResponseBody> localVarResponse = await AddMemberWithHttpInfoAsync(campaignId, loyaltiesMembersCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Member This method assigns a loyalty card to a customer. It selects a loyalty card suitable for publication, adds a publish entry, and returns the published voucher.   A voucher is suitable for publication when its active and hasnt been published yet.    üìò Auto-update campaign  In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="loyaltiesMembersCreateRequestBody">Provide details to whom the loyalty card should be assigned.     You can choose to either specify the exact loyalty card code that you want to publish from existin (non-assigned) codes, or choose not to specify a voucher code. If you choose not to specify a code in the request paylaod, then the system will choose the next available voucher code available to be assigned to a customer.   You can also include metadata in the request payload. This metadata will be assigned to the publication object, but will not be returned in the response to this endpoint. To see of publications (assignments of particular codes to customers) and publication metadata, use the List Publications endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersCreateResponseBody>> AddMemberWithHttpInfoAsync(string campaignId, LoyaltiesMembersCreateRequestBody loyaltiesMembersCreateRequestBody = default(LoyaltiesMembersCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->AddMember");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.AddMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersCreateResponseBody>("/v1/loyalties/{campaignId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelMemberPendingPoints(string memberId, string pendingPointsId, int operationIndex = 0)
        {
            CancelMemberPendingPointsWithHttpInfo(memberId, pendingPointsId);
        }

        /// <summary>
        /// Cancel Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> CancelMemberPendingPointsWithHttpInfo(string memberId, string pendingPointsId, int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->CancelMemberPendingPoints");
            }

            // verify the required parameter 'pendingPointsId' is set
            if (pendingPointsId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'pendingPointsId' when calling LoyaltiesApi->CancelMemberPendingPoints");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pendingPointsId", Voucherify.Client.ClientUtils.ParameterToString(pendingPointsId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.CancelMemberPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMemberPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelMemberPendingPointsAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await CancelMemberPendingPointsWithHttpInfoAsync(memberId, pendingPointsId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Cancel manually the pending points for the loyalty card. The pending points are determined by the pending point ID. Once canceled, the pending point entry with that ID is not listed by the endpoints: List member (with campaign ID, without campaign ID), List campaign pending points. This **POST** method does not require a request body and it returns an empty, 204, response. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="pendingPointsId">Unique pending point identifier, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> CancelMemberPendingPointsWithHttpInfoAsync(string memberId, string pendingPointsId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->CancelMemberPendingPoints");
            }

            // verify the required parameter 'pendingPointsId' is set
            if (pendingPointsId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'pendingPointsId' when calling LoyaltiesApi->CancelMemberPendingPoints");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pendingPointsId", Voucherify.Client.ClientUtils.ParameterToString(pendingPointsId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.CancelMemberPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/loyalties/members/{memberId}/pending-points/{pendingPointsId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelMemberPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Earning Rule Create earning rules for a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;</returns>
        public List<LoyaltiesEarningRulesCreateResponseBody> CreateEarningRule(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>> localVarResponse = CreateEarningRuleWithHttpInfo(campaignId, loyaltiesEarningRulesCreateRequestBodyItem);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Earning Rule Create earning rules for a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;</returns>
        public Voucherify.Client.ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>> CreateEarningRuleWithHttpInfo(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreateEarningRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesEarningRulesCreateRequestBodyItem;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<LoyaltiesEarningRulesCreateResponseBody>>("/v1/loyalties/{campaignId}/earning-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Earning Rule Create earning rules for a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;</returns>
        public async System.Threading.Tasks.Task<List<LoyaltiesEarningRulesCreateResponseBody>> CreateEarningRuleAsync(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>> localVarResponse = await CreateEarningRuleWithHttpInfoAsync(campaignId, loyaltiesEarningRulesCreateRequestBodyItem, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Earning Rule Create earning rules for a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesEarningRulesCreateRequestBodyItem">Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are event and loyalty. Additionally, if you choose to add a validity_timeframe, you must include a start_date. Furthermore, an earning rule event type:   - customer.segment.entered requires a segment object - a custom event requires a custom_event object - a customer.loyalty.tier.joined, customer.loyalty.tier.left, customer.loyalty.tier.upgraded, customer.loyalty.tier.downgraded, customer.loyalty.tier.prolonged requires a loyalty_tier object (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LoyaltiesEarningRulesCreateResponseBody&gt;)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<List<LoyaltiesEarningRulesCreateResponseBody>>> CreateEarningRuleWithHttpInfoAsync(string campaignId, List<LoyaltiesEarningRulesCreateRequestBodyItem> loyaltiesEarningRulesCreateRequestBodyItem = default(List<LoyaltiesEarningRulesCreateRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreateEarningRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesEarningRulesCreateRequestBodyItem;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<LoyaltiesEarningRulesCreateResponseBody>>("/v1/loyalties/{campaignId}/earning-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create loyalty tiers Creates loyalty tiers for desired campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;LoyaltyTier&gt;</returns>
        public List<LoyaltyTier> CreateInBulkLoyaltyTiers(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<List<LoyaltyTier>> localVarResponse = CreateInBulkLoyaltyTiersWithHttpInfo(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create loyalty tiers Creates loyalty tiers for desired campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;LoyaltyTier&gt;</returns>
        public Voucherify.Client.ApiResponse<List<LoyaltyTier>> CreateInBulkLoyaltyTiersWithHttpInfo(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreateInBulkLoyaltyTiers");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesTiersCreateInBulkRequestBodyItem;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateInBulkLoyaltyTiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<LoyaltyTier>>("/v1/loyalties/{campaignId}/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInBulkLoyaltyTiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create loyalty tiers Creates loyalty tiers for desired campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;LoyaltyTier&gt;</returns>
        public async System.Threading.Tasks.Task<List<LoyaltyTier>> CreateInBulkLoyaltyTiersAsync(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<List<LoyaltyTier>> localVarResponse = await CreateInBulkLoyaltyTiersWithHttpInfoAsync(campaignId, loyaltiesTiersCreateInBulkRequestBodyItem, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create loyalty tiers Creates loyalty tiers for desired campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltiesTiersCreateInBulkRequestBodyItem">Provide tier definitions you want to add to existing loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;LoyaltyTier&gt;)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<List<LoyaltyTier>>> CreateInBulkLoyaltyTiersWithHttpInfoAsync(string campaignId, List<LoyaltiesTiersCreateInBulkRequestBodyItem> loyaltiesTiersCreateInBulkRequestBodyItem = default(List<LoyaltiesTiersCreateInBulkRequestBodyItem>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreateInBulkLoyaltyTiers");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesTiersCreateInBulkRequestBodyItem;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateInBulkLoyaltyTiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<LoyaltyTier>>("/v1/loyalties/{campaignId}/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInBulkLoyaltyTiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Loyalty Campaign Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesCreateCampaignResponseBody</returns>
        public LoyaltiesCreateCampaignResponseBody CreateLoyaltyProgram(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesCreateCampaignResponseBody> localVarResponse = CreateLoyaltyProgramWithHttpInfo(loyaltiesCreateCampaignRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Loyalty Campaign Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesCreateCampaignResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesCreateCampaignResponseBody> CreateLoyaltyProgramWithHttpInfo(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loyaltiesCreateCampaignRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesCreateCampaignResponseBody>("/v1/loyalties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Loyalty Campaign Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesCreateCampaignResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesCreateCampaignResponseBody> CreateLoyaltyProgramAsync(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesCreateCampaignResponseBody> localVarResponse = await CreateLoyaltyProgramWithHttpInfoAsync(loyaltiesCreateCampaignRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Loyalty Campaign Creates a batch of loyalty cards aggregated in a single loyalty campaign. It also allows you to define a custom codes pattern.    üìò Global uniqueness  All codes are unique across the whole project. Voucherify wont allow to generate the same codes in any of your campaigns.  üöß Asyncronous action!  This is an asynchronous action, you cant read or modify a newly created campaign until the code generation is completed. See creation_status field in the loyalty campaign object description.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loyaltiesCreateCampaignRequestBody">Specify the loyalty campaign details. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesCreateCampaignResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesCreateCampaignResponseBody>> CreateLoyaltyProgramWithHttpInfoAsync(LoyaltiesCreateCampaignRequestBody loyaltiesCreateCampaignRequestBody = default(LoyaltiesCreateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = loyaltiesCreateCampaignRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesCreateCampaignResponseBody>("/v1/loyalties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Campaign Point Expiration Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesPointsExpirationExportCreateResponseBody</returns>
        public LoyaltiesPointsExpirationExportCreateResponseBody CreatePointsExpirationExport(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody> localVarResponse = CreatePointsExpirationExportWithHttpInfo(campaignId, loyaltiesPointsExpirationExportCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Campaign Point Expiration Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesPointsExpirationExportCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody> CreatePointsExpirationExportWithHttpInfo(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreatePointsExpirationExport");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesPointsExpirationExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreatePointsExpirationExport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesPointsExpirationExportCreateResponseBody>("/v1/loyalties/{campaignId}/points-expiration/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePointsExpirationExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Campaign Point Expiration Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesPointsExpirationExportCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesPointsExpirationExportCreateResponseBody> CreatePointsExpirationExportAsync(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody> localVarResponse = await CreatePointsExpirationExportWithHttpInfoAsync(campaignId, loyaltiesPointsExpirationExportCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Campaign Point Expiration Schedule the generation of a points expiration CSV file for a particular campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltiesPointsExpirationExportCreateRequestBody">Specify the data filters, types of data to return and order in which the results should be returned. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesPointsExpirationExportCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesPointsExpirationExportCreateResponseBody>> CreatePointsExpirationExportWithHttpInfoAsync(string campaignId, LoyaltiesPointsExpirationExportCreateRequestBody loyaltiesPointsExpirationExportCreateRequestBody = default(LoyaltiesPointsExpirationExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreatePointsExpirationExport");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesPointsExpirationExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreatePointsExpirationExport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesPointsExpirationExportCreateResponseBody>("/v1/loyalties/{campaignId}/points-expiration/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePointsExpirationExport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reward Assignment Add rewards to a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsCreateAssignmentResponseBody</returns>
        public LoyaltiesRewardsCreateAssignmentResponseBody CreateRewardAssignment1(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody> localVarResponse = CreateRewardAssignment1WithHttpInfo(campaignId, loyaltiesRewardsCreateAssignmentItemRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reward Assignment Add rewards to a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsCreateAssignmentResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody> CreateRewardAssignment1WithHttpInfo(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreateRewardAssignment1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesRewardsCreateAssignmentItemRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesRewardsCreateAssignmentResponseBody>("/v1/loyalties/{campaignId}/rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reward Assignment Add rewards to a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsCreateAssignmentResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesRewardsCreateAssignmentResponseBody> CreateRewardAssignment1Async(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody> localVarResponse = await CreateRewardAssignment1WithHttpInfoAsync(campaignId, loyaltiesRewardsCreateAssignmentItemRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reward Assignment Add rewards to a loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesRewardsCreateAssignmentItemRequestBody">Define the cost of the rewards in loyalty points. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsCreateAssignmentResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesRewardsCreateAssignmentResponseBody>> CreateRewardAssignment1WithHttpInfoAsync(string campaignId, List<LoyaltiesRewardsCreateAssignmentItemRequestBody> loyaltiesRewardsCreateAssignmentItemRequestBody = default(List<LoyaltiesRewardsCreateAssignmentItemRequestBody>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->CreateRewardAssignment1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesRewardsCreateAssignmentItemRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.CreateRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesRewardsCreateAssignmentResponseBody>("/v1/loyalties/{campaignId}/rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Earning Rule This method deletes an earning rule for a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteEarningRule(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            DeleteEarningRuleWithHttpInfo(campaignId, earningRuleId);
        }

        /// <summary>
        /// Delete Earning Rule This method deletes an earning rule for a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DeleteEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->DeleteEarningRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.DeleteEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Earning Rule This method deletes an earning rule for a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteEarningRuleWithHttpInfoAsync(campaignId, earningRuleId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Earning Rule This method deletes an earning rule for a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DeleteEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->DeleteEarningRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.DeleteEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Loyalty Campaign Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesDeleteResponseBody</returns>
        public LoyaltiesDeleteResponseBody DeleteLoyaltyProgram(string campaignId, bool? force = default(bool?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesDeleteResponseBody> localVarResponse = DeleteLoyaltyProgramWithHttpInfo(campaignId, force);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Loyalty Campaign Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesDeleteResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesDeleteResponseBody> DeleteLoyaltyProgramWithHttpInfo(string campaignId, bool? force = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DeleteLoyaltyProgram");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.DeleteLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<LoyaltiesDeleteResponseBody>("/v1/loyalties/{campaignId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Loyalty Campaign Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesDeleteResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesDeleteResponseBody> DeleteLoyaltyProgramAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesDeleteResponseBody> localVarResponse = await DeleteLoyaltyProgramWithHttpInfoAsync(campaignId, force, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Loyalty Campaign Deletes a loyalty campaign and all related loyalty cards. This action cannot be undone. Also, it immediately removes any redemptions on loyalty cards. If the force parameter is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="force">If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesDeleteResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesDeleteResponseBody>> DeleteLoyaltyProgramWithHttpInfoAsync(string campaignId, bool? force = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DeleteLoyaltyProgram");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (force != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "force", force));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.DeleteLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<LoyaltiesDeleteResponseBody>("/v1/loyalties/{campaignId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRewardAssignment1(string campaignId, string assignmentId, int operationIndex = 0)
        {
            DeleteRewardAssignment1WithHttpInfo(campaignId, assignmentId);
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Voucherify.Client.ApiResponse<Object> DeleteRewardAssignment1WithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DeleteRewardAssignment1");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->DeleteRewardAssignment1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.DeleteRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/loyalties/{campaignId}/rewards/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRewardAssignment1Async(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteRewardAssignment1WithHttpInfoAsync(campaignId, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Reward Assignment This method deletes a reward assignment for a particular loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<Object>> DeleteRewardAssignment1WithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DeleteRewardAssignment1");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->DeleteRewardAssignment1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.DeleteRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/loyalties/{campaignId}/rewards/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Earning Rule Disable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesDisableResponseBody</returns>
        public LoyaltiesEarningRulesDisableResponseBody DisableEarningRule(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesDisableResponseBody> localVarResponse = DisableEarningRuleWithHttpInfo(campaignId, earningRuleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Earning Rule Disable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesDisableResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesEarningRulesDisableResponseBody> DisableEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DisableEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->DisableEarningRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.DisableEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesEarningRulesDisableResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Disable Earning Rule Disable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesDisableResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesEarningRulesDisableResponseBody> DisableEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesDisableResponseBody> localVarResponse = await DisableEarningRuleWithHttpInfoAsync(campaignId, earningRuleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Disable Earning Rule Disable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesDisableResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesEarningRulesDisableResponseBody>> DisableEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->DisableEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->DisableEarningRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.DisableEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesEarningRulesDisableResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DisableEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Earning Rule Enable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesEnableResponseBody</returns>
        public LoyaltiesEarningRulesEnableResponseBody EnableEarningRule(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesEnableResponseBody> localVarResponse = EnableEarningRuleWithHttpInfo(campaignId, earningRuleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Earning Rule Enable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesEnableResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesEarningRulesEnableResponseBody> EnableEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->EnableEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->EnableEarningRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.EnableEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesEarningRulesEnableResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enable Earning Rule Enable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesEnableResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesEarningRulesEnableResponseBody> EnableEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesEnableResponseBody> localVarResponse = await EnableEarningRuleWithHttpInfoAsync(campaignId, earningRuleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enable Earning Rule Enable an earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="earningRuleId">Unique identifier of an earning rule, assigned by Voucherify.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesEnableResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesEarningRulesEnableResponseBody>> EnableEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->EnableEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->EnableEarningRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.EnableEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesEarningRulesEnableResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnableEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CampaignsTransactionsExportCreateResponseBody</returns>
        public CampaignsTransactionsExportCreateResponseBody ExportLoyaltyCampaignTransactions(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody> localVarResponse = ExportLoyaltyCampaignTransactionsWithHttpInfo(campaignId, loyaltiesTransactionsExportCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CampaignsTransactionsExportCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody> ExportLoyaltyCampaignTransactionsWithHttpInfo(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ExportLoyaltyCampaignTransactions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.ExportLoyaltyCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CampaignsTransactionsExportCreateResponseBody>("/v1/loyalties/{campaignId}/transactions/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CampaignsTransactionsExportCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<CampaignsTransactionsExportCreateResponseBody> ExportLoyaltyCampaignTransactionsAsync(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody> localVarResponse = await ExportLoyaltyCampaignTransactionsWithHttpInfoAsync(campaignId, loyaltiesTransactionsExportCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Campaign Transactions Export transactions is an asynchronous process that generates a CSV file with the data about or point movements on all loyalty cards in a given campaign. To export transactions: 1. In the export request, use parameters to select which fields will be exported, in what order, and which data will be filtered. 2. Use the returned id to track the export status with the GET Export method. 3. In the GET Export method, when the returned status field has the DONE value, the export file has been generated. 4. Use the URL in the result property to download the file. You must be logged to your Voucherify account on a given cluster in the browser to be able to download the file. An export request will almost always result in a single file being generated by the system. However, when the data volume is large, the system may split the results into multiple files. An example export file can look as follows:    üëç Export Campaign Transactions  This method works in the same way the POST Export Campaign Transactions does, but it is limited to loyalty campaigns only. The POST Export Campaign Transactions method can also export gift card campaign transactions.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="loyaltiesTransactionsExportCreateRequestBody">Specify the parameters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CampaignsTransactionsExportCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<CampaignsTransactionsExportCreateResponseBody>> ExportLoyaltyCampaignTransactionsWithHttpInfoAsync(string campaignId, LoyaltiesTransactionsExportCreateRequestBody loyaltiesTransactionsExportCreateRequestBody = default(LoyaltiesTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ExportLoyaltyCampaignTransactions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.ExportLoyaltyCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CampaignsTransactionsExportCreateResponseBody>("/v1/loyalties/{campaignId}/transactions/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        public LoyaltiesMembersTransactionsExportCreateResponseBody ExportLoyaltyCardTransactions(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResponse = ExportLoyaltyCardTransactionsWithHttpInfo(memberId, loyaltiesMembersTransactionsExportCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactionsWithHttpInfo(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ExportLoyaltyCardTransactions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.ExportLoyaltyCardTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersTransactionsExportCreateResponseBody>("/v1/loyalties/members/{memberId}/transactions/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactionsAsync(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResponse = await ExportLoyaltyCardTransactionsWithHttpInfoAsync(memberId, loyaltiesMembersTransactionsExportCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsExportCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody>> ExportLoyaltyCardTransactionsWithHttpInfoAsync(string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ExportLoyaltyCardTransactions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.ExportLoyaltyCardTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersTransactionsExportCreateResponseBody>("/v1/loyalties/members/{memberId}/transactions/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        public LoyaltiesMembersTransactionsExportCreateResponseBody ExportLoyaltyCardTransactions1(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResponse = ExportLoyaltyCardTransactions1WithHttpInfo(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactions1WithHttpInfo(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ExportLoyaltyCardTransactions1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ExportLoyaltyCardTransactions1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.ExportLoyaltyCardTransactions1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersTransactionsExportCreateResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/transactions/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardTransactions1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsExportCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersTransactionsExportCreateResponseBody> ExportLoyaltyCardTransactions1Async(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody> localVarResponse = await ExportLoyaltyCardTransactions1WithHttpInfoAsync(campaignId, memberId, loyaltiesMembersTransactionsExportCreateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Loyalty Card Transactions Export transactions that are associated with point movements on a loyalty card.   
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to export transaction data for.</param>
        /// <param name="loyaltiesMembersTransactionsExportCreateRequestBody">Specify the parameters and filters for the transaction export. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsExportCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsExportCreateResponseBody>> ExportLoyaltyCardTransactions1WithHttpInfoAsync(string campaignId, string memberId, LoyaltiesMembersTransactionsExportCreateRequestBody loyaltiesMembersTransactionsExportCreateRequestBody = default(LoyaltiesMembersTransactionsExportCreateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ExportLoyaltyCardTransactions1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ExportLoyaltyCardTransactions1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersTransactionsExportCreateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.ExportLoyaltyCardTransactions1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersTransactionsExportCreateResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/transactions/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportLoyaltyCardTransactions1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Earning Rule Retrieves an earning rule assigned to a campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesGetResponseBody</returns>
        public LoyaltiesEarningRulesGetResponseBody GetEarningRule(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesGetResponseBody> localVarResponse = GetEarningRuleWithHttpInfo(campaignId, earningRuleId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Earning Rule Retrieves an earning rule assigned to a campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesEarningRulesGetResponseBody> GetEarningRuleWithHttpInfo(string campaignId, string earningRuleId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->GetEarningRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesEarningRulesGetResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Earning Rule Retrieves an earning rule assigned to a campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesGetResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesEarningRulesGetResponseBody> GetEarningRuleAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesGetResponseBody> localVarResponse = await GetEarningRuleWithHttpInfoAsync(campaignId, earningRuleId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Earning Rule Retrieves an earning rule assigned to a campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesEarningRulesGetResponseBody>> GetEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->GetEarningRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesEarningRulesGetResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Loyalty Campaign Retrieve a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesGetCampaignResponseBody</returns>
        public LoyaltiesGetCampaignResponseBody GetLoyaltyProgram(string campaignId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesGetCampaignResponseBody> localVarResponse = GetLoyaltyProgramWithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loyalty Campaign Retrieve a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesGetCampaignResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesGetCampaignResponseBody> GetLoyaltyProgramWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetLoyaltyProgram");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesGetCampaignResponseBody>("/v1/loyalties/{campaignId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Loyalty Campaign Retrieve a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesGetCampaignResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesGetCampaignResponseBody> GetLoyaltyProgramAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesGetCampaignResponseBody> localVarResponse = await GetLoyaltyProgramWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loyalty Campaign Retrieve a specific loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesGetCampaignResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesGetCampaignResponseBody>> GetLoyaltyProgramWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetLoyaltyProgram");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesGetCampaignResponseBody>("/v1/loyalties/{campaignId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Loyalty Tier Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersGetResponseBody</returns>
        public LoyaltiesTiersGetResponseBody GetLoyaltyTier(string campaignId, string loyaltyTierId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersGetResponseBody> localVarResponse = GetLoyaltyTierWithHttpInfo(campaignId, loyaltyTierId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loyalty Tier Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesTiersGetResponseBody> GetLoyaltyTierWithHttpInfo(string campaignId, string loyaltyTierId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetLoyaltyTier");
            }

            // verify the required parameter 'loyaltyTierId' is set
            if (loyaltyTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'loyaltyTierId' when calling LoyaltiesApi->GetLoyaltyTier");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyTierId", Voucherify.Client.ClientUtils.ParameterToString(loyaltyTierId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetLoyaltyTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesTiersGetResponseBody>("/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Loyalty Tier Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersGetResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesTiersGetResponseBody> GetLoyaltyTierAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersGetResponseBody> localVarResponse = await GetLoyaltyTierWithHttpInfoAsync(campaignId, loyaltyTierId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Loyalty Tier Retrieve a loyalty tier from a loyalty campaign by the loyalty tier ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesTiersGetResponseBody>> GetLoyaltyTierWithHttpInfoAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetLoyaltyTier");
            }

            // verify the required parameter 'loyaltyTierId' is set
            if (loyaltyTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'loyaltyTierId' when calling LoyaltiesApi->GetLoyaltyTier");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyTierId", Voucherify.Client.ClientUtils.ParameterToString(loyaltyTierId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetLoyaltyTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesTiersGetResponseBody>("/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLoyaltyTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersGetResponseBody</returns>
        public LoyaltiesMembersGetResponseBody GetMember(string memberId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody> localVarResponse = GetMemberWithHttpInfo(memberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody> GetMemberWithHttpInfo(string memberId, int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->GetMember");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersGetResponseBody>("/v1/loyalties/members/{memberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersGetResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersGetResponseBody> GetMemberAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody> localVarResponse = await GetMemberWithHttpInfoAsync(memberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Retrieve loyalty card with the given member ID (i.e. voucher code).      üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to retrieve loyalty card details without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody>> GetMemberWithHttpInfoAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->GetMember");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetMember";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersGetResponseBody>("/v1/loyalties/members/{memberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersGetResponseBody</returns>
        public LoyaltiesMembersGetResponseBody GetMember1(string campaignId, string memberId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody> localVarResponse = GetMember1WithHttpInfo(campaignId, memberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody> GetMember1WithHttpInfo(string campaignId, string memberId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetMember1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->GetMember1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetMember1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersGetResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Member Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersGetResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersGetResponseBody> GetMember1Async(string campaignId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody> localVarResponse = await GetMember1WithHttpInfoAsync(campaignId, memberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Member Retrieves the loyalty card with the given member ID (i.e. voucher code).
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique code that identifies the loyalty card.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersGetResponseBody>> GetMember1WithHttpInfoAsync(string campaignId, string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetMember1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->GetMember1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetMember1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersGetResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMember1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardAssignmentsGetResponseBody</returns>
        public LoyaltiesRewardAssignmentsGetResponseBody GetRewardAssignment1(string campaignId, string assignmentId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> localVarResponse = GetRewardAssignment1WithHttpInfo(campaignId, assignmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardAssignmentsGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> GetRewardAssignment1WithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetRewardAssignment1");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->GetRewardAssignment1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesRewardAssignmentsGetResponseBody>("/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardAssignmentsGetResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesRewardAssignmentsGetResponseBody> GetRewardAssignment1Async(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody> localVarResponse = await GetRewardAssignment1WithHttpInfoAsync(campaignId, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardAssignmentsGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsGetResponseBody>> GetRewardAssignment1WithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetRewardAssignment1");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->GetRewardAssignment1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesRewardAssignmentsGetResponseBody>("/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsGetResponseBody</returns>
        public LoyaltiesRewardsGetResponseBody GetRewardAssignment2(string campaignId, string assignmentId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsGetResponseBody> localVarResponse = GetRewardAssignment2WithHttpInfo(campaignId, assignmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesRewardsGetResponseBody> GetRewardAssignment2WithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetRewardAssignment2");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->GetRewardAssignment2");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetRewardAssignment2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesRewardsGetResponseBody>("/v1/loyalties/{campaignId}/rewards/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardAssignment2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsGetResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesRewardsGetResponseBody> GetRewardAssignment2Async(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsGetResponseBody> localVarResponse = await GetRewardAssignment2WithHttpInfoAsync(campaignId, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Assignment Retrieve specific reward assignment.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. 
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesRewardsGetResponseBody>> GetRewardAssignment2WithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetRewardAssignment2");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->GetRewardAssignment2");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetRewardAssignment2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesRewardsGetResponseBody>("/v1/loyalties/{campaignId}/rewards/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardAssignment2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Details Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardAssignmentsRewardGetResponseBody</returns>
        public LoyaltiesRewardAssignmentsRewardGetResponseBody GetRewardDetails(string campaignId, string assignmentId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> localVarResponse = GetRewardDetailsWithHttpInfo(campaignId, assignmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Details Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardAssignmentsRewardGetResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> GetRewardDetailsWithHttpInfo(string campaignId, string assignmentId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetRewardDetails");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->GetRewardDetails");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetRewardDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesRewardAssignmentsRewardGetResponseBody>("/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reward Details Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardAssignmentsRewardGetResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesRewardAssignmentsRewardGetResponseBody> GetRewardDetailsAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody> localVarResponse = await GetRewardDetailsWithHttpInfoAsync(campaignId, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reward Details Get reward details in the context of a loyalty campaign and reward assignment ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">Unique reward assignment ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardAssignmentsRewardGetResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsRewardGetResponseBody>> GetRewardDetailsWithHttpInfoAsync(string campaignId, string assignmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->GetRewardDetails");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->GetRewardDetails");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.GetRewardDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesRewardAssignmentsRewardGetResponseBody>("/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRewardDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaign Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesPendingPointsListResponseBody</returns>
        public LoyaltiesPendingPointsListResponseBody ListCampaignPendingPoints(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesPendingPointsListResponseBody> localVarResponse = ListCampaignPendingPointsWithHttpInfo(campaignId, limit, order, startingAfterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaign Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesPendingPointsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesPendingPointsListResponseBody> ListCampaignPendingPointsWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListCampaignPendingPoints");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListCampaignPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesPendingPointsListResponseBody>("/v1/loyalties/{campaignId}/pending-points", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaign Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesPendingPointsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesPendingPointsListResponseBody> ListCampaignPendingPointsAsync(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesPendingPointsListResponseBody> localVarResponse = await ListCampaignPendingPointsWithHttpInfoAsync(campaignId, limit, order, startingAfterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaign Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to all loyalty cards in a campaign. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesPendingPointsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesPendingPointsListResponseBody>> ListCampaignPendingPointsWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListCampaignPendingPoints");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListCampaignPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesPendingPointsListResponseBody>("/v1/loyalties/{campaignId}/pending-points", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Earning Rules Returns a list of all earning rules within a given campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesListResponseBody</returns>
        public LoyaltiesEarningRulesListResponseBody ListEarningRules(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesListResponseBody> localVarResponse = ListEarningRulesWithHttpInfo(campaignId, limit, page, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Earning Rules Returns a list of all earning rules within a given campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesEarningRulesListResponseBody> ListEarningRulesWithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListEarningRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListEarningRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesEarningRulesListResponseBody>("/v1/loyalties/{campaignId}/earning-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEarningRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Earning Rules Returns a list of all earning rules within a given campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesEarningRulesListResponseBody> ListEarningRulesAsync(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesListResponseBody> localVarResponse = await ListEarningRulesWithHttpInfoAsync(campaignId, limit, page, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Earning Rules Returns a list of all earning rules within a given campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesEarningRulesListResponseBody>> ListEarningRulesWithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), ParameterOrderListEarningRules? order = default(ParameterOrderListEarningRules?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListEarningRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListEarningRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesEarningRulesListResponseBody>("/v1/loyalties/{campaignId}/earning-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListEarningRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTransactionsListResponseBody</returns>
        public LoyaltiesTransactionsListResponseBody ListLoyaltyCampaignTransactions(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesTransactionsListResponseBody> localVarResponse = ListLoyaltyCampaignTransactionsWithHttpInfo(campaignId, limit, order, startingAfterId, filters);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTransactionsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesTransactionsListResponseBody> ListLoyaltyCampaignTransactionsWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyCampaignTransactions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.VoucherId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucher_id]", filters.VoucherId));
                }
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesTransactionsListResponseBody>("/v1/loyalties/{campaignId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTransactionsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesTransactionsListResponseBody> ListLoyaltyCampaignTransactionsAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesTransactionsListResponseBody> localVarResponse = await ListLoyaltyCampaignTransactionsWithHttpInfoAsync(campaignId, limit, order, startingAfterId, filters, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Campaign Transactions Retrieves all transactions for the campaign with the given campaign ID or campaign name.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="filters">Filters for listing responses. The id filter denotes the unique transaction identifier. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTransactionsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesTransactionsListResponseBody>> ListLoyaltyCampaignTransactionsWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), string startingAfterId = default(string), ParametersFiltersListCampaignTransactions filters = default(ParametersFiltersListCampaignTransactions), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyCampaignTransactions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }
            if (filters != null)
            {
                if (filters.Junction != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[junction]", filters.Junction));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
                if (filters.VoucherId != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[voucherId]", filters.VoucherId));
                }
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyCampaignTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesTransactionsListResponseBody>("/v1/loyalties/{campaignId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyCampaignTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsListResponseBody</returns>
        public LoyaltiesMembersTransactionsListResponseBody ListLoyaltyCardTransactions(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResponse = ListLoyaltyCardTransactionsWithHttpInfo(memberId, limit, order, filters, startingAfterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactionsWithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListLoyaltyCardTransactions");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (filters != null)
            {
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[created_at]", filters.CreatedAt));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyCardTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersTransactionsListResponseBody>("/v1/loyalties/members/{memberId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyCardTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactionsAsync(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResponse = await ListLoyaltyCardTransactionsWithHttpInfoAsync(memberId, limit, order, filters, startingAfterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody>> ListLoyaltyCardTransactionsWithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListLoyaltyCardTransactions");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (filters != null)
            {
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[createdAt]", filters.CreatedAt));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyCardTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersTransactionsListResponseBody>("/v1/loyalties/members/{memberId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyCardTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransactionsListResponseBody</returns>
        public LoyaltiesMembersTransactionsListResponseBody ListLoyaltyCardTransactions1(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResponse = ListLoyaltyCardTransactions1WithHttpInfo(campaignId, memberId, limit, order, filters, startingAfterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransactionsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactions1WithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyCardTransactions1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListLoyaltyCardTransactions1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (filters != null)
            {
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[created_at]", filters.CreatedAt));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyCardTransactions1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersTransactionsListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyCardTransactions1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransactionsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersTransactionsListResponseBody> ListLoyaltyCardTransactions1Async(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody> localVarResponse = await ListLoyaltyCardTransactions1WithHttpInfoAsync(campaignId, memberId, limit, order, filters, startingAfterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Card Transactions Retrieve transaction data related to point movements for a specific loyalty card.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return.</param>
        /// <param name="memberId">A unique code identifying the loyalty card that you are looking to retrieve transaction data for.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="filters">Filters for listing member transactions. id is the unique identifier of the transaction. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the transactions starting after a transaction with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransactionsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersTransactionsListResponseBody>> ListLoyaltyCardTransactions1WithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListTransactions? order = default(ParameterOrderListTransactions?), ParameterFiltersListMemberTransactions filters = default(ParameterFiltersListMemberTransactions), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyCardTransactions1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListLoyaltyCardTransactions1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (filters != null)
            {
                if (filters.CreatedAt != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[createdAt]", filters.CreatedAt));
                }
                if (filters.Id != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "filters[id]", filters.Id));
                }
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyCardTransactions1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersTransactionsListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyCardTransactions1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Campaigns Returns a list of your loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesListCampaignsResponseBody</returns>
        public LoyaltiesListCampaignsResponseBody ListLoyaltyPrograms(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesListCampaignsResponseBody> localVarResponse = ListLoyaltyProgramsWithHttpInfo(limit, page, expand, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Campaigns Returns a list of your loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesListCampaignsResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesListCampaignsResponseBody> ListLoyaltyProgramsWithHttpInfo(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0)
        {
            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyPrograms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesListCampaignsResponseBody>("/v1/loyalties", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyPrograms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Campaigns Returns a list of your loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesListCampaignsResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesListCampaignsResponseBody> ListLoyaltyProgramsAsync(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesListCampaignsResponseBody> localVarResponse = await ListLoyaltyProgramsWithHttpInfoAsync(limit, page, expand, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Campaigns Returns a list of your loyalty campaigns.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="expand">Includes an expanded categories object in the response. If the [Areas and Stores](https://support.voucherify.io/article/623-areas-and-stores) Enterprise feature is enabled, add access_settings_assignments to return assigned areas and stores. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesListCampaignsResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesListCampaignsResponseBody>> ListLoyaltyProgramsWithHttpInfoAsync(int? limit = default(int?), int? page = default(int?), ParameterExpandListCampaigns? expand = default(ParameterExpandListCampaigns?), ParameterOrderListCampaigns? order = default(ParameterOrderListCampaigns?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyPrograms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesListCampaignsResponseBody>("/v1/loyalties", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyPrograms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Tier Earning Rules Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersEarningRulesListResponseBody</returns>
        public LoyaltiesTiersEarningRulesListResponseBody ListLoyaltyTierEarningRules(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> localVarResponse = ListLoyaltyTierEarningRulesWithHttpInfo(campaignId, loyaltyTierId, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Tier Earning Rules Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersEarningRulesListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> ListLoyaltyTierEarningRulesWithHttpInfo(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyTierEarningRules");
            }

            // verify the required parameter 'loyaltyTierId' is set
            if (loyaltyTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'loyaltyTierId' when calling LoyaltiesApi->ListLoyaltyTierEarningRules");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyTierId", Voucherify.Client.ClientUtils.ParameterToString(loyaltyTierId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyTierEarningRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesTiersEarningRulesListResponseBody>("/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyTierEarningRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Tier Earning Rules Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersEarningRulesListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesTiersEarningRulesListResponseBody> ListLoyaltyTierEarningRulesAsync(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersEarningRulesListResponseBody> localVarResponse = await ListLoyaltyTierEarningRulesWithHttpInfoAsync(campaignId, loyaltyTierId, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Tier Earning Rules Retrieve available earning rules for a given tier and the calculation method for earning points.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersEarningRulesListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesTiersEarningRulesListResponseBody>> ListLoyaltyTierEarningRulesWithHttpInfoAsync(string campaignId, string loyaltyTierId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyTierEarningRules");
            }

            // verify the required parameter 'loyaltyTierId' is set
            if (loyaltyTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'loyaltyTierId' when calling LoyaltiesApi->ListLoyaltyTierEarningRules");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyTierId", Voucherify.Client.ClientUtils.ParameterToString(loyaltyTierId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyTierEarningRules";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesTiersEarningRulesListResponseBody>("/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyTierEarningRules", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Tier Rewards Get available rewards for a given tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersRewardsListResponseBody</returns>
        public LoyaltiesTiersRewardsListResponseBody ListLoyaltyTierRewards(string campaignId, string loyaltyTierId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersRewardsListResponseBody> localVarResponse = ListLoyaltyTierRewardsWithHttpInfo(campaignId, loyaltyTierId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Tier Rewards Get available rewards for a given tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersRewardsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesTiersRewardsListResponseBody> ListLoyaltyTierRewardsWithHttpInfo(string campaignId, string loyaltyTierId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyTierRewards");
            }

            // verify the required parameter 'loyaltyTierId' is set
            if (loyaltyTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'loyaltyTierId' when calling LoyaltiesApi->ListLoyaltyTierRewards");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyTierId", Voucherify.Client.ClientUtils.ParameterToString(loyaltyTierId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyTierRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesTiersRewardsListResponseBody>("/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyTierRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Tier Rewards Get available rewards for a given tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersRewardsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesTiersRewardsListResponseBody> ListLoyaltyTierRewardsAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersRewardsListResponseBody> localVarResponse = await ListLoyaltyTierRewardsWithHttpInfoAsync(campaignId, loyaltyTierId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Tier Rewards Get available rewards for a given tier.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name.</param>
        /// <param name="loyaltyTierId">Unique loyalty tier ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersRewardsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesTiersRewardsListResponseBody>> ListLoyaltyTierRewardsWithHttpInfoAsync(string campaignId, string loyaltyTierId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyTierRewards");
            }

            // verify the required parameter 'loyaltyTierId' is set
            if (loyaltyTierId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'loyaltyTierId' when calling LoyaltiesApi->ListLoyaltyTierRewards");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("loyaltyTierId", Voucherify.Client.ClientUtils.ParameterToString(loyaltyTierId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyTierRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesTiersRewardsListResponseBody>("/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyTierRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Tiers Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesTiersListResponseBody</returns>
        public LoyaltiesTiersListResponseBody ListLoyaltyTiers(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersListResponseBody> localVarResponse = ListLoyaltyTiersWithHttpInfo(campaignId, limit, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Tiers Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesTiersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesTiersListResponseBody> ListLoyaltyTiersWithHttpInfo(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyTiers");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyTiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesTiersListResponseBody>("/v1/loyalties/{campaignId}/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyTiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Tiers Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesTiersListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesTiersListResponseBody> ListLoyaltyTiersAsync(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesTiersListResponseBody> localVarResponse = await ListLoyaltyTiersWithHttpInfoAsync(campaignId, limit, order, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Tiers Retrieve a list of loyalty tiers which were added to the loyalty program.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique loyalty campaign ID or name.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesTiersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesTiersListResponseBody>> ListLoyaltyTiersWithHttpInfoAsync(string campaignId, int? limit = default(int?), ParameterOrderListLoyaltyTiers? order = default(ParameterOrderListLoyaltyTiers?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListLoyaltyTiers");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListLoyaltyTiers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesTiersListResponseBody>("/v1/loyalties/{campaignId}/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLoyaltyTiers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Activity   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMemberActivityListResponseBody</returns>
        public LoyaltiesMemberActivityListResponseBody ListMemberActivity(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody> localVarResponse = ListMemberActivityWithHttpInfo(memberId, limit, order, startingAfterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Activity   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMemberActivityListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody> ListMemberActivityWithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberActivity");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMemberActivityListResponseBody>("/v1/loyalties/members/{memberId}/activity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Activity   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMemberActivityListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMemberActivityListResponseBody> ListMemberActivityAsync(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody> localVarResponse = await ListMemberActivityWithHttpInfoAsync(memberId, limit, order, startingAfterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Activity   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to get member activities without having to provide the campaignId as a path parameter. Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMemberActivityListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody>> ListMemberActivityWithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberActivity");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMemberActivityListResponseBody>("/v1/loyalties/members/{memberId}/activity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Activity Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMemberActivityListResponseBody</returns>
        public LoyaltiesMemberActivityListResponseBody ListMemberActivity1(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody> localVarResponse = ListMemberActivity1WithHttpInfo(campaignId, memberId, limit, order, startingAfterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Activity Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMemberActivityListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody> ListMemberActivity1WithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListMemberActivity1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberActivity1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberActivity1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMemberActivityListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/activity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberActivity1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Activity Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMemberActivityListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMemberActivityListResponseBody> ListMemberActivity1Async(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody> localVarResponse = await ListMemberActivity1WithHttpInfoAsync(campaignId, memberId, limit, order, startingAfterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Activity Retrieves the list of activities for the given member ID related to a voucher and customer who is the holder of the voucher.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="order">Apply this filter to order the events according the date and time when it was created. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the events starting after an event with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMemberActivityListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMemberActivityListResponseBody>> ListMemberActivity1WithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderCreatedAt? order = default(ParameterOrderCreatedAt?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListMemberActivity1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberActivity1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberActivity1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMemberActivityListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/activity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberActivity1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member&#39;s Loyalty Tiers Retrieve member tiers using the loyalty card ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTiersListResponseBody</returns>
        public LoyaltiesMembersTiersListResponseBody ListMemberLoyaltyTier(string memberId, int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTiersListResponseBody> localVarResponse = ListMemberLoyaltyTierWithHttpInfo(memberId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member&#39;s Loyalty Tiers Retrieve member tiers using the loyalty card ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTiersListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersTiersListResponseBody> ListMemberLoyaltyTierWithHttpInfo(string memberId, int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberLoyaltyTier");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberLoyaltyTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersTiersListResponseBody>("/v1/loyalties/members/{memberId}/tiers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberLoyaltyTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member&#39;s Loyalty Tiers Retrieve member tiers using the loyalty card ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTiersListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersTiersListResponseBody> ListMemberLoyaltyTierAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTiersListResponseBody> localVarResponse = await ListMemberLoyaltyTierWithHttpInfoAsync(memberId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member&#39;s Loyalty Tiers Retrieve member tiers using the loyalty card ID.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTiersListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersTiersListResponseBody>> ListMemberLoyaltyTierWithHttpInfoAsync(string memberId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberLoyaltyTier");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberLoyaltyTier";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersTiersListResponseBody>("/v1/loyalties/members/{memberId}/tiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberLoyaltyTier", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPendingPointsListResponseBody</returns>
        public LoyaltiesMembersPendingPointsListResponseBody ListMemberPendingPoints(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> localVarResponse = ListMemberPendingPointsWithHttpInfo(memberId, limit, order, startingAfterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPendingPointsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPointsWithHttpInfo(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberPendingPoints");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersPendingPointsListResponseBody>("/v1/loyalties/members/{memberId}/pending-points", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPendingPointsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPointsAsync(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> localVarResponse = await ListMemberPendingPointsWithHttpInfoAsync(memberId, limit, order, startingAfterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to list member pending points without having to provide the campaignId as a path parameter. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPendingPointsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody>> ListMemberPendingPointsWithHttpInfoAsync(string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberPendingPoints");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberPendingPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersPendingPointsListResponseBody>("/v1/loyalties/members/{memberId}/pending-points", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberPendingPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPendingPointsListResponseBody</returns>
        public LoyaltiesMembersPendingPointsListResponseBody ListMemberPendingPoints1(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> localVarResponse = ListMemberPendingPoints1WithHttpInfo(campaignId, memberId, limit, order, startingAfterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPendingPointsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPoints1WithHttpInfo(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListMemberPendingPoints1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberPendingPoints1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberPendingPoints1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersPendingPointsListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/pending-points", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberPendingPoints1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPendingPointsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersPendingPointsListResponseBody> ListMemberPendingPoints1Async(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody> localVarResponse = await ListMemberPendingPoints1WithHttpInfoAsync(campaignId, memberId, limit, order, startingAfterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Pending Points &gt;üöß Beta endpoint The endpoint is behind a feature flag as it is still in development. Contact [Voucherify support](https://www.voucherify.io/contact-support) to unlock the feature for your organization. All current parameters and fields are listed and described. Lists all pending points that are currently assigned to the loyalty card. Once the points are added to the card, the entry is no longer returned. üëç Configuring pending points Pending points are configured as part of an earning rule with POST Create earning rule or PUT Update earning rule.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">Unique loyalty card code assigned to a particular customer.</param>
        /// <param name="limit">Limit the number of the pending point entries that the API returns in the response. (optional)</param>
        /// <param name="order">Orders the pending point entries according the pending point entry ID. The dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="startingAfterId">A cursor for pagination. It retrieves the results starting after a result with the given ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPendingPointsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersPendingPointsListResponseBody>> ListMemberPendingPoints1WithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), ParameterOrderListPendingPoints? order = default(ParameterOrderListPendingPoints?), string startingAfterId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListMemberPendingPoints1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberPendingPoints1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (startingAfterId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "starting_after_id", startingAfterId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberPendingPoints1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersPendingPointsListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/pending-points", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberPendingPoints1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Rewards Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersRewardsListResponseBody</returns>
        public LoyaltiesMembersRewardsListResponseBody ListMemberRewards(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersRewardsListResponseBody> localVarResponse = ListMemberRewardsWithHttpInfo(memberId, affordableOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Rewards Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersRewardsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersRewardsListResponseBody> ListMemberRewardsWithHttpInfo(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberRewards");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (affordableOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "affordable_only", affordableOnly));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersRewardsListResponseBody>("/v1/loyalties/members/{memberId}/rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Member Rewards Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersRewardsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersRewardsListResponseBody> ListMemberRewardsAsync(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersRewardsListResponseBody> localVarResponse = await ListMemberRewardsWithHttpInfoAsync(memberId, affordableOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Member Rewards Retrieves the list of rewards that the given customer (identified by member_id, which is a loyalty card assigned to a particular customer) **can get in exchange for loyalty points**.   You can use the affordable_only parameter to limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card).   Please note that rewards that are disabled (i.e. set to Not Available in the Dashboard) for a given loyalty tier reward mapping will not be returned in this endpoint.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="affordableOnly">Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersRewardsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersRewardsListResponseBody>> ListMemberRewardsWithHttpInfoAsync(string memberId, bool? affordableOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListMemberRewards");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (affordableOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "affordable_only", affordableOnly));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMemberRewards";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersRewardsListResponseBody>("/v1/loyalties/members/{memberId}/rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMemberRewards", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Members Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesListMembersResponseBody</returns>
        public LoyaltiesListMembersResponseBody ListMembers(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesListMembersResponseBody> localVarResponse = ListMembersWithHttpInfo(campaignId, limit, page, customer, createdAt, updatedAt, order, code, ids);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Members Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesListMembersResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesListMembersResponseBody> ListMembersWithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListMembers");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (createdAt != null)
            {
                if (createdAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[before]", createdAt.Before));
                }
                if (createdAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "created_at[after]", createdAt.After));
                }
            }
            if (updatedAt != null)
            {
                if (updatedAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updated_at[before]", updatedAt.Before));
                }
                if (updatedAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updated_at[after]", updatedAt.After));
                }
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesListMembersResponseBody>("/v1/loyalties/{campaignId}/members", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Members Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesListMembersResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesListMembersResponseBody> ListMembersAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesListMembersResponseBody> localVarResponse = await ListMembersWithHttpInfoAsync(campaignId, limit, page, customer, createdAt, updatedAt, order, code, ids, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Members Returns a list of your loyalty cards. The loyalty cards are sorted by creation date, with the most recent loyalty cards appearing first.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID of the loyalty program.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="customer">A tracking identifier of a customer who is the holder of the vouchers. It can be an id generated by Voucherify or the source_id. Remember to use the proper URL escape codes if the source_id contains special characters. (optional)</param>
        /// <param name="createdAt">A filter on the list based on the object created_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [created_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="updatedAt">A filter on the list based on the object updated_at field. The value is a dictionary with the following options: before, after. A date value must be presented in ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: [updated_at][before] 2017-09-08T13:52:18.227Z (optional)</param>
        /// <param name="order">Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)</param>
        /// <param name="code"> (optional)</param>
        /// <param name="ids"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesListMembersResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesListMembersResponseBody>> ListMembersWithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string customer = default(string), ParameterCreatedBeforeAfter createdAt = default(ParameterCreatedBeforeAfter), ParameterUpdatedBeforeAfter updatedAt = default(ParameterUpdatedBeforeAfter), ParameterOrderVouchers? order = default(ParameterOrderVouchers?), string code = default(string), List<string> ids = default(List<string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListMembers");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (customer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "customer", customer));
            }
            if (createdAt != null)
            {
                if (createdAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[before]", createdAt.Before));
                }
                if (createdAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "createdAt[after]", createdAt.After));
                }
            }
            if (updatedAt != null)
            {
                if (updatedAt.Before != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updatedAt[before]", updatedAt.Before));
                }
                if (updatedAt.After != null)
                {
                    localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "updatedAt[after]", updatedAt.After));
                }
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (code != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "code", code));
            }
            if (ids != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("multi", "ids", ids));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListMembers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesListMembersResponseBody>("/v1/loyalties/{campaignId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMembers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Card Point Expiration Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersPointsExpirationListResponseBody</returns>
        public LoyaltiesMembersPointsExpirationListResponseBody ListPointsExpiration(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> localVarResponse = ListPointsExpirationWithHttpInfo(campaignId, memberId, limit, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Card Point Expiration Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersPointsExpirationListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> ListPointsExpirationWithHttpInfo(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListPointsExpiration");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListPointsExpiration");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListPointsExpiration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesMembersPointsExpirationListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/points-expiration", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPointsExpiration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Loyalty Card Point Expiration Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersPointsExpirationListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersPointsExpirationListResponseBody> ListPointsExpirationAsync(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody> localVarResponse = await ListPointsExpirationWithHttpInfoAsync(campaignId, memberId, limit, page, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Loyalty Card Point Expiration Retrieve loyalty point expiration buckets for a given loyalty card. Expired point buckets are not returned in this endpoint. You can use the Exports API to retrieve a list of both ACTIVE and EXPIRED point buckets.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="memberId">Loyalty card code.</param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersPointsExpirationListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersPointsExpirationListResponseBody>> ListPointsExpirationWithHttpInfoAsync(string campaignId, string memberId, int? limit = default(int?), int? page = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListPointsExpiration");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->ListPointsExpiration");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListPointsExpiration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesMembersPointsExpirationListResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/points-expiration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPointsExpiration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reward Assignments Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardAssignmentsListResponseBody</returns>
        public LoyaltiesRewardAssignmentsListResponseBody ListRewardAssignments1(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsListResponseBody> localVarResponse = ListRewardAssignments1WithHttpInfo(campaignId, limit, page, assignmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reward Assignments Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardAssignmentsListResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsListResponseBody> ListRewardAssignments1WithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListRewardAssignments1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (assignmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "assignmentId", assignmentId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListRewardAssignments1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesRewardAssignmentsListResponseBody>("/v1/loyalties/{campaignId}/reward-assignments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewardAssignments1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reward Assignments Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardAssignmentsListResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesRewardAssignmentsListResponseBody> ListRewardAssignments1Async(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsListResponseBody> localVarResponse = await ListRewardAssignments1WithHttpInfoAsync(campaignId, limit, page, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reward Assignments Returns reward assignments from a given loyalty campaign.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to be more contextual to the type of data returned in the response.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardAssignmentsListResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesRewardAssignmentsListResponseBody>> ListRewardAssignments1WithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListRewardAssignments1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (assignmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "assignmentId", assignmentId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListRewardAssignments1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesRewardAssignmentsListResponseBody>("/v1/loyalties/{campaignId}/reward-assignments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewardAssignments1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reward Assignments Returns active rewards from a given loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsListAssignmentsResponseBody</returns>
        public LoyaltiesRewardsListAssignmentsResponseBody ListRewardAssignments2(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody> localVarResponse = ListRewardAssignments2WithHttpInfo(campaignId, limit, page, assignmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reward Assignments Returns active rewards from a given loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsListAssignmentsResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody> ListRewardAssignments2WithHttpInfo(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListRewardAssignments2");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (assignmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "assignment_id", assignmentId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListRewardAssignments2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<LoyaltiesRewardsListAssignmentsResponseBody>("/v1/loyalties/{campaignId}/rewards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewardAssignments2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reward Assignments Returns active rewards from a given loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsListAssignmentsResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesRewardsListAssignmentsResponseBody> ListRewardAssignments2Async(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody> localVarResponse = await ListRewardAssignments2WithHttpInfoAsync(campaignId, limit, page, assignmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reward Assignments Returns active rewards from a given loyalty campaign.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="limit">Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)</param>
        /// <param name="page">Which page of results to return. The lowest value is 1. (optional)</param>
        /// <param name="assignmentId">A unique reward assignment ID. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsListAssignmentsResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesRewardsListAssignmentsResponseBody>> ListRewardAssignments2WithHttpInfoAsync(string campaignId, int? limit = default(int?), int? page = default(int?), string assignmentId = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->ListRewardAssignments2");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (assignmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Voucherify.Client.ClientUtils.ParameterToMultiMap("", "assignment_id", assignmentId));
            }

            localVarRequestOptions.Operation = "LoyaltiesApi.ListRewardAssignments2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LoyaltiesRewardsListAssignmentsResponseBody>("/v1/loyalties/{campaignId}/rewards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRewardAssignments2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Reward   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        public LoyaltiesMembersRedemptionRedeemResponseBody RedeemReward(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResponse = RedeemRewardWithHttpInfo(memberId, loyaltiesMembersRedemptionRedeemRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Reward   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemRewardWithHttpInfo(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->RedeemReward");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersRedemptionRedeemRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.RedeemReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersRedemptionRedeemResponseBody>("/v1/loyalties/members/{memberId}/redemption", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Reward   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemRewardAsync(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResponse = await RedeemRewardWithHttpInfoAsync(memberId, loyaltiesMembersRedemptionRedeemRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Reward   üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to redeem a reward without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersRedemptionRedeemResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody>> RedeemRewardWithHttpInfoAsync(string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->RedeemReward");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersRedemptionRedeemRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.RedeemReward";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersRedemptionRedeemResponseBody>("/v1/loyalties/members/{memberId}/redemption", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemReward", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Reward Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        public LoyaltiesMembersRedemptionRedeemResponseBody RedeemReward1(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResponse = RedeemReward1WithHttpInfo(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Reward Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemReward1WithHttpInfo(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->RedeemReward1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->RedeemReward1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersRedemptionRedeemRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.RedeemReward1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersRedemptionRedeemResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/redemption", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemReward1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Redeem Reward Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersRedemptionRedeemResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersRedemptionRedeemResponseBody> RedeemReward1Async(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody> localVarResponse = await RedeemReward1WithHttpInfoAsync(campaignId, memberId, loyaltiesMembersRedemptionRedeemRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Redeem Reward Exchange points from a loyalty card for a specified reward. This API method returns an assigned award in the response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersRedemptionRedeemRequestBody">Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersRedemptionRedeemResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersRedemptionRedeemResponseBody>> RedeemReward1WithHttpInfoAsync(string campaignId, string memberId, LoyaltiesMembersRedemptionRedeemRequestBody loyaltiesMembersRedemptionRedeemRequestBody = default(LoyaltiesMembersRedemptionRedeemRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->RedeemReward1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->RedeemReward1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersRedemptionRedeemRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.RedeemReward1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersRedemptionRedeemResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/redemption", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RedeemReward1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Loyalty Points Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersTransfersCreateResponseBody</returns>
        public LoyaltiesMembersTransfersCreateResponseBody TransferPoints(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> localVarResponse = TransferPointsWithHttpInfo(campaignId, memberId, loyaltiesTransferPoints);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Loyalty Points Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersTransfersCreateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> TransferPointsWithHttpInfo(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->TransferPoints");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->TransferPoints");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesTransferPoints;

            localVarRequestOptions.Operation = "LoyaltiesApi.TransferPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersTransfersCreateResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/transfers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Loyalty Points Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersTransfersCreateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersTransfersCreateResponseBody> TransferPointsAsync(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersTransfersCreateResponseBody> localVarResponse = await TransferPointsWithHttpInfoAsync(campaignId, memberId, loyaltiesTransferPoints, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Loyalty Points Transfer points between different loyalty cards which have holders. You need to provide the campaign ID and the loyalty card ID you want the points to be transferred to as path parameters in the URL. In the request body, you provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. Transfer works only for loyalty cards that have holders, meaning they were published to customers.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination).</param>
        /// <param name="memberId">A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination).</param>
        /// <param name="loyaltiesTransferPoints">Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersTransfersCreateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersTransfersCreateResponseBody>> TransferPointsWithHttpInfoAsync(string campaignId, string memberId, List<LoyaltiesTransferPoints> loyaltiesTransferPoints = default(List<LoyaltiesTransferPoints>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->TransferPoints");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->TransferPoints");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesTransferPoints;

            localVarRequestOptions.Operation = "LoyaltiesApi.TransferPoints";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersTransfersCreateResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/transfers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferPoints", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Earning Rule Update an earning rule definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesEarningRulesUpdateResponseBody</returns>
        public LoyaltiesEarningRulesUpdateResponseBody UpdateEarningRule(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesUpdateResponseBody> localVarResponse = UpdateEarningRuleWithHttpInfo(campaignId, earningRuleId, loyaltiesEarningRulesUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Earning Rule Update an earning rule definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesEarningRulesUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesEarningRulesUpdateResponseBody> UpdateEarningRuleWithHttpInfo(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->UpdateEarningRule");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter
            localVarRequestOptions.Data = loyaltiesEarningRulesUpdateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LoyaltiesEarningRulesUpdateResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Earning Rule Update an earning rule definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesEarningRulesUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesEarningRulesUpdateResponseBody> UpdateEarningRuleAsync(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesEarningRulesUpdateResponseBody> localVarResponse = await UpdateEarningRuleWithHttpInfoAsync(campaignId, earningRuleId, loyaltiesEarningRulesUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Earning Rule Update an earning rule definition.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="earningRuleId">A unique earning rule ID.</param>
        /// <param name="loyaltiesEarningRulesUpdateRequestBody">Specify the parameters that you would like to update for the given earning rule. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesEarningRulesUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesEarningRulesUpdateResponseBody>> UpdateEarningRuleWithHttpInfoAsync(string campaignId, string earningRuleId, LoyaltiesEarningRulesUpdateRequestBody loyaltiesEarningRulesUpdateRequestBody = default(LoyaltiesEarningRulesUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateEarningRule");
            }

            // verify the required parameter 'earningRuleId' is set
            if (earningRuleId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'earningRuleId' when calling LoyaltiesApi->UpdateEarningRule");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("earningRuleId", Voucherify.Client.ClientUtils.ParameterToString(earningRuleId)); // path parameter
            localVarRequestOptions.Data = loyaltiesEarningRulesUpdateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateEarningRule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LoyaltiesEarningRulesUpdateResponseBody>("/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEarningRule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersBalanceUpdateResponseBody</returns>
        public LoyaltiesMembersBalanceUpdateResponseBody UpdateLoyaltyCardBalance(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResponse = UpdateLoyaltyCardBalanceWithHttpInfo(memberId, loyaltiesMembersBalanceUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalanceWithHttpInfo(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->UpdateLoyaltyCardBalance");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersBalanceUpdateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateLoyaltyCardBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersBalanceUpdateResponseBody>("/v1/loyalties/members/{memberId}/balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCardBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalanceAsync(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResponse = await UpdateLoyaltyCardBalanceWithHttpInfoAsync(memberId, loyaltiesMembersBalanceUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method gives adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.  üìò Alternative endpoint  This endpoint is an alternative to this endpoint. The URL was re-designed to allow you to add or remove loyalty card balance without having to provide the campaignId as a path parameter.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="memberId">Unique loyalty card assigned to a particular customer.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersBalanceUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody>> UpdateLoyaltyCardBalanceWithHttpInfoAsync(string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->UpdateLoyaltyCardBalance");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersBalanceUpdateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateLoyaltyCardBalance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersBalanceUpdateResponseBody>("/v1/loyalties/members/{memberId}/balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCardBalance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesMembersBalanceUpdateResponseBody</returns>
        public LoyaltiesMembersBalanceUpdateResponseBody UpdateLoyaltyCardBalance1(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResponse = UpdateLoyaltyCardBalance1WithHttpInfo(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalance1WithHttpInfo(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateLoyaltyCardBalance1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->UpdateLoyaltyCardBalance1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersBalanceUpdateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateLoyaltyCardBalance1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LoyaltiesMembersBalanceUpdateResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/balance", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCardBalance1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesMembersBalanceUpdateResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesMembersBalanceUpdateResponseBody> UpdateLoyaltyCardBalance1Async(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody> localVarResponse = await UpdateLoyaltyCardBalance1WithHttpInfoAsync(campaignId, memberId, loyaltiesMembersBalanceUpdateRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Loyalty Card Balance This method adds or removes balance to an existing loyalty card that is assigned to a holder. The removal of points will consume the points that expire the soonest.   &gt;üöß Async Action    This is an async action. If you want to perform several add or remove loyalty card balance actions in a short time and their order matters, set up sufficient time-out between the calls.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">Unique campaign ID.</param>
        /// <param name="memberId">A code that identifies the loyalty card.</param>
        /// <param name="loyaltiesMembersBalanceUpdateRequestBody">Specify the point adjustment along with the expiration mechanism. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesMembersBalanceUpdateResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesMembersBalanceUpdateResponseBody>> UpdateLoyaltyCardBalance1WithHttpInfoAsync(string campaignId, string memberId, LoyaltiesMembersBalanceUpdateRequestBody loyaltiesMembersBalanceUpdateRequestBody = default(LoyaltiesMembersBalanceUpdateRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateLoyaltyCardBalance1");
            }

            // verify the required parameter 'memberId' is set
            if (memberId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'memberId' when calling LoyaltiesApi->UpdateLoyaltyCardBalance1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberId", Voucherify.Client.ClientUtils.ParameterToString(memberId)); // path parameter
            localVarRequestOptions.Data = loyaltiesMembersBalanceUpdateRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateLoyaltyCardBalance1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LoyaltiesMembersBalanceUpdateResponseBody>("/v1/loyalties/{campaignId}/members/{memberId}/balance", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyCardBalance1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Loyalty Campaign Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesUpdateCampaignResponseBody</returns>
        public LoyaltiesUpdateCampaignResponseBody UpdateLoyaltyProgram(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesUpdateCampaignResponseBody> localVarResponse = UpdateLoyaltyProgramWithHttpInfo(campaignId, loyaltiesUpdateCampaignRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Loyalty Campaign Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesUpdateCampaignResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesUpdateCampaignResponseBody> UpdateLoyaltyProgramWithHttpInfo(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateLoyaltyProgram");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesUpdateCampaignRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LoyaltiesUpdateCampaignResponseBody>("/v1/loyalties/{campaignId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Loyalty Campaign Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesUpdateCampaignResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesUpdateCampaignResponseBody> UpdateLoyaltyProgramAsync(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesUpdateCampaignResponseBody> localVarResponse = await UpdateLoyaltyProgramWithHttpInfoAsync(campaignId, loyaltiesUpdateCampaignRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Loyalty Campaign Updates a loyalty program.  Fields other than those specified in the allowed request body payload wont be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged.  This method will update the loyalty cards which have not been published or redeemed yet.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="loyaltiesUpdateCampaignRequestBody">Specify the new values for the parameters that you would like to update for the given loyalty campaign. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesUpdateCampaignResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesUpdateCampaignResponseBody>> UpdateLoyaltyProgramWithHttpInfoAsync(string campaignId, LoyaltiesUpdateCampaignRequestBody loyaltiesUpdateCampaignRequestBody = default(LoyaltiesUpdateCampaignRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateLoyaltyProgram");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = loyaltiesUpdateCampaignRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateLoyaltyProgram";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LoyaltiesUpdateCampaignResponseBody>("/v1/loyalties/{campaignId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLoyaltyProgram", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reward Assignment Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LoyaltiesRewardsUpdateAssignmentResponseBody</returns>
        public LoyaltiesRewardsUpdateAssignmentResponseBody UpdateRewardAssignment1(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0)
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody> localVarResponse = UpdateRewardAssignment1WithHttpInfo(campaignId, assignmentId, loyaltiesRewardsUpdateAssignmentRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reward Assignment Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LoyaltiesRewardsUpdateAssignmentResponseBody</returns>
        public Voucherify.Client.ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody> UpdateRewardAssignment1WithHttpInfo(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateRewardAssignment1");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->UpdateRewardAssignment1");
            }

            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter
            localVarRequestOptions.Data = loyaltiesRewardsUpdateAssignmentRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<LoyaltiesRewardsUpdateAssignmentResponseBody>("/v1/loyalties/{campaignId}/rewards/{assignmentId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reward Assignment Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LoyaltiesRewardsUpdateAssignmentResponseBody</returns>
        public async System.Threading.Tasks.Task<LoyaltiesRewardsUpdateAssignmentResponseBody> UpdateRewardAssignment1Async(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Voucherify.Client.ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody> localVarResponse = await UpdateRewardAssignment1WithHttpInfoAsync(campaignId, assignmentId, loyaltiesRewardsUpdateAssignmentRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reward Assignment Updates rewards parameters, i.e. the points cost for the specific reward.
        /// </summary>
        /// <exception cref="Voucherify.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. </param>
        /// <param name="assignmentId">A unique reward assignment ID.</param>
        /// <param name="loyaltiesRewardsUpdateAssignmentRequestBody">Update the points cost for the reward assignment. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LoyaltiesRewardsUpdateAssignmentResponseBody)</returns>
        public async System.Threading.Tasks.Task<Voucherify.Client.ApiResponse<LoyaltiesRewardsUpdateAssignmentResponseBody>> UpdateRewardAssignment1WithHttpInfoAsync(string campaignId, string assignmentId, LoyaltiesRewardsUpdateAssignmentRequestBody loyaltiesRewardsUpdateAssignmentRequestBody = default(LoyaltiesRewardsUpdateAssignmentRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'campaignId' when calling LoyaltiesApi->UpdateRewardAssignment1");
            }

            // verify the required parameter 'assignmentId' is set
            if (assignmentId == null)
            {
                throw new Voucherify.Client.ApiException(400, "Missing required parameter 'assignmentId' when calling LoyaltiesApi->UpdateRewardAssignment1");
            }


            Voucherify.Client.RequestOptions localVarRequestOptions = new Voucherify.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Voucherify.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Voucherify.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaignId", Voucherify.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("assignmentId", Voucherify.Client.ClientUtils.ParameterToString(assignmentId)); // path parameter
            localVarRequestOptions.Data = loyaltiesRewardsUpdateAssignmentRequestBody;

            localVarRequestOptions.Operation = "LoyaltiesApi.UpdateRewardAssignment1";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (X-App-Id) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Id")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Id", this.Configuration.GetApiKeyWithPrefix("X-App-Id"));
            }
            // authentication (X-App-Token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-App-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-App-Token", this.Configuration.GetApiKeyWithPrefix("X-App-Token"));
            }
            // authentication (X-Voucherify-OAuth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<LoyaltiesRewardsUpdateAssignmentResponseBody>("/v1/loyalties/{campaignId}/rewards/{assignmentId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRewardAssignment1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
